{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AliShawky2005/HotelManagementSystem/blob/master/mit%20project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "g0niwh2S8Z83",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2f168d69-aa12-47e8-e799-ab539bd31764"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/41.4 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m41.4/41.4 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.1/84.1 kB\u001b[0m \u001b[31m3.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m45.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m38.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m57.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m7.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m12.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m8.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m6.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m188.7/188.7 MB\u001b[0m \u001b[31m6.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m109.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ],
      "source": [
        "# --- Cell 0: Install libs ---\n",
        "!pip install -q transformers datasets sentence-transformers keybert tqdm evaluate accelerate\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "nDl7BoGJ8wHm"
      },
      "outputs": [],
      "source": [
        "# --- Cell 1: Imports & config ---\n",
        "import os\n",
        "import math\n",
        "import json\n",
        "import random\n",
        "from tqdm.auto import tqdm\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "from transformers import (\n",
        "    pipeline, AutoTokenizer, AutoModelForSeq2SeqLM,\n",
        "    TrainingArguments, Trainer, DataCollatorForSeq2Seq\n",
        ")\n",
        "from datasets import Dataset\n",
        "from sentence_transformers import SentenceTransformer\n",
        "from keybert import KeyBERT\n",
        "\n",
        "# Config - change if needed\n",
        "TEXT_COL = \"text\"          # column with article text\n",
        "MAX_WORDS = 250            # filter threshold\n",
        "BATCH_TEACHER = 8          # batching for teacher inference (8 or 16 depending on GPU)\n",
        "STUDENT_MODEL_NAME = \"t5-small\"   # student model to fine-tune\n",
        "MAX_INPUT_LENGTH = 512     # truncate inputs for tokenizer\n",
        "MAX_TARGET_LENGTH = 256    # truncate combined target\n",
        "RANDOM_SEED = 42\n",
        "os.environ[\"PYTHONHASHSEED\"] = str(RANDOM_SEED)\n",
        "random.seed(RANDOM_SEED)\n",
        "np.random.seed(RANDOM_SEED)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "DOB55PNf8zM-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f7da3a7f-d180-49bf-d8a0-f9da89523182"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Filtered dataset size (<= 250 words): 560 rows\n"
          ]
        }
      ],
      "source": [
        "# --- Cell 2: Load dataset & filter ---\n",
        "# If you already loaded df, skip reading and comment the read line below.\n",
        "# Example: df = pd.read_csv(\"bbc-text.csv\")\n",
        "# If you used kagglehub: data_path from previous cells; adapt accordingly.\n",
        "\n",
        "# Uncomment & edit if needed:\n",
        "df = pd.read_csv(\"bbc-text.csv\")\n",
        "\n",
        "# Ensure df exists\n",
        "try:\n",
        "    df\n",
        "except NameError:\n",
        "    raise RuntimeError(\"DataFrame 'df' not found. Load your CSV into variable `df` before running this cell.\")\n",
        "\n",
        "# Count words and filter\n",
        "df[\"word_count\"] = df[TEXT_COL].apply(lambda x: len(str(x).split()))\n",
        "df = df[df[\"word_count\"] <= MAX_WORDS].copy().reset_index(drop=True)\n",
        "df.drop(columns=[\"word_count\"], inplace=True)\n",
        "print(f\"Filtered dataset size (<= {MAX_WORDS} words): {len(df)} rows\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "G4nf8Nvk81ht",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 941,
          "referenced_widgets": [
            "9f85267a28224d918669f878a9ab2311",
            "a7d27b9b67304b55b36c0fccf8c42f80",
            "4ea02f708b804fd08d276b21fa687573",
            "33cfd1735ed1447cb9df0d8a3afc92b4",
            "d49df7bd37be46e6a27d2f051e0bf0e3",
            "f985c61fd42d4a2a9f531094a55b035b",
            "09d99e64667f4e60a271188afb767879",
            "005784972c3f4e1db33baf33e64edba8",
            "188c5cf1e9a24fa9ad89c42570582bb2",
            "443f9547c04247d5acc2c22f1d62f256",
            "943929e56cf24394a9c100f794ca8c1b",
            "4775bc743b934786af2a03ff26922552",
            "32598f8b1fe6456d9b734153e3be2884",
            "e37d3a90bdcf4f09915f8151a123a378",
            "08796db48bd54b93963d423d2fbae2d3",
            "4b89cd92b68649d59b41262641736c9f",
            "4fdbb91967ba4da2b0ab0f5cf1e83b2e",
            "4bf1a139efc44034a705842c69431fd1",
            "8a167452c6ad4fbeb651922959bd36be",
            "4afa177822eb4524a3cc6129e5be6233",
            "a40c88ff10ad4ee8b7995137d65db1a7",
            "f006e3c999844f899e93012bebfee8a3",
            "4a86478bf12b42ea9b1291dee92d5e85",
            "5f9c9c62969c4fd8898ef165fd8c5443",
            "9df43f9d286e4e8781c4784a851448b3",
            "dbf05ce977f342cbb0268243d532ec6c",
            "074b625fb949488d81885b35a4d8ce4d",
            "4c7f0ca630084ca3a4fe05d0e72458ff",
            "78daf43431174cf981a5c1a1c08626fc",
            "d81493b3127742fab548df54bf871714",
            "7abbdbb4460c4a91853637a9f4844a8e",
            "7edae4eac3304765bce21fabc10a7103",
            "eb7a90fa03db486aa5e29a947a80be8b",
            "035be8823f6e488aa2e14c5fc3cb8f42",
            "e8dc5242436847b0826f0e53096d6f66",
            "ad28b751efe04061a5b7dda0aea72743",
            "0927e4f320764e528118c9f1c98539f6",
            "072abc2df45f42539fd1ecf7789fe0a4",
            "cbbff3b2f1c74adfbf5d5e4a3a2ef265",
            "dd3ab53d197b489f92791a14ec3abe26",
            "160b9ee7f1054d7b8a0c0c8d6a2a2d2d",
            "2b7d0669fde348f882c843e1176a78e4",
            "72fca9884e2d4999a0b7e3c850ab0477",
            "e2264dff924a4fbb81aa12f8f3e02603",
            "cf053d48d5294fa4a6f4d7071a075fc3",
            "cc19b28663d1465aba2b2baed32b6a66",
            "1dc3383a421d41ecb81f83d23a174f76",
            "ee650edc486940a9b345084f79c84510",
            "0f7d243613a7422584147dbee682d343",
            "fa6ffd12822b4390b23c44e12834629b",
            "4020ed46964744d6bcfa74347732e634",
            "14003df177c649b29e5b0a4f08a11237",
            "88e745020b784919a581bb84d9ee1220",
            "b7eefff250fe4a1cab8cf5fa32eecacb",
            "2bf14fe71e0c40629b0904489f716862",
            "092f3a2d66474f4a87261aa96df52278",
            "71605930768747f9a56dfc3bebeaec5a",
            "bb88f34ec49b4907b5a7536076a50240",
            "a6368f9797bb4a8f82599d75b15d36c6",
            "ff10854293b34012b5e319370ed8aba3",
            "e20162492e0a4aec85b5c995d8b1ede2",
            "a95d3c44777143749e4b5997d146ea80",
            "7387ade26f7c42919a1d8ec5b98e7998",
            "bd6b1632075247b58228ee9955043111",
            "97f8c1912e1344e4bedb2e4875b23e46",
            "55c2f5e844af4c80a245c503b5b4a389",
            "8805328360114c3abd5ae3e712a16bfb",
            "457a0fbc7075454f9731ec0ce108b4ae",
            "d6f6852de9a2485c8c0b4e17ad72e23a",
            "8524183a0ac74497980ce182ad44f8dd",
            "b4db43a8e948459a8216f64609d07ceb",
            "ee90793cc44e4a5f932441519e22df50",
            "c6c15b8a4d9845e1bc2f2d6c7238d2f5",
            "d139ee42ab374c30819d6053f4193eaa",
            "877ee81d35784101baa2dafad684834b",
            "9c40d6eeaa6e4c6e8a60607ee702abe3",
            "2bc0304fcf4c41c9833e06d5237813e1",
            "93644ab13bf641a29b1f3ac1d1a334d2",
            "dc08b506c3d84772bc7f5c5dd6ebfe36",
            "c0d8bd9a4810403e881976c413ba51a7",
            "5418f05dd8cf4fd3ad9630ffe5b2d009",
            "1d2218eeac534c3684d87510c2c08709",
            "f442a63a0abe44c38d23e213d9789ec6",
            "dae83f196b3a487c88e1adb16df4d3ca",
            "626b90a87a7d489295bc4a7151d202fe",
            "d5ead0ce05b249ad90da95e64d4f879a",
            "115dc9a31a544d20a63277d9b03f0a2d",
            "4fa4b0f628ec44209735ffba5f8063e5",
            "364fe472114d48cfa8307973560ccadc",
            "be135d3fcedc4d8e93090ea5153f358c",
            "09460ebb96b34d32920ea7e0b2c91ceb",
            "40429f92a4bd444790af6ba0598ad468",
            "7753d75eb81f4d2ea15878ae3ee3d857",
            "b86dd8ec971d470e84415ceed4e43296",
            "860e67f8e1894196aafef714644d28b4",
            "41ea30c2514547d9a250547199122269",
            "0d4edf58d4ee424b8ee078035ef7b09c",
            "7cdd200141dc4559bc707c6fdafd092f",
            "a0d1786dab3b4446bd792509321576d8",
            "234cd9c79d8042e598134ffce0ceda4c",
            "00575d2c532e4597a0237b18db35a9bb",
            "950549fb8be943f199d30294c72ff381",
            "a25c47fb97f94633a6e3916c388639de",
            "e75a59352f5043e1a33878334d46025d",
            "74e207f0bf4647e48811d79414bea3c6",
            "3dd9c59c754e4b0a891411b6aabb5ef2",
            "4f3eac9fd0b8405ebb6d8829cdb838d5",
            "f52336df2df74c5ea35a54e8b366ad34",
            "d7e9fb66ad4c4762a186db4282d222ac",
            "66a40803c78040ad8d46892c1c3a81b7",
            "49f17e39b65b4b58ba6202f930071795",
            "bc16a2de269d4a218600839ccbeb22a0",
            "6cf93a8ca46c4eb399db9acb5a26c5f5",
            "dae13a045d864380a58247c7ec6fa0b7",
            "0bc9c1cce5d44106b4826b2177dbe01b",
            "ea5e070276174134a190ef21fbcf67e4",
            "bbd72f2593cc428baaf8b3e811c024e9",
            "ae85b5275b0e4d1e8f76c0b67adbbcc4",
            "0fdbc6360abb4dd3b187c6035a469059",
            "ad8f2239903f4e21b4f064e2f7876090",
            "23b6337daf2f4e4db0ba4047ec85d9ef",
            "806434cb062e4efdb5f510614da8b59f",
            "2faf8ce20c9f46818a2264a9faeb2143",
            "db91ca5523d54196bbfd5cc5e4d350df",
            "7c73e69ed7654b269de1029a108929b9",
            "954c51f33a18402a97cf9befca3c8f11",
            "a8f1aaaf04b74374a8ce7b8799c953aa",
            "016d28ca7cb344e393e9ed7be3fd40d1",
            "0057efb175a54fe198465c7ab37102ca",
            "e1966ea73fdf4de2b4e899ac3e04ea89",
            "c4cb221ec3af407f92b2ae3e91aef950",
            "de8704f9ef3147bfa69d8fa5792af21e",
            "672148b2115445fcb0e344d02e64c88a",
            "f6767cf08fc741a1804b89eeb8b18b75",
            "d2b549967ae84ac4a19225a9180bbe8c",
            "a3fb1805d9d44ed6a353280fb74abff7",
            "df57c24831ed49409fd5ea7a8d98e5d5",
            "616896bbba954d85a2fc97e2b925c963",
            "95a057e61c274e09a2c63e7927594d93",
            "237bcdb10841468cb57de1ef71966f6f",
            "ed09a7a207b64420b9b9e85a78b46a8c",
            "529ac81c91ec4a6e89f7c9f95e712f27",
            "4c1f33491147418cb85597720d1d858c",
            "8eedfd43f8924ddcb632bb4d093a57a4",
            "efc5100d4ce94d458e9633c5bd98e991",
            "52d7cad6193243a5a80a45e9ed0661ae",
            "cab5715a7c6d409b9439a63803eb8f17",
            "471b87730d2349f58306471d97ef1b9c",
            "3a7fa29da02a4e2eaf1baf874a6c83c0",
            "b1b915e3c41c4a61856a2d77f7cdf20f",
            "237ac43fe3344d928dc4c4cbaf3be9b3",
            "ecedb642ebb94816bc1b5111de8b2adf",
            "d3af4dbf591c49d58bf3c236189c43fe",
            "b3e50fa9301b4725a6a40a702d6fbce5",
            "82da6e7537d24e3592248250e8938264",
            "2874c68f1d0149afa6ff0d95a7b739ab",
            "6095638058e94b15858fced9633f1684",
            "adfbac94190f47949b5f7ce916fba876",
            "ae888c52e10e4fb2a2dbeafca20f80c8",
            "924816cae1d14138899cfc9cb5f7a0c5",
            "4076a8ab153846a280d1a1f9443c73ba",
            "44ceb6c836c44f0abc97b091b5373a8a",
            "35b56f79301a452a8840b9a8300b4ee5",
            "e9dffa2f8bf043499c6b1f5911fe7ee6",
            "35f7c3d474f647f5b9b84ce3abb665dd",
            "f613c1fe617e4f81983f8f31fd85432d",
            "7c57966e03d743f89aeaff11fc34e92b",
            "0f6b521d49764d24825da81c8f62a514",
            "e34a0aab562445c6975eb89b0297f4b1",
            "0576ca2c436241d79ae15c6a33363f6e",
            "20ef443d7efd4d4994c721e3526305ba",
            "6bee8d21b3a94771b290210f188fbf88",
            "9d18eeaf98e64ec3bc7c5589ae795af0",
            "99adf14fb7bb44eba284963b1cd41b1c",
            "64f097c780904a4ab93515cbc90c54ef",
            "85820e07b6ea42308a452a8dbb663b3c",
            "a60d5351d5854b75a0cfcb206a5b63bf",
            "4239c66034c04e76a6e492c34ac9b496",
            "a42c255275364d0d87ed9ad1a3f90cdd",
            "32c7ef97c05a4220acd0ab07ff21c581",
            "dfbc5c76053f46b187d567d9f8b54890",
            "e5ec8f35b1024197b5c27ac66ba91b69",
            "b969a02f885e452eb39a4f0ddae3f418",
            "52ca6661fe41422fa8f12fc990673247",
            "8443174704a54ae1b0d0e31d924a41bc",
            "940eaff3054a461e8be84b033b9de23c",
            "4ecc409558fc482c97f7ce37487bf5c3",
            "cb615610930a4bec90014fd07e909a16",
            "235da291efb2402fa18a17e6d036fdeb",
            "0fde4e22eacb44bea702a362db794e6f",
            "7bb06063390945ad99f3dfe2684dc993",
            "fcc0588bcc8045c686fdf223b76e77c6",
            "dc0ea9f21d924354a9f14cebf13600de",
            "61d930bc7ed04b289d85ba716a63e7d9",
            "71b5457d7b274ba6a4d8a152a1739812",
            "2481e03413e242fdb79fbda09d402659",
            "f2cbd344791643dbb6390aee4c8fa957",
            "b55e537bb5734c7387b4c93fa83d33e3",
            "5b03485baa554a938f1754f40ac8f355",
            "b76d9bc049bc41deb891c93401659351",
            "f95cc5db997344e0965f8313d23071f1",
            "08ad02e04c4d4e45a28c6ce7621f85dc",
            "13dbf966501546ef8efee38b6162fc58",
            "06a82ec6e5764ebdb7e041ef527dbfae",
            "39866fb4e2264f3e8982fde44370e931",
            "cd4de935a95f4ed28b0f24792b4b1bd3",
            "8908aead2a1c4182967f7851efccb0ed",
            "4e03415ba8b348e4a79e3cb348f4fe91",
            "7f737eb1c77d42e2a9448062cd5659b9",
            "8018e0425eb84b6bb929777f2d5e23b5",
            "e1bdbc312d9747ff8dec565608e3708c",
            "cea1c8fb39d1467dad1ae28ca1f22c6b",
            "aa7ad971a57b4ee1916590e271d039f2",
            "c3825865acbd4f749040d555d57426d3",
            "f08a12a971f846a49b0cc43753218ada",
            "0f414292d40c49c980d3cd4fd1eed4e5",
            "b295730e59a2444396efaad3afd93c29",
            "eb695f161d0f4fce842c790633467eb4",
            "1b0ba26719d141a39ef6de5b9883fca4",
            "8e1d1d6db26e4e5fb8b049381d679e16",
            "82ca058b1c24429b9b3607a653af2ecd",
            "d1edac29e8e8465e80775a6e1f767323",
            "327fc87d9ce24ca186a9f2355ab3f145",
            "9685f166b80f43f6b7dc0d615e7a8958",
            "39346ccdc80649a1b06eb98a206d4769",
            "9b5afb35be984d93a80886c3e9e7a664",
            "e97a3de4d1064b8ebd39cf353f3b82bb",
            "b6f16e775d5d40f5851113018b23f98f",
            "7517c2c1d8764328b1cfa8b198298ba9",
            "4b8b5ec7fb274809a5ecb87499f4ef01",
            "e1d021690a87468b98ee167623e96b04",
            "d95869f696c54999a7e7c9b47fc77b85",
            "71733a88ab5e4fdfa3a95781abdf60bc",
            "c1860703623f419192eba3514f483a33",
            "23c9d852e378443d8770ea0e6f2fb448",
            "0520e2fa0e354cfab6a45badd51b89d1",
            "c3fb6b9c95994feeb97417c643c85aae",
            "9b8611da14194297808ffcc67f987167",
            "3ff5fcd4a8a94c298237585716c484c0",
            "5dabab42d4044011b69662c45ef98777",
            "1a212e3583b9470da22a310904b2f6a8",
            "347b4e7e7d5d4fccb7d2d85c19fc948d",
            "06a6537032fb46c8a57fac8f09e87aa5",
            "cb0e870a2ced4e188d0e3a885db773f9",
            "3c12d3fb063045b7a125dbfc47be030e",
            "d5563cabf2e44d37ac28e8303df1da64",
            "261bd88b1df94e9098378b3d5b3f310b",
            "365bc6367fc0461a962a241d8f03c17e",
            "de6e3fe66b304207b9d0d32e548b7184",
            "69642a94089a42cdac5e863acc89e542",
            "677b705af7084e1fa544900ed616ef11",
            "c114565b2ecf4b03bcb92ec4245ecbf0",
            "f95192c16c17441fb3796c982cf820f6",
            "1a5f41a63584485299e1ca1dacdb865b",
            "d17b21acb742410bb12c7e8669d22a35",
            "80546f9ed49f4ce689850fb8ba3603ef",
            "a7b535b1724542b2bdbc1851f67d7d9e",
            "d54ba6f560cf4d3b8f33f46c91ffec80",
            "3eb59753519040d49416d1c122b5708a",
            "5751a72a7c8d485f8635d895a3760efd",
            "184af3b77bad4c93a41728dfe26c6c3b",
            "00d490943cb749919be32fffb2b05ca7",
            "90a3812f355743e5aee4b0d2d7d1b792",
            "ebd4b0e1badb45718504f7c5f78467ba"
          ]
        },
        "outputId": "8115fb7b-1be3-4180-ba4d-b716a6662c5c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "9f85267a28224d918669f878a9ab2311"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "pytorch_model.bin:   0%|          | 0.00/1.22G [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "4775bc743b934786af2a03ff26922552"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/1.22G [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "4a86478bf12b42ea9b1291dee92d5e85"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json:   0%|          | 0.00/26.0 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "035be8823f6e488aa2e14c5fc3cb8f42"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "vocab.json: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "cf053d48d5294fa4a6f4d7071a075fc3"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "merges.txt: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "092f3a2d66474f4a87261aa96df52278"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Device set to use cuda:0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8805328360114c3abd5ae3e712a16bfb"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/308M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "93644ab13bf641a29b1f3ac1d1a334d2"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "generation_config.json:   0%|          | 0.00/147 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "364fe472114d48cfa8307973560ccadc"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "234cd9c79d8042e598134ffce0ceda4c"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "spiece.model:   0%|          | 0.00/792k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "49f17e39b65b4b58ba6202f930071795"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer.json: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "806434cb062e4efdb5f510614da8b59f"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "special_tokens_map.json: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "672148b2115445fcb0e344d02e64c88a"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Device set to use cuda:0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "modules.json:   0%|          | 0.00/349 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8eedfd43f8924ddcb632bb4d093a57a4"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config_sentence_transformers.json:   0%|          | 0.00/116 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "82da6e7537d24e3592248250e8938264"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "README.md: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f613c1fe617e4f81983f8f31fd85432d"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "sentence_bert_config.json:   0%|          | 0.00/53.0 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "a60d5351d5854b75a0cfcb206a5b63bf"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/612 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "cb615610930a4bec90014fd07e909a16"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/90.9M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5b03485baa554a938f1754f40ac8f355"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json:   0%|          | 0.00/350 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8018e0425eb84b6bb929777f2d5e23b5"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "vocab.txt: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "82ca058b1c24429b9b3607a653af2ecd"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer.json: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d95869f696c54999a7e7c9b47fc77b85"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "special_tokens_map.json:   0%|          | 0.00/112 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "06a6537032fb46c8a57fac8f09e87aa5"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/190 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "1a5f41a63584485299e1ca1dacdb865b"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Teacher models initialized.\n"
          ]
        }
      ],
      "source": [
        "# --- Cell 3: Initialize teacher models & tokenizer ---\n",
        "device_for_pipeline = 0  # use GPU if available; set -1 for CPU\n",
        "\n",
        "# Summarizer pipeline (teacher 1)\n",
        "summarizer = pipeline(\"summarization\", model=\"sshleifer/distilbart-cnn-12-6\", device=device_for_pipeline)\n",
        "summ_tokenizer = AutoTokenizer.from_pretrained(\"sshleifer/distilbart-cnn-12-6\")\n",
        "SUMMARIZER_MAX_TOKENS = summ_tokenizer.model_max_length\n",
        "\n",
        "# Interpreter pipeline (teacher 2)\n",
        "interpreter = pipeline(\"text2text-generation\", model=\"google/flan-t5-small\", device=device_for_pipeline)\n",
        "interp_tokenizer = AutoTokenizer.from_pretrained(\"google/flan-t5-small\")\n",
        "INTERP_MAX_TOKENS = interp_tokenizer.model_max_length\n",
        "\n",
        "# Topic extractor (teacher 3) using sentence-transformers and KeyBERT\n",
        "embed_model = SentenceTransformer(\"all-MiniLM-L6-v2\")\n",
        "kw_model = KeyBERT(model=embed_model)\n",
        "\n",
        "print(\"Teacher models initialized.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84,
          "referenced_widgets": [
            "34836f08c5254b9f89c3bb03050cf8f4",
            "b03fe64613c441ee8502469c1a402838",
            "8d05a7cac44a4b8382f2fb4ef152f86a",
            "fe45fd8b4d334d0ebd1d1b24800ca5ef",
            "dd1c42e6d4bb4b70a7d075b217c851af",
            "01fe1b9cc1b44877bbf6a314d5059398",
            "1409e467e3ac4cf49d72b9658b5445eb",
            "b97f58be89834c939e0c8e5529f14583",
            "99b340af0fcf4a48a1353755a6675311",
            "8d859fcc185f431a83df3eb1879977fc",
            "8318f6adab584c2799b9615948ee8409"
          ]
        },
        "id": "BCyPmrXd85id",
        "outputId": "92a34950-2fb4-44b1-9ebc-50ee832e1bbb"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Teacher inference (batches):   0%|          | 0/70 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "34836f08c5254b9f89c3bb03050cf8f4"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "You seem to be using the pipelines sequentially on GPU. In order to maximize efficiency please use a dataset\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Teacher outputs generated for all filtered articles.\n"
          ]
        }
      ],
      "source": [
        "# --- Cell 4: Generate teacher outputs & combine targets ---\n",
        "\n",
        "def safe_truncate_with_tokenizer(text, tokenizer, max_tokens):\n",
        "    toks = tokenizer.encode(text, add_special_tokens=True)\n",
        "    if len(toks) > max_tokens:\n",
        "        toks = toks[:max_tokens]\n",
        "    return tokenizer.decode(toks, skip_special_tokens=True)\n",
        "\n",
        "def make_combined_target(summary, interpretation, topics):\n",
        "    # topics is a list\n",
        "    topics_str = \"; \".join(topics)\n",
        "    target = (\n",
        "        \"SUMMARY: \" + summary.strip() + \"\\n\\n\"\n",
        "        \"INTERPRETATION: \" + interpretation.strip() + \"\\n\\n\"\n",
        "        \"TOPICS: \" + topics_str.strip()\n",
        "    )\n",
        "    return target\n",
        "\n",
        "articles = df[TEXT_COL].tolist()\n",
        "n = len(articles)\n",
        "\n",
        "all_summaries = []\n",
        "all_interpretations = []\n",
        "all_topics = []\n",
        "all_targets = []\n",
        "\n",
        "for i in tqdm(range(0, n, BATCH_TEACHER), desc=\"Teacher inference (batches)\"):\n",
        "    batch = articles[i : i + BATCH_TEACHER]\n",
        "    # 1) prepare truncation for summarizer\n",
        "    batch_for_summarizer = [\n",
        "        safe_truncate_with_tokenizer(txt, summ_tokenizer, SUMMARIZER_MAX_TOKENS)\n",
        "        for txt in batch\n",
        "    ]\n",
        "    # Summarize\n",
        "    try:\n",
        "        sums = summarizer(batch_for_summarizer, max_length=80, min_length=20, do_sample=False)\n",
        "        sums_text = [s[\"summary_text\"] for s in sums]\n",
        "    except Exception as e:\n",
        "        # On failure, fallback to summarizing articles one-by-one\n",
        "        print(\"Summarizer batch failed:\", e, \" - falling back to per-article\")\n",
        "        sums_text = []\n",
        "        for txt in batch_for_summarizer:\n",
        "            out = summarizer(txt, max_length=80, min_length=20, do_sample=False)\n",
        "            sums_text.append(out[0][\"summary_text\"])\n",
        "\n",
        "    # 2) interpret the summaries\n",
        "    prompts = [f\"Explain this like an expert: {s}\" for s in sums_text]\n",
        "    try:\n",
        "        ints = interpreter(prompts, max_new_tokens=64, do_sample=False)\n",
        "        ints_text = [it[\"generated_text\"] for it in ints]\n",
        "    except Exception as e:\n",
        "        print(\"Interpreter batch failed:\", e, \" - falling back to per-item\")\n",
        "        ints_text = []\n",
        "        for p in prompts:\n",
        "            out = interpreter(p, max_new_tokens=64, do_sample=False)\n",
        "            ints_text.append(out[0][\"generated_text\"])\n",
        "\n",
        "    # 3) topics using KeyBERT on the summary\n",
        "    topics_batch = []\n",
        "    for s in sums_text:\n",
        "        kws = kw_model.extract_keywords(s, top_n=5)\n",
        "        topics_batch.append([kw for kw, score in kws])\n",
        "\n",
        "    # Collect\n",
        "    all_summaries.extend(sums_text)\n",
        "    all_interpretations.extend(ints_text)\n",
        "    all_topics.extend(topics_batch)\n",
        "\n",
        "    # Build combined targets\n",
        "    for s, itp, tps in zip(sums_text, ints_text, topics_batch):\n",
        "        all_targets.append(make_combined_target(s, itp, tps))\n",
        "\n",
        "print(\"Teacher outputs generated for all filtered articles.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "jSrUS3cT87h1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "31d58626-4e04-4085-ef06-971daa761f85"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size: 448, Test size: 112\n"
          ]
        }
      ],
      "source": [
        "# --- Cell 5: Build HF Dataset and train/test split ---\n",
        "# Build a DataFrame with inputs and combined targets\n",
        "df_model = pd.DataFrame({\n",
        "    \"input_text\": df[TEXT_COL].tolist(),\n",
        "    \"target_text\": all_targets\n",
        "})\n",
        "\n",
        "# Shuffle before split\n",
        "df_model = df_model.sample(frac=1.0, random_state=RANDOM_SEED).reset_index(drop=True)\n",
        "train_size = int(0.8 * len(df_model))\n",
        "train_df = df_model.iloc[:train_size]\n",
        "test_df = df_model.iloc[train_size:]\n",
        "\n",
        "print(f\"Train size: {len(train_df)}, Test size: {len(test_df)}\")\n",
        "\n",
        "# Convert to Hugging Face Dataset\n",
        "train_dataset = Dataset.from_pandas(train_df)\n",
        "test_dataset = Dataset.from_pandas(test_df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "1Ej1LFO88_Ed",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 232,
          "referenced_widgets": [
            "7d62926c43fe4398abdf2c156811a81b",
            "5fcb10200d844faab9367507223c2ced",
            "efae785cd1fb4f88a93523a4c4e5c18f",
            "9b5fbebea8db4aa9be6ff4ff17cd6ea0",
            "4985951fd2f24707890071841cee3c96",
            "dbbb201b7ae542a49b8f0947809d0599",
            "75b96b1d51554f56b0dbc1c64b68973e",
            "64b5c9e6eebe4343988f22161b4adbf1",
            "d36321cdb51243aaa4b7bcfe5b3c6895",
            "05f4787bb6924ae994a988e78566296b",
            "e31dd42dd3f645a9bb59a63c80e1f7c2",
            "caa39d82ffed4828998f7a117bd4c228",
            "bb719a67c76e42309e382d42927bcfb4",
            "d4d5c4b35e93450eb7d3660c4f2194e0",
            "a44f581f849642da9af09351bd3184f5",
            "4a7f17be413442759b8c63f9ed0dc496",
            "16b640c41e38406788d71113186c124a",
            "82ac1510926a4f43b31edab69bba6e89",
            "c155ea5b88474073b3f01d59ee69e40e",
            "741dd41b3cf541cda6f89c0d5955d7cf",
            "ef76434b00c04166aafdeb0a12e7c736",
            "b1f473c374c44391bcf52c69306296d6",
            "863c13b957694a58ace3ca62e3251889",
            "b6da8aa346034f41a0a6bef909d41c5d",
            "5d20e4a4f7b343efbfbc66a6fd811621",
            "57a699217da84699b74ef8c4a5e383f5",
            "d6ba21bcc2c34deda6b19456a80ee6af",
            "a8b264f230084cfb8db6595c4a1de30c",
            "1085e0b7b16a4178ba12a35592a6a9de",
            "c010c6aa7ee447f4926b2899d62d7678",
            "fdcf5bdcd9264094b4596b176f3f9d0d",
            "875117b9eeaa4223b6e68c598f723ebd",
            "dc5e32a8e22645f384ce3ec74df69167",
            "9c787b141a49432886c8ec4b72aaf042",
            "c54ef67f3bba403fb43c646981318aae",
            "c93a03a1871b4ae4bc42fe7a4a6f6fae",
            "f3d409204b6c45078755997d3aef4d62",
            "4ac2f6862e7041c3a1684886d1aafd0e",
            "c18405fd7f914809b45dd764b2381897",
            "a01d2b35d25d4179a11a7cf17dcaaed4",
            "85bdf1014f8c491e8d37e318c59e072c",
            "fd9411585231459ca404580c5b97f7a7",
            "9d2611d9ee4a44639637de23e8303cfd",
            "e1fcc23bbd8b4dd7bb41f48dae0551ba",
            "2b81b83189544ba195a846f3c5c6f71e",
            "8ab52d6cf13844319049e23f9e6c5187",
            "ba6f39a38e1f49c3b94b2bf4762d1ec5",
            "a9f63eacf46e4b239878b2263215bdce",
            "78878b1574254e119e17ad7d2037f694",
            "b5f0df1c84d44a13b585b07bba9a7761",
            "c0f48e42809645c0a3a2604a1edd9018",
            "b313b3e337a5425cb51ca43966f9007d",
            "32ea9145ca924c5f81af0068cbda9851",
            "13f81ee3096543bdaa6a458bc8166f1a",
            "5c03a53d31fe49d18321bf09622bade8"
          ]
        },
        "outputId": "e170ff81-29e9-4580-ce2a-fb0a51beb128"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json:   0%|          | 0.00/2.32k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "7d62926c43fe4398abdf2c156811a81b"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "spiece.model:   0%|          | 0.00/792k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "caa39d82ffed4828998f7a117bd4c228"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer.json:   0%|          | 0.00/1.39M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "863c13b957694a58ace3ca62e3251889"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Map:   0%|          | 0/448 [00:00<?, ? examples/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "9c787b141a49432886c8ec4b72aaf042"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/transformers/tokenization_utils_base.py:4006: UserWarning: `as_target_tokenizer` is deprecated and will be removed in v5 of Transformers. You can tokenize your labels by using the argument `text_target` of the regular `__call__` method (either in the same call as your input texts if you use the same keyword arguments, or in a separate call.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Map:   0%|          | 0/112 [00:00<?, ? examples/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "2b81b83189544ba195a846f3c5c6f71e"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "# --- Cell 6: Tokenize datasets for seq2seq training ---\n",
        "from transformers import AutoTokenizer\n",
        "\n",
        "tokenizer_student = AutoTokenizer.from_pretrained(STUDENT_MODEL_NAME)\n",
        "\n",
        "def preprocess_function(examples):\n",
        "    inputs = examples[\"input_text\"]\n",
        "    targets = examples[\"target_text\"]\n",
        "    model_inputs = tokenizer_student(inputs, max_length=MAX_INPUT_LENGTH, truncation=True, padding=\"max_length\")\n",
        "\n",
        "    # Tokenize targets with the student tokenizer\n",
        "    with tokenizer_student.as_target_tokenizer():\n",
        "        labels = tokenizer_student(targets, max_length=MAX_TARGET_LENGTH, truncation=True, padding=\"max_length\")\n",
        "\n",
        "    model_inputs[\"labels\"] = labels[\"input_ids\"]\n",
        "    return model_inputs\n",
        "\n",
        "tokenized_train = train_dataset.map(preprocess_function, batched=True, remove_columns=train_dataset.column_names)\n",
        "tokenized_test = test_dataset.map(preprocess_function, batched=True, remove_columns=test_dataset.column_names)\n",
        "\n",
        "data_collator = DataCollatorForSeq2Seq(tokenizer_student, model=None, padding=\"longest\")\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3ac11d1b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0530e3f0-ce1d-4c03-a98a-6d47dee7f782"
      },
      "source": [
        "!pip install -q rouge-score"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Building wheel for rouge-score (setup.py) ... \u001b[?25l\u001b[?25hdone\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "i5WtdjRU8_6t",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 162,
          "referenced_widgets": [
            "10830644776b4644881272566bf014aa",
            "b891d4311b334071bdae051685cd78f6",
            "2aceb93afc4e47f6bdb5d89efa69fe32",
            "d270da8940b74f7e85fba65184b5799a",
            "8e252730f284452da767a22304220987",
            "b0c3681644ad4045810a148901417143",
            "52a9e573e398411e9ac77b64daa166d7",
            "7f6a80455b384af18ccbd472fd9468a1",
            "b3ff9c5b0cfe46b39f1f373de74a78a9",
            "c7ae03ad06774ccd8181e682e373bf44",
            "e36cf38afa0f42dc87aa571710723cd2",
            "61dcd3782b4b4fc9835ee39ecdb0bd75",
            "9351573fdd334834b3b333182819429b",
            "d37c40ea1fe8409d92db9d06b74d073b",
            "6e80929109c243edbda3e52f96abad3c",
            "8938b746317a4472b9d3c62c686809d2",
            "0bbd32c5e163461f9af55c220ca40c64",
            "d3d2c975245e4e8a8cc3f895dcf2851c",
            "06c0a2b609bf4118986e9b020d44ae7f",
            "078fa8723e5540deb5394d58beea4ea9",
            "dfa34693ca6c427c80a454d9299dc05f",
            "142bca6cb8394dc08f9ad8623dd7dbaf",
            "410bd6a53f1f4d5796bb9e2ae75ba49c",
            "2cabb38737884358823a2948fdf4de13",
            "51e1deee639d459ab8cd37cf438b03e9",
            "ce36633673b048b8aa8d043b72ceab07",
            "d6730b25c0f94033981b368795f085ef",
            "193f0825b8324cbb9f11d7e3faf6a9b8",
            "ca9b4a456c354cbfa704ec5a6a186427",
            "d779ba39b086462484ef5f72e86df42e",
            "bec7e5bcae7f4de99803402c74bd2e03",
            "ae7d8d448db24e0ba7d0354f185cb0cb",
            "ce1c001b692a4170a9a34dab50e436c8",
            "be0e17f8eac3438bbdb377366ee33033",
            "86dbb04ee35b405083c8630f2d3e50eb",
            "b8768ecd32794436ab67f2ce49daf9c3",
            "1c75b9eb7ddd4cae968d0cdb68691e29",
            "c84bd06ae4dc4559af4e621e8957bbf4",
            "ebfbcb4ca2ed456982e16f85af34226d",
            "e6b592b6e1784d3997e4ca5f13354e8f",
            "d21c40f04454474badc98c42dcc08400",
            "6c12ef818a36431e8211460ae84076d7",
            "9469c8099f0f4cba913b6e6ddc5d9d08",
            "3575cec4dbca4466bb77a6bace2fcb09"
          ]
        },
        "outputId": "e3ff98d0-e727-4c72-96c7-d5de0f3e8b0f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/1.21k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "10830644776b4644881272566bf014aa"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/242M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "61dcd3782b4b4fc9835ee39ecdb0bd75"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "generation_config.json:   0%|          | 0.00/147 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "410bd6a53f1f4d5796bb9e2ae75ba49c"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Downloading builder script: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "be0e17f8eac3438bbdb377366ee33033"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Trainer ready. GPU: True fp16: True\n"
          ]
        }
      ],
      "source": [
        "# --- Cell 7: Setup student model & Trainer (updated) ---\n",
        "import torch\n",
        "import numpy as np\n",
        "from transformers import AutoModelForSeq2SeqLM, TrainingArguments, Trainer, DataCollatorForSeq2Seq\n",
        "import evaluate\n",
        "\n",
        "# load model\n",
        "student_model = AutoModelForSeq2SeqLM.from_pretrained(STUDENT_MODEL_NAME)\n",
        "\n",
        "# ensure tokenizer_student already exists (loaded in Cell 6)\n",
        "# create a DataCollator that knows the model (better for seq2seq)\n",
        "data_collator = DataCollatorForSeq2Seq(tokenizer_student, model=student_model, padding=\"longest\")\n",
        "\n",
        "# choose fp16 only if GPU available\n",
        "use_fp16 = torch.cuda.is_available()\n",
        "\n",
        "# training args\n",
        "training_args = TrainingArguments(\n",
        "    output_dir=\"./student_model\",\n",
        "    per_device_train_batch_size=8,     # lower to 4 if OOM\n",
        "    per_device_eval_batch_size=8,\n",
        "    eval_strategy=\"epoch\",       # run evaluation each epoch\n",
        "    logging_strategy=\"steps\",\n",
        "    logging_steps=100,\n",
        "    save_strategy=\"epoch\",\n",
        "    num_train_epochs=3,\n",
        "    weight_decay=0.01,\n",
        "    learning_rate=5e-5,\n",
        "    save_total_limit=2,\n",
        "    fp16=use_fp16,\n",
        "    # Removed predict_with_generate as it's not supported in this version\n",
        ")\n",
        "\n",
        "# load rouge metric\n",
        "rouge = evaluate.load(\"rouge\")\n",
        "\n",
        "def compute_metrics(eval_pred):\n",
        "    \"\"\"\n",
        "    eval_pred contains (predictions, labels).\n",
        "    When predict_with_generate=True, predictions are generated token ids.\n",
        "    This function handles both token-id and logits cases gracefully.\n",
        "    \"\"\"\n",
        "    predictions, labels = eval_pred\n",
        "\n",
        "    # if Hugging Face returns a tuple (e.g., (preds, some_other)) — handle it\n",
        "    if isinstance(predictions, tuple):\n",
        "        predictions = predictions[0]\n",
        "\n",
        "    # If predictions are logits (float), take argmax along vocab dim\n",
        "    # (This is a fallback — with predict_with_generate=True you should get int ids)\n",
        "    if getattr(predictions, \"dtype\", None) is not None and np.issubdtype(np.array(predictions).dtype, np.floating):\n",
        "        predictions = np.argmax(predictions, axis=-1)\n",
        "\n",
        "    # decode preds and labels\n",
        "    decoded_preds = tokenizer_student.batch_decode(predictions, skip_special_tokens=True)\n",
        "\n",
        "    # replace -100 in labels as the tokenizer.pad_token_id so decoding works\n",
        "    labels = np.where(labels != -100, labels, tokenizer_student.pad_token_id)\n",
        "    decoded_labels = tokenizer_student.batch_decode(labels, skip_special_tokens=True)\n",
        "\n",
        "    # compute rouge\n",
        "    try:\n",
        "        result = rouge.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)\n",
        "        result = {k: round(v * 100, 4) for k, v in result.items()}\n",
        "    except Exception as e:\n",
        "        print(\"Rouge computation failed:\", e)\n",
        "        result = {}\n",
        "\n",
        "    # add generation length\n",
        "    try:\n",
        "        prediction_lens = [np.count_nonzero(pred != tokenizer_student.pad_token_id) for pred in predictions]\n",
        "        result[\"gen_len\"] = float(np.mean(prediction_lens))\n",
        "    except Exception:\n",
        "        result[\"gen_len\"] = None\n",
        "\n",
        "    return result\n",
        "\n",
        "# instantiate trainer\n",
        "trainer = Trainer(\n",
        "    model=student_model,\n",
        "    args=training_args,\n",
        "    train_dataset=tokenized_train,\n",
        "    eval_dataset=tokenized_test,\n",
        "    tokenizer=tokenizer_student,\n",
        "    data_collator=data_collator,\n",
        "    compute_metrics=compute_metrics\n",
        ")\n",
        "\n",
        "print(\"Trainer ready. GPU:\", torch.cuda.is_available(), \"fp16:\", use_fp16)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "iOYUu5Cj9C4N",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "outputId": "0a1f6ab4-a4b9-4893-c1b0-9c8f54e69f1b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "        window._wandbApiKey = new Promise((resolve, reject) => {\n",
              "            function loadScript(url) {\n",
              "            return new Promise(function(resolve, reject) {\n",
              "                let newScript = document.createElement(\"script\");\n",
              "                newScript.onerror = reject;\n",
              "                newScript.onload = resolve;\n",
              "                document.body.appendChild(newScript);\n",
              "                newScript.src = url;\n",
              "            });\n",
              "            }\n",
              "            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n",
              "            const iframe = document.createElement('iframe')\n",
              "            iframe.style.cssText = \"width:0;height:0;border:none\"\n",
              "            document.body.appendChild(iframe)\n",
              "            const handshake = new Postmate({\n",
              "                container: iframe,\n",
              "                url: 'https://wandb.ai/authorize'\n",
              "            });\n",
              "            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n",
              "            handshake.then(function(child) {\n",
              "                child.on('authorize', data => {\n",
              "                    clearTimeout(timeout)\n",
              "                    resolve(data)\n",
              "                });\n",
              "            });\n",
              "            })\n",
              "        });\n",
              "    "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: Logging into wandb.ai. (Learn how to deploy a W&B server locally: https://wandb.me/wandb-server)\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize?ref=models\n",
            "wandb: Paste an API key from your profile and hit enter:"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            " ··········\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m If you're specifying your api key in code, ensure this code is not shared publicly.\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Consider setting the WANDB_API_KEY environment variable, or running `wandb login` from the command line.\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: No netrc file found, creating one.\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33maliahmedshawky183237\u001b[0m (\u001b[33maliahmedshawky183237-mit\u001b[0m) to \u001b[32mhttps://api.wandb.ai\u001b[0m. Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Tracking run with wandb version 0.21.1"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Run data is saved locally in <code>/content/wandb/run-20250814_094615-0yc6yw34</code>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Syncing run <strong><a href='https://wandb.ai/aliahmedshawky183237-mit/huggingface/runs/0yc6yw34' target=\"_blank\">quiet-star-5</a></strong> to <a href='https://wandb.ai/aliahmedshawky183237-mit/huggingface' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/developer-guide' target=\"_blank\">docs</a>)<br>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              " View project at <a href='https://wandb.ai/aliahmedshawky183237-mit/huggingface' target=\"_blank\">https://wandb.ai/aliahmedshawky183237-mit/huggingface</a>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              " View run at <a href='https://wandb.ai/aliahmedshawky183237-mit/huggingface/runs/0yc6yw34' target=\"_blank\">https://wandb.ai/aliahmedshawky183237-mit/huggingface/runs/0yc6yw34</a>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "    <div>\n",
              "      \n",
              "      <progress value='168' max='168' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
              "      [168/168 01:27, Epoch 3/3]\n",
              "    </div>\n",
              "    <table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              " <tr style=\"text-align: left;\">\n",
              "      <th>Epoch</th>\n",
              "      <th>Training Loss</th>\n",
              "      <th>Validation Loss</th>\n",
              "      <th>Rouge1</th>\n",
              "      <th>Rouge2</th>\n",
              "      <th>Rougel</th>\n",
              "      <th>Rougelsum</th>\n",
              "      <th>Gen Len</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>1</td>\n",
              "      <td>No log</td>\n",
              "      <td>0.634930</td>\n",
              "      <td>77.002900</td>\n",
              "      <td>64.133400</td>\n",
              "      <td>75.829600</td>\n",
              "      <td>75.804700</td>\n",
              "      <td>120.535714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2</td>\n",
              "      <td>2.058200</td>\n",
              "      <td>0.496555</td>\n",
              "      <td>78.685000</td>\n",
              "      <td>66.547000</td>\n",
              "      <td>77.363400</td>\n",
              "      <td>77.360600</td>\n",
              "      <td>121.883929</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>3</td>\n",
              "      <td>2.058200</td>\n",
              "      <td>0.469332</td>\n",
              "      <td>79.068400</td>\n",
              "      <td>67.012500</td>\n",
              "      <td>77.842600</td>\n",
              "      <td>77.871600</td>\n",
              "      <td>121.875000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table><p>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training finished and model saved to ./student_model_final\n"
          ]
        }
      ],
      "source": [
        "# --- Cell 8: Train student model ---\n",
        "trainer.train()\n",
        "trainer.save_model(\"./student_model_final\")\n",
        "print(\"Training finished and model saved to ./student_model_final\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "V8sAz2k49Lou",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "60823f02d08c4553a4476f8e16c49c72",
            "6efcb6a5d8cd48509f311b7598fa02b9",
            "d9e65b3a8a0348deb6f61c5a09dcd34e",
            "799a5b33daf04ebebe2713c6918109b1",
            "69b069ee18ed47ec93dd4704c8087f47",
            "6788969d8c8a4745b30a88c54e5d4e45",
            "d8ba7bbc801244a693191efafc873e84",
            "fa1e7739b09a426da95fd7b154aa05b5",
            "23a192764bf249c2ab79c11a14a34878",
            "3e588dec0dc84047abd6bdab68408173",
            "4ae72f760ecb4454b04c07377e92618f"
          ]
        },
        "outputId": "ec1b943f-a6b3-4492-a168-9d3b1b5393ae"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Device set to use cuda:0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Generating with student:   0%|          | 0/112 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "60823f02d08c4553a4476f8e16c49c72"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved student predictions to student_predictions.csv\n"
          ]
        }
      ],
      "source": [
        "# --- Cell 9: Evaluate & generate predictions on test set ---\n",
        "from transformers import pipeline as hf_pipeline\n",
        "import torch\n",
        "\n",
        "# Auto-select device: 0 if GPU available, else -1 (CPU)\n",
        "_device = 0 if torch.cuda.is_available() else -1\n",
        "\n",
        "student_tokenizer = tokenizer_student\n",
        "student_pipe = hf_pipeline(\"text2text-generation\",\n",
        "                           model=\"./student_model_final\",\n",
        "                           tokenizer=student_tokenizer,\n",
        "                           device=_device)\n",
        "\n",
        "predictions = []\n",
        "for i in tqdm(range(0, len(test_df)), desc=\"Generating with student\"):\n",
        "    inp = test_df[\"input_text\"].iloc[i]\n",
        "    out = student_pipe(inp, max_length=MAX_TARGET_LENGTH, do_sample=False)\n",
        "    predictions.append(out[0][\"generated_text\"])\n",
        "\n",
        "# Store predictions next to test set and save\n",
        "test_df = test_df.reset_index(drop=True)\n",
        "test_df[\"student_pred\"] = predictions\n",
        "test_df.to_csv(\"student_predictions.csv\", index=False)\n",
        "print(\"Saved student predictions to student_predictions.csv\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "HZoOpdlM9Pit",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "79961afe-2d05-4e8d-e9d5-2409efd8f0ba"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sample outputs:\n",
            "                                                                                                                                                                                              input_text                                                                                                                                                                                              target_text                                                                                                                                                                                             student_pred\n",
            "ray dvd beats box office takings oscar-nominated film biopic ray has surpassed its us box office takings with a combined tally of $80m (£43m) from dvd and video sales and rentals.  ray s success on... SUMMARY: ray dvd beats box office takings with a combined tally of $80m (£43m) from dvd and video sales and rentals . ray has been nominated in six oscar categories including best film and best act... ray has surpassed its us box office takings with a combined tally of $80m (£43m) from dvd and video sales and rentals . success on dvd outstripped its $74m (£40m) us box office total earning more t...\n",
            "chinese wine tempts italy s illva italy s illva saronno has agreed to buy 33% of changyu  the largest wine maker in china.  changyu said in a statement to the shenzhen stock exchange that illva wil... SUMMARY: Italian liqueur maker illva saronno has agreed to buy 33% of changyu the largest wine maker in china . chinese wine sales are growing with wine sales in 2003 up 25% at 61.1bn yuan . anheus... chinese wine tempts italy s illva italy s illva saronno has agreed to buy 33% of changyu the largest wine maker in china . changyu said in a statement to the shenzhen stock exchange that illva will...\n",
            "mild winter drives us oil down 6% us oil prices have fallen by 6%  driven down by forecasts of a mild winter in the densely populated northeast.  light crude oil futures fell $2.86 to $41.32 a barr... SUMMARY: Light crude oil futures fell $2.86 to $41.32 a barrel on the new york mercantile exchange (nymex) have now lost $4 in five days . Still 30% more expensive than at the beginning of 2004 boo... Light crude oil futures fell $2.86 to $41.32 a barrel on the new york mercantile exchange (nymex) and have now lost $4 in five days . light crude oil futures fell $2.86 to $41.32 a barrel on the ne...\n",
            "dutch watch van gogh s last film the last film to be made by the slain dutch director theo van gogh  called 06/05  has been premiered in the hague.  members of van gogh s family and celebrities att... SUMMARY: Theo van gogh was shot and stabbed to death in amsterdam six weeks ago . Members of his family and celebrities attended the screening of the film 06/05 . The film is based on the murder of... members of van gogh s family and celebrities attended the screening of 06/05 based on the murder of the anti-immigration politician pim fortuyn . the film mixes real images of the day of fortuyn s ...\n",
            "hewitt falls to dent in adelaide lleyton hewitt suffered a shock defeat to taylor dent in the quarter-finals of the australian hardcourt championships in adelaide on friday.  the top seed was a str... SUMMARY: lleyton hewitt suffered a shock defeat to taylor dent in the quarter-finals of the australian hardcourt championships in adelaide on friday . The top seed was a strong favourite for the ti... lleyton hewitt suffered a shock defeat to taylor dent in the quarter-finals of the australian hardcourt championships in adelaide on friday . the top seed was a strong favourite for the title but w...\n"
          ]
        }
      ],
      "source": [
        "# --- Cell 10: Quick preview ---\n",
        "display_cols = [\"input_text\", \"target_text\", \"student_pred\"]\n",
        "print(\"Sample outputs:\")\n",
        "print(test_df[display_cols].head(5).to_string(index=False, max_colwidth=200))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "nCEDTh2-RcOe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 161
        },
        "outputId": "3ca8db8a-abaf-4cfb-907f-21cb3404a6f8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Parsing complete. Example row:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                          input_text  \\\n",
              "0  ray dvd beats box office takings oscar-nominat...   \n",
              "1  chinese wine tempts italy s illva italy s illv...   \n",
              "2  mild winter drives us oil down 6% us oil price...   \n",
              "\n",
              "                                         ref_summary  \\\n",
              "0  ray dvd beats box office takings with a combin...   \n",
              "1  Italian liqueur maker illva saronno has agreed...   \n",
              "2  Light crude oil futures fell $2.86 to $41.32 a...   \n",
              "\n",
              "                                        pred_summary  \\\n",
              "0  ray has surpassed its us box office takings wi...   \n",
              "1  chinese wine tempts italy s illva italy s illv...   \n",
              "2  Light crude oil futures fell $2.86 to $41.32 a...   \n",
              "\n",
              "                                 ref_topics pred_topics  \n",
              "0            [ray, dvd, oscar, film, actor]          []  \n",
              "1     [changyu, chinese, china, yuan, wine]          []  \n",
              "2  [futures, nymex, oil, crude, refineries]          []  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4d835ad8-52aa-4654-8b9d-7b9f0ff20d02\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>input_text</th>\n",
              "      <th>ref_summary</th>\n",
              "      <th>pred_summary</th>\n",
              "      <th>ref_topics</th>\n",
              "      <th>pred_topics</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ray dvd beats box office takings oscar-nominat...</td>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td>ray has surpassed its us box office takings wi...</td>\n",
              "      <td>[ray, dvd, oscar, film, actor]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>chinese wine tempts italy s illva italy s illv...</td>\n",
              "      <td>Italian liqueur maker illva saronno has agreed...</td>\n",
              "      <td>chinese wine tempts italy s illva italy s illv...</td>\n",
              "      <td>[changyu, chinese, china, yuan, wine]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>mild winter drives us oil down 6% us oil price...</td>\n",
              "      <td>Light crude oil futures fell $2.86 to $41.32 a...</td>\n",
              "      <td>Light crude oil futures fell $2.86 to $41.32 a...</td>\n",
              "      <td>[futures, nymex, oil, crude, refineries]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4d835ad8-52aa-4654-8b9d-7b9f0ff20d02')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4d835ad8-52aa-4654-8b9d-7b9f0ff20d02 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4d835ad8-52aa-4654-8b9d-7b9f0ff20d02');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-dcef47c0-cdc1-4ea5-8960-bc765005e801\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dcef47c0-cdc1-4ea5-8960-bc765005e801')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-dcef47c0-cdc1-4ea5-8960-bc765005e801 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(test_df\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"input_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"ray dvd beats box office takings oscar-nominated film biopic ray has surpassed its us box office takings with a combined tally of $80m (\\u00a343m) from dvd and video sales and rentals.  ray s success on dvd outstripped its $74m (\\u00a340m) us box office total  earning more than $40m (\\u00a322m) on the first day of the dvd s release alone. ray has been nominated in six oscar categories including best film and best actor for jamie foxx. the film recounts the life of blues singer ray charles  who died in 2004. in its first week on home entertainment release the film was the number one selling dvd  with the limited edition version coming in at number 11. sony horror film the grudge  starring michelle gellar  was the us  second best-selling dvd  with jennifer lopez and richard gere s romantic comedy shall we dance  at number three. foxx s critically acclaimed performance as ray has already earned him a screen actors guild award for best actor  as well as a prestigious golden globe. ray director taylor hackford  responsible for the classic 1982 film an officer and a gentleman  has also received an oscar nomination in the best director category. the film s three other oscar nominations are for costume  film editing and sound mixing.\",\n          \"chinese wine tempts italy s illva italy s illva saronno has agreed to buy 33% of changyu  the largest wine maker in china.  changyu said in a statement to the shenzhen stock exchange that illva will pay 481.42m yuan ($58.16m; \\u00a330.7m)  once the government approves the deal. the italian liqueur maker will acquire the shares from the yantai state asset management bureau. chinese wine sales are growing  the us agriculture department said  with wine sales in 2003 up 25% at 61.1bn yuan.  china is encouraging state-owned companies to sell shares to foreign investors. anheuser-busch  heineken and scottish & newcastle have all invested in the chinese beer industry in the last two years and now illva saronno is betting on the chinese wine market. yantai state asset management bureau - a government agency in the north-eastern city of yantai - owns 55% of changyu. the state agency will also sell 10% of its stake in changyu to another overseas company  although it didn t say who. the remaining 12% will be retained by the yantai city government. the consumption of wine in china is still low  at just 0.22 litres per capita  said the us agriculture department. this compares with 59 litres in france  12 litres in the us and three litres in japan.\",\n          \"mild winter drives us oil down 6% us oil prices have fallen by 6%  driven down by forecasts of a mild winter in the densely populated northeast.  light crude oil futures fell $2.86 to $41.32 a barrel on the new york mercantile exchange (nymex)  and have now lost $4 in five days. nonetheless  us crude is still 30% more expensive than at the beginning of 2004  boosted by growing demand and bottlenecks at refineries. traders ignored the possible effects of asia s tidal waves on global supplies.  instead  the focus is now on us consumption  which is heavily influenced in the short term by the weather.  with the revised milder temperatures... i m more inclined to think we ll push lower and test the $40-40.25 range   said john brady of abn amro.  the market definitely feels to be on the defensive.  statistics released last week showed that stockpiles of oil products in the us had risen  an indication that severe supply disruptions may not arise this winter  barring any serious incident. oil prices have broken records in 2004  topping $50 a barrel at one point  driven up by a welter of worries about unrest in iraq and saudi arabia  rising demand and supply bottlenecks. london s international petroleum exchange remained closed for the christmas holiday.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ref_summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"ray dvd beats box office takings with a combined tally of $80m (\\u00a343m) from dvd and video sales and rentals . ray has been nominated in six oscar categories including best film and best actor for jamie foxx . The film recounts the life of blues singer ray charles who died in 2004 .\",\n          \"Italian liqueur maker illva saronno has agreed to buy 33% of changyu the largest wine maker in china . chinese wine sales are growing with wine sales in 2003 up 25% at 61.1bn yuan . anheuser-busch  heineken and scottish & newcastle have all invested in the chinese beer industry .\",\n          \"Light crude oil futures fell $2.86 to $41.32 a barrel on the new york mercantile exchange (nymex) have now lost $4 in five days . Still 30% more expensive than at the beginning of 2004 boosted by growing demand and bottlenecks at refineries .\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"ray has surpassed its us box office takings with a combined tally of $80m (\\u00a343m) from dvd and video sales and rentals . success on dvd outstripped its $74m (\\u00a340m) us box office total earning more than $40m (\\u00a322m) on the first day of the dvd s release alone . ray has been nominated in six oscar categories including best film and best actor for jamie foxx .\",\n          \"chinese wine tempts italy s illva italy s illva saronno has agreed to buy 33% of changyu the largest wine maker in china . changyu said in a statement to the shenzhen stock exchange that illva will pay 481.42m yuan ($58.16m; \\u00a330.7m) once the government approves the deal . the italian liqueur maker will acquire the shares from the\",\n          \"Light crude oil futures fell $2.86 to $41.32 a barrel on the new york mercantile exchange (nymex) and have now lost $4 in five days . light crude oil futures fell $2.86 to $41.32 a barrel on the new york mercantile exchange (nymex) and have now lost $4 in five days . light crude oil futures fell $2.86 to $41.32 a barrel on the new york mercantile exchange (nymex)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ref_topics\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_topics\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "# --- Cell 11: Parse combined target/prediction into summary, interpretation, topics ---\n",
        "import re\n",
        "\n",
        "required_cols = [\"input_text\", \"target_text\", \"student_pred\"]\n",
        "for c in required_cols:\n",
        "    if c not in test_df.columns:\n",
        "        raise RuntimeError(f\"Required column '{c}' not found in test_df\")\n",
        "\n",
        "def parse_combined(text):\n",
        "    if not isinstance(text, str):\n",
        "        return \"\", \"\", []\n",
        "    t = text.strip()\n",
        "    up = t.upper()\n",
        "    idx_summary = up.find(\"SUMMARY:\")\n",
        "    idx_interp = up.find(\"INTERPRETATION:\")\n",
        "    idx_topics = up.find(\"TOPICS:\")\n",
        "    summary = \"\"\n",
        "    interpretation = \"\"\n",
        "    topics = []\n",
        "    if idx_summary != -1:\n",
        "        start = idx_summary + len(\"SUMMARY:\")\n",
        "        end = len(t)\n",
        "        if idx_interp != -1:\n",
        "            end = idx_interp\n",
        "        elif idx_topics != -1:\n",
        "            end = idx_topics\n",
        "        summary = t[start:end].strip()\n",
        "    if idx_interp != -1:\n",
        "        start = idx_interp + len(\"INTERPRETATION:\")\n",
        "        end = len(t)\n",
        "        if idx_topics != -1:\n",
        "            end = idx_topics\n",
        "        interpretation = t[start:end].strip()\n",
        "    if idx_topics != -1:\n",
        "        start = idx_topics + len(\"TOPICS:\")\n",
        "        topics_str = t[start:].strip()\n",
        "        topics = re.split(r\"[;\\n,]\\s*\", topics_str)\n",
        "        topics = [x.strip().lower() for x in topics if x.strip()]\n",
        "    # fallback\n",
        "    if idx_summary == -1 and idx_interp == -1 and idx_topics == -1:\n",
        "        parts = [p.strip() for p in re.split(r\"\\n\\s*\\n\", t) if p.strip()]\n",
        "        if len(parts) >= 1: summary = parts[0]\n",
        "        if len(parts) >= 2: interpretation = parts[1]\n",
        "        if len(parts) >= 3: topics = [x.strip().lower() for x in re.split(r\"[;\\n,]\\s*\", parts[2]) if x.strip()]\n",
        "    return summary, interpretation, topics\n",
        "\n",
        "parsed_refs = [parse_combined(x) for x in test_df[\"target_text\"].astype(str).tolist()]\n",
        "parsed_preds = [parse_combined(x) for x in test_df[\"student_pred\"].astype(str).tolist()]\n",
        "\n",
        "test_df[\"ref_summary\"] = [p[0] for p in parsed_refs]\n",
        "test_df[\"ref_interpretation\"] = [p[1] for p in parsed_refs]\n",
        "test_df[\"ref_topics\"] = [p[2] for p in parsed_refs]\n",
        "\n",
        "test_df[\"pred_summary\"] = [p[0] for p in parsed_preds]\n",
        "test_df[\"pred_interpretation\"] = [p[1] for p in parsed_preds]\n",
        "test_df[\"pred_topics\"] = [p[2] for p in parsed_preds]\n",
        "\n",
        "print(\"Parsing complete. Example row:\")\n",
        "display(test_df.loc[:, [\"input_text\",\"ref_summary\",\"pred_summary\",\"ref_topics\",\"pred_topics\"]].head(3))\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "df_news = pd.read_csv(\"/content/News.csv\")\n",
        "print(df_news.columns.tolist())\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mhiV7VHfGQ1T",
        "outputId": "0a046479-de0e-4598-a9e9-27076a5c0129"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['News', 'Fake']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "txTxTE_-RgfP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f0f0165a-f9ff-4391-e97c-44823a4ba7a7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📊 ROUGE Summary: {'rouge1': 0.5620018399782802, 'rouge2': 0.4569405761407687, 'rougeL': 0.5037149484097216}\n",
            "📊 ROUGE Interpretation: {'rouge1': 0.0, 'rouge2': 0.0, 'rougeL': 0.0}\n"
          ]
        }
      ],
      "source": [
        "# --- Cell 12: ROUGE for summaries & interpretations ---\n",
        "from rouge_score import rouge_scorer\n",
        "import numpy as np\n",
        "\n",
        "df_eval = test_df  # evaluate on test split\n",
        "\n",
        "ref_summary_col = \"ref_summary\"\n",
        "pred_summary_col = \"pred_summary\"\n",
        "ref_interpretation_col = \"ref_interpretation\"\n",
        "pred_interpretation_col = \"pred_interpretation\"\n",
        "\n",
        "for col in [ref_summary_col, pred_summary_col, ref_interpretation_col, pred_interpretation_col]:\n",
        "    if col not in df_eval.columns:\n",
        "        df_eval[col] = \"\"\n",
        "\n",
        "def compute_rouge_avg(refs, preds):\n",
        "    scorer = rouge_scorer.RougeScorer([\"rouge1\", \"rouge2\", \"rougeL\"], use_stemmer=True)\n",
        "    scores = {m: [] for m in [\"rouge1\", \"rouge2\", \"rougeL\"]}\n",
        "    for ref, pred in zip(refs, preds):\n",
        "        if not ref or not pred:\n",
        "            continue\n",
        "        s = scorer.score(str(ref), str(pred))\n",
        "        for m in scores:\n",
        "            scores[m].append(s[m].fmeasure)\n",
        "    return {m: float(np.mean(v)) if v else 0.0 for m, v in scores.items()}\n",
        "\n",
        "rouge_summary_stats = compute_rouge_avg(\n",
        "    df_eval[ref_summary_col].tolist(),\n",
        "    df_eval[pred_summary_col].tolist()\n",
        ")\n",
        "\n",
        "rouge_interpretation_stats = compute_rouge_avg(\n",
        "    df_eval[ref_interpretation_col].tolist(),\n",
        "    df_eval[pred_interpretation_col].tolist()\n",
        ")\n",
        "\n",
        "print(\"📊 ROUGE Summary:\", rouge_summary_stats)\n",
        "print(\"📊 ROUGE Interpretation:\", rouge_interpretation_stats)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "mEtUkDfbRjoW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "15294555-3f73-4e60-d38a-2222495bc718"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Topic metrics: {'macro': {'precision': 0.0, 'recall': 0.0, 'f1': 0.0}, 'micro': {'precision': 0.0, 'recall': 0.0, 'f1': 0.0}}\n"
          ]
        }
      ],
      "source": [
        "# --- Cell 13: Topic metrics (macro/micro precision, recall, F1) ---\n",
        "import numpy as np\n",
        "\n",
        "def topics_metrics(refs_list, preds_list):\n",
        "    per_prec, per_rec, per_f1 = [], [], []\n",
        "    total_tp = total_pred = total_ref = 0\n",
        "    for refs, preds in zip(refs_list, preds_list):\n",
        "        refs_set = set([r.strip().lower() for r in refs]) if refs else set()\n",
        "        preds_set = set([p.strip().lower() for p in preds]) if preds else set()\n",
        "        if len(preds_set)==0 and len(refs_set)==0:\n",
        "            per_prec.append(1.0); per_rec.append(1.0); per_f1.append(1.0)\n",
        "            continue\n",
        "        if len(preds_set)==0:\n",
        "            per_prec.append(0.0); per_rec.append(0.0); per_f1.append(0.0)\n",
        "            continue\n",
        "        tp = len(preds_set & refs_set)\n",
        "        prec = tp / len(preds_set) if len(preds_set)>0 else 0.0\n",
        "        rec = tp / len(refs_set) if len(refs_set)>0 else 0.0\n",
        "        f1 = 2*prec*rec/(prec+rec) if (prec+rec)>0 else 0.0\n",
        "        per_prec.append(prec); per_rec.append(rec); per_f1.append(f1)\n",
        "        total_tp += tp; total_pred += len(preds_set); total_ref += len(refs_set)\n",
        "    macro = {\"precision\": float(np.mean(per_prec)), \"recall\": float(np.mean(per_rec)), \"f1\": float(np.mean(per_f1))}\n",
        "    micro_prec = total_tp / total_pred if total_pred>0 else 0.0\n",
        "    micro_rec = total_tp / total_ref if total_ref>0 else 0.0\n",
        "    micro_f1 = 2*micro_prec*micro_rec/(micro_prec+micro_rec) if (micro_prec+micro_rec)>0 else 0.0\n",
        "    micro = {\"precision\": float(micro_prec), \"recall\": float(micro_rec), \"f1\": float(micro_f1)}\n",
        "    return {\"macro\": macro, \"micro\": micro}\n",
        "\n",
        "topic_stats = topics_metrics(test_df[\"ref_topics\"].tolist(), test_df[\"pred_topics\"].tolist())\n",
        "print(\"Topic metrics:\", topic_stats)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "ZinYU4h1RmEG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8e268404-d61d-4fc3-c0e3-1b6977e6a612"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Inference time (s): 232.67, estimated energy (Wh): 2.5850\n"
          ]
        }
      ],
      "source": [
        "# --- Cell 14: Measure inference time & approximate energy usage (optional) ---\n",
        "import time, subprocess, threading\n",
        "import torch\n",
        "from transformers import pipeline as hf_pipeline\n",
        "\n",
        "# Reuse or load student_pipe\n",
        "try:\n",
        "    student_pipe\n",
        "except NameError:\n",
        "    _device = 0 if torch.cuda.is_available() else -1\n",
        "    student_pipe = hf_pipeline(\"text2text-generation\", model=\"./student_model_final\", tokenizer=tokenizer_student, device=_device)\n",
        "\n",
        "def batch_predict(inputs, bs=8):\n",
        "    outs = []\n",
        "    for i in range(0, len(inputs), bs):\n",
        "        batch = inputs[i:i+bs]\n",
        "        res = student_pipe(batch, max_length=MAX_TARGET_LENGTH, do_sample=False)\n",
        "        outs.extend([r[\"generated_text\"] for r in res])\n",
        "    return outs\n",
        "\n",
        "def nvidia_available():\n",
        "    try:\n",
        "        subprocess.check_output([\"nvidia-smi\",\"-h\"])\n",
        "        return True\n",
        "    except Exception:\n",
        "        return False\n",
        "\n",
        "inputs = test_df[\"input_text\"].tolist()\n",
        "start = time.time()\n",
        "\n",
        "if nvidia_available():\n",
        "    power_samples = []\n",
        "    stop_flag = False\n",
        "    def sampler():\n",
        "        while not stop_flag:\n",
        "            try:\n",
        "                out = subprocess.check_output([\"nvidia-smi\",\"--query-gpu=power.draw\",\"--format=csv,noheader,nounits\"])\n",
        "                power_samples.append(float(out.decode().splitlines()[0].strip()))\n",
        "            except Exception:\n",
        "                power_samples.append(0.0)\n",
        "            time.sleep(0.5)\n",
        "    thread = threading.Thread(target=sampler, daemon=True)\n",
        "    thread.start()\n",
        "    preds = batch_predict(inputs, bs=8)\n",
        "    stop_flag = True\n",
        "    thread.join(timeout=1.0)\n",
        "    end = time.time()\n",
        "    total_time = end - start\n",
        "    energy_joules = 0.0\n",
        "    if len(power_samples) >= 2:\n",
        "        for k in range(len(power_samples)-1):\n",
        "            avg_p = (power_samples[k] + power_samples[k+1]) / 2.0\n",
        "            dt = 0.5\n",
        "            energy_joules += avg_p * dt\n",
        "    energy_wh = energy_joules / 3600.0\n",
        "else:\n",
        "    preds = batch_predict(inputs, bs=8)\n",
        "    end = time.time()\n",
        "    total_time = end - start\n",
        "    energy_wh = (total_time * 65.0) / 3600.0  # rough CPU estimate\n",
        "\n",
        "test_df[\"student_pred_runtime\"] = preds\n",
        "inference_time_s = total_time\n",
        "\n",
        "print(f\"Inference time (s): {inference_time_s:.2f}, estimated energy (Wh): {energy_wh:.4f}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "Q7m2cIwrRnlY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a057b058-0239-4f4f-93b4-9a3b09a40fc8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved predictions to student_eval_predictions_full.csv\n",
            "Saved metrics to student_eval_metrics.json\n",
            "Metrics summary:\n",
            "{'estimated_energy_Wh': 2.585000694444444,\n",
            " 'exact_match_reference': 0.0,\n",
            " 'exact_match_runtime': 0.0,\n",
            " 'inference_time_s': 232.67128109931946,\n",
            " 'rouge_interpretation_reference': {'rouge1': 0.0,\n",
            "                                    'rouge2': 0.0,\n",
            "                                    'rougeL': 0.0},\n",
            " 'rouge_interpretation_runtime': {'rouge1': 0.0, 'rouge2': 0.0, 'rougeL': 0.0},\n",
            " 'rouge_summary_reference': {'rouge1': 0.5620018399782802,\n",
            "                             'rouge2': 0.4569405761407687,\n",
            "                             'rougeL': 0.5037149484097216},\n",
            " 'rouge_summary_runtime': {'rouge1': 0.5620018399782802,\n",
            "                           'rouge2': 0.4569405761407687,\n",
            "                           'rougeL': 0.5037149484097216},\n",
            " 'topic_metrics_reference': {'macro': {'f1': 0.0,\n",
            "                                       'precision': 0.0,\n",
            "                                       'recall': 0.0},\n",
            "                             'micro': {'f1': 0.0,\n",
            "                                       'precision': 0.0,\n",
            "                                       'recall': 0.0}},\n",
            " 'topic_metrics_runtime': {'macro': {'f1': 0.0,\n",
            "                                     'precision': 0.0,\n",
            "                                     'recall': 0.0},\n",
            "                           'micro': {'f1': 0.0,\n",
            "                                     'precision': 0.0,\n",
            "                                     'recall': 0.0}}}\n"
          ]
        }
      ],
      "source": [
        "# --- Cell 15: Evaluate runtime preds and save results ---\n",
        "# Reuse the same ROUGE aggregator\n",
        "def aggregate_rouge(refs, preds):\n",
        "    return compute_rouge_avg(refs, preds)\n",
        "\n",
        "# Reference (first-pass) exact match\n",
        "exact_match_accuracy = (\n",
        "    test_df[\"target_text\"].astype(str).str.strip() ==\n",
        "    test_df[\"student_pred\"].astype(str).str.strip()\n",
        ").mean()\n",
        "\n",
        "if \"student_pred_runtime\" in test_df.columns:\n",
        "    parsed_runtime = [parse_combined(x) for x in test_df[\"student_pred_runtime\"].astype(str).tolist()]\n",
        "    test_df[\"runtime_pred_summary\"] = [p[0] for p in parsed_runtime]\n",
        "    test_df[\"runtime_pred_interpretation\"] = [p[1] for p in parsed_runtime]\n",
        "    test_df[\"runtime_pred_topics\"] = [p[2] for p in parsed_runtime]\n",
        "\n",
        "    rouge_runtime_summary = aggregate_rouge(test_df[\"ref_summary\"].tolist(), test_df[\"runtime_pred_summary\"].tolist())\n",
        "    rouge_runtime_interp = aggregate_rouge(test_df[\"ref_interpretation\"].tolist(), test_df[\"runtime_pred_interpretation\"].tolist())\n",
        "    topic_metrics_runtime = topics_metrics(test_df[\"ref_topics\"].tolist(), test_df[\"runtime_pred_topics\"].tolist())\n",
        "    exact_match_runtime = (\n",
        "        test_df[\"target_text\"].astype(str).str.strip() ==\n",
        "        test_df[\"student_pred_runtime\"].astype(str).str.strip()\n",
        "    ).mean()\n",
        "else:\n",
        "    rouge_runtime_summary = rouge_runtime_interp = topic_metrics_runtime = None\n",
        "    exact_match_runtime = None\n",
        "\n",
        "metrics = {\n",
        "    \"rouge_summary_reference\": rouge_summary_stats,\n",
        "    \"rouge_interpretation_reference\": rouge_interpretation_stats,\n",
        "    \"topic_metrics_reference\": topic_stats,\n",
        "    \"exact_match_reference\": float(exact_match_accuracy),\n",
        "\n",
        "    \"rouge_summary_runtime\": rouge_runtime_summary,\n",
        "    \"rouge_interpretation_runtime\": rouge_runtime_interp,\n",
        "    \"topic_metrics_runtime\": topic_metrics_runtime,\n",
        "    \"exact_match_runtime\": float(exact_match_runtime) if exact_match_runtime is not None else None,\n",
        "\n",
        "    \"inference_time_s\": float(inference_time_s) if 'inference_time_s' in locals() else None,\n",
        "    \"estimated_energy_Wh\": float(energy_wh) if 'energy_wh' in locals() else None\n",
        "}\n",
        "\n",
        "OUT_PRED_CSV = \"student_eval_predictions_full.csv\"\n",
        "OUT_METRICS_JSON = \"student_eval_metrics.json\"\n",
        "test_df.to_csv(OUT_PRED_CSV, index=False)\n",
        "\n",
        "import json, pprint\n",
        "with open(OUT_METRICS_JSON, \"w\") as f:\n",
        "    json.dump(metrics, f, indent=2)\n",
        "\n",
        "print(\"Saved predictions to\", OUT_PRED_CSV)\n",
        "print(\"Saved metrics to\", OUT_METRICS_JSON)\n",
        "print(\"Metrics summary:\")\n",
        "pprint.pprint(metrics)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "yd6bdwuATfhv"
      },
      "outputs": [],
      "source": [
        "# --- Cell 16 (UPDATED): Helper to load & evaluate a new dataset (default: News.csv) ---\n",
        "from google.colab import files\n",
        "import os, pandas as pd, sys\n",
        "import torch\n",
        "from transformers import pipeline as hf_pipeline\n",
        "\n",
        "def evaluate_new_file(file_path=\"News.csv\", upload_dialog=False, out_name=\"News_predictions.csv\", max_words=320):\n",
        "    \"\"\"\n",
        "    Load CSV, filter (<= max_words), run student predictions, parse results, save CSV.\n",
        "    - Assumes the first column is news text; if headers are present, it tries to find 'text'.\n",
        "    - If there are exactly 2 columns and no headers, they are set to ['text','fake'].\n",
        "    \"\"\"\n",
        "\n",
        "    # optional picker\n",
        "    if upload_dialog:\n",
        "        uploaded = files.upload()\n",
        "        file_path = next(iter(uploaded.keys()))\n",
        "        print(f\"Uploaded file: {file_path}\")\n",
        "\n",
        "    # resolve path\n",
        "    possible = [file_path]\n",
        "    if not os.path.isabs(file_path):\n",
        "        possible += [os.path.join(\"/content\", file_path), os.path.join(\"/mnt/data\", file_path)]\n",
        "    found = next((p for p in possible if os.path.exists(p)), None)\n",
        "    if found is None:\n",
        "        raise FileNotFoundError(f\"File not found. Tried: {possible}\")\n",
        "    print(f\"Loading dataset from: {found}\")\n",
        "\n",
        "    # try with header\n",
        "    try:\n",
        "        new_df = pd.read_csv(found)\n",
        "    except Exception:\n",
        "        # headerless fallback\n",
        "        new_df = pd.read_csv(found, header=None)\n",
        "\n",
        "    # normalize columns\n",
        "    if \"text\" not in [c.lower() for c in new_df.columns]:\n",
        "        # headerless or unexpected headers\n",
        "        if isinstance(new_df.columns[0], int):\n",
        "            # header=None case\n",
        "            if new_df.shape[1] >= 1:\n",
        "                cols = [\"text\"] + [f\"col_{i}\" for i in range(1, new_df.shape[1])]\n",
        "                new_df.columns = cols[:new_df.shape[1]]\n",
        "            if new_df.shape[1] == 2:\n",
        "                new_df.columns = [\"text\", \"fake\"]\n",
        "        else:\n",
        "            # search common names\n",
        "            for cand in [\"article\",\"content\",\"body\"]:\n",
        "                if cand in new_df.columns:\n",
        "                    new_df = new_df.rename(columns={cand: \"text\"})\n",
        "                    break\n",
        "            if \"text\" not in new_df.columns:\n",
        "                # as a last resort, take first column as text\n",
        "                first = new_df.columns[0]\n",
        "                new_df = new_df.rename(columns={first: \"text\"})\n",
        "\n",
        "    # filter by word count <= 320 (or provided max_words)\n",
        "    new_df[\"text\"] = new_df[\"text\"].astype(str)\n",
        "    new_df[\"word_count\"] = new_df[\"text\"].str.split().str.len()\n",
        "    before = len(new_df)\n",
        "    new_df = new_df[new_df[\"word_count\"] < max_words].copy().reset_index(drop=True)\n",
        "    after = len(new_df)\n",
        "    new_df.drop(columns=[\"word_count\"], inplace=True)\n",
        "    print(f\"Filtered dataset: kept {after}/{before} rows with < {max_words} words\")\n",
        "\n",
        "    # ensure prediction pipeline\n",
        "    _device = 0 if torch.cuda.is_available() else -1\n",
        "    try:\n",
        "        student_pipe\n",
        "    except NameError:\n",
        "        print(\"Loading student pipeline from ./student_model_final ...\")\n",
        "        student_pipe = hf_pipeline(\"text2text-generation\", model=\"./student_model_final\",\n",
        "                                   tokenizer=tokenizer_student, device=_device)\n",
        "\n",
        "    def _batch_predict(inputs, bs=8):\n",
        "        outs = []\n",
        "        for i in range(0, len(inputs), bs):\n",
        "            batch = inputs[i:i+bs]\n",
        "            res = student_pipe(batch, max_length=MAX_TARGET_LENGTH, do_sample=False)\n",
        "            outs.extend([r[\"generated_text\"] for r in res])\n",
        "        return outs\n",
        "\n",
        "    if \"parse_combined\" not in globals():\n",
        "        raise RuntimeError(\"parse_combined(text) is required in the notebook.\")\n",
        "\n",
        "    texts = new_df[\"text\"].tolist()\n",
        "    print(f\"Running predictions on {len(texts)} items...\")\n",
        "    preds = _batch_predict(texts)\n",
        "    new_df[\"student_pred\"] = preds\n",
        "\n",
        "    parsed_preds = [parse_combined(x) for x in new_df[\"student_pred\"].astype(str).tolist()]\n",
        "    new_df[\"pred_summary\"] = [p[0] for p in parsed_preds]\n",
        "    new_df[\"pred_interpretation\"] = [p[1] for p in parsed_preds]\n",
        "    new_df[\"pred_topics\"] = [p[2] for p in parsed_preds]\n",
        "\n",
        "    out_path = out_name\n",
        "    new_df.to_csv(out_path, index=False)\n",
        "    print(f\"Saved predictions to: {out_path}\")\n",
        "\n",
        "    return new_df\n",
        "\n",
        "# Usage examples:\n",
        "# new_results = evaluate_new_file(file_path=\"/content/News.csv\", max_words=320)\n",
        "# new_results = evaluate_new_file(upload_dialog=True, max_words=320)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pprint\n",
        "print(\"Loaded metrics keys:\")\n",
        "pprint.pprint(list(metrics.keys()))\n",
        "pprint.pprint(metrics)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "__AQgCjwG3y9",
        "outputId": "6414d9e5-0f67-4d2c-e2e3-7373c00eb595"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loaded metrics keys:\n",
            "['rouge_summary_reference',\n",
            " 'rouge_interpretation_reference',\n",
            " 'topic_metrics_reference',\n",
            " 'exact_match_reference',\n",
            " 'rouge_summary_runtime',\n",
            " 'rouge_interpretation_runtime',\n",
            " 'topic_metrics_runtime',\n",
            " 'exact_match_runtime',\n",
            " 'inference_time_s',\n",
            " 'estimated_energy_Wh']\n",
            "{'estimated_energy_Wh': 2.585000694444444,\n",
            " 'exact_match_reference': 0.0,\n",
            " 'exact_match_runtime': 0.0,\n",
            " 'inference_time_s': 232.67128109931946,\n",
            " 'rouge_interpretation_reference': {'rouge1': 0.0,\n",
            "                                    'rouge2': 0.0,\n",
            "                                    'rougeL': 0.0},\n",
            " 'rouge_interpretation_runtime': {'rouge1': 0.0, 'rouge2': 0.0, 'rougeL': 0.0},\n",
            " 'rouge_summary_reference': {'rouge1': 0.5620018399782802,\n",
            "                             'rouge2': 0.4569405761407687,\n",
            "                             'rougeL': 0.5037149484097216},\n",
            " 'rouge_summary_runtime': {'rouge1': 0.5620018399782802,\n",
            "                           'rouge2': 0.4569405761407687,\n",
            "                           'rougeL': 0.5037149484097216},\n",
            " 'topic_metrics_reference': {'macro': {'f1': 0.0,\n",
            "                                       'precision': 0.0,\n",
            "                                       'recall': 0.0},\n",
            "                             'micro': {'f1': 0.0,\n",
            "                                       'precision': 0.0,\n",
            "                                       'recall': 0.0}},\n",
            " 'topic_metrics_runtime': {'macro': {'f1': 0.0,\n",
            "                                     'precision': 0.0,\n",
            "                                     'recall': 0.0},\n",
            "                           'micro': {'f1': 0.0,\n",
            "                                     'precision': 0.0,\n",
            "                                     'recall': 0.0}}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ---------- Diagnostic + create mismatches_review.csv ----------\n",
        "import os, glob, pandas as pd, re, ast\n",
        "from pathlib import Path\n",
        "\n",
        "# helper to display when caas_jupyter_tools is available\n",
        "def try_display_df(title, df):\n",
        "    try:\n",
        "        from caas_jupyter_tools import display_dataframe_to_user\n",
        "        display_dataframe_to_user(title, df)\n",
        "    except Exception:\n",
        "        # fallback to show first rows\n",
        "        from IPython.display import display\n",
        "        print(f\"--- {title} (first 20 rows) ---\")\n",
        "        display(df.head(20))\n",
        "\n",
        "# 1) Find candidate CSV prediction files\n",
        "search_paths = []\n",
        "# common locations\n",
        "search_paths += glob.glob(\"/content/*.csv\")\n",
        "search_paths += glob.glob(\"/mnt/data/*.csv\")\n",
        "search_paths += glob.glob(\"*.csv\")\n",
        "# also include any csvs in subfolders of /content\n",
        "for p in glob.glob(\"/content/**/*.csv\", recursive=True):\n",
        "    search_paths.append(p)\n",
        "\n",
        "# Deduplicate and keep only existing files\n",
        "search_paths = list(dict.fromkeys([p for p in search_paths if os.path.exists(p)]))\n",
        "\n",
        "print(\"Found CSV files (scanning common locations):\")\n",
        "for p in search_paths:\n",
        "    print(\" -\", p)\n",
        "if not search_paths:\n",
        "    print(\"\\nNo CSV files found in /content, /mnt/data, or current directory.\")\n",
        "    print(\"Please run the prediction cell(s) (cells 8-9) to generate `student_predictions.csv` or `student_eval_predictions_full.csv` and then re-run this cell.\")\n",
        "else:\n",
        "    # prefer obvious filenames\n",
        "    preferred_names = [\n",
        "        \"student_eval_predictions_full.csv\",\n",
        "        \"student_predictions.csv\",\n",
        "        \"student_eval_predictions.csv\",\n",
        "        \"student_predictions_full.csv\",\n",
        "        \"student_predictions_final.csv\"\n",
        "    ]\n",
        "    chosen = None\n",
        "    for name in preferred_names:\n",
        "        for p in search_paths:\n",
        "            if os.path.basename(p).lower() == name.lower():\n",
        "                chosen = p\n",
        "                break\n",
        "        if chosen:\n",
        "            break\n",
        "    # if no preferred name found, pick the first CSV that contains 'target' or 'student' columns\n",
        "    if chosen is None:\n",
        "        for p in search_paths:\n",
        "            try:\n",
        "                tmp = pd.read_csv(p, nrows=2)\n",
        "                cols = [c.lower() for c in tmp.columns]\n",
        "                if (\"target_text\" in cols and \"student_pred\" in cols) or (\"student_pred\" in cols) or (\"pred\" in \"\".join(cols)):\n",
        "                    chosen = p\n",
        "                    break\n",
        "            except Exception:\n",
        "                continue\n",
        "    # fallback to first CSV\n",
        "    if chosen is None and search_paths:\n",
        "        chosen = search_paths[0]\n",
        "\n",
        "    print(\"\\nUsing prediction CSV:\", chosen)\n",
        "\n",
        "    # 2) Load CSV (robustly)\n",
        "    try:\n",
        "        df = pd.read_csv(chosen)\n",
        "    except Exception as e:\n",
        "        print(\"Failed to read CSV:\", e)\n",
        "        raise\n",
        "\n",
        "    # 3) Ensure expected columns exist; add empty columns if missing\n",
        "    expected_cols = [\"input_text\",\"target_text\",\"student_pred\",\"ref_summary\",\"pred_summary\",\n",
        "                     \"ref_interpretation\",\"pred_interpretation\",\"ref_topics\",\"pred_topics\"]\n",
        "    for col in expected_cols:\n",
        "        if col not in df.columns:\n",
        "            df[col] = \"\"\n",
        "\n",
        "    # 4) Compute exact_match preference: target_text vs student_pred if available; else summary equality\n",
        "    has_target_and_pred = (df[\"target_text\"].astype(bool).sum() > 0) and (df[\"student_pred\"].astype(bool).sum() > 0)\n",
        "    has_ref_and_pred_summary = (df[\"ref_summary\"].astype(bool).sum() > 0) and (df[\"pred_summary\"].astype(bool).sum() > 0)\n",
        "\n",
        "    if has_target_and_pred:\n",
        "        df[\"exact_match\"] = df[\"target_text\"].astype(str).str.strip() == df[\"student_pred\"].astype(str).str.strip()\n",
        "        match_basis = \"target_text vs student_pred\"\n",
        "    elif has_ref_and_pred_summary:\n",
        "        df[\"exact_match\"] = df[\"ref_summary\"].astype(str).str.strip() == df[\"pred_summary\"].astype(str).str.strip()\n",
        "        match_basis = \"ref_summary vs pred_summary\"\n",
        "    else:\n",
        "        # fallback: check whether target_text equals empty or not; create exact_match=False for all\n",
        "        df[\"exact_match\"] = False\n",
        "        match_basis = \"no suitable columns found; set exact_match=False for all rows\"\n",
        "\n",
        "    total = len(df)\n",
        "    with_pred = df[\"student_pred\"].astype(bool).sum()\n",
        "    exact_pct = df[\"exact_match\"].mean() * 100.0 if total>0 else 0.0\n",
        "\n",
        "    print(f\"\\nRows total: {total}\")\n",
        "    print(f\"Rows with non-empty student_pred: {int(with_pred)}\")\n",
        "    print(f\"Exact match % (based on {match_basis}): {exact_pct:.2f}%\")\n",
        "\n",
        "    # 5) Build mismatches DF and save\n",
        "    mismatches = df[~df[\"exact_match\"]].copy().reset_index(drop=True)\n",
        "    OUT = \"mismatches_review.csv\"\n",
        "    mismatches.to_csv(OUT, index=False)\n",
        "    print(f\"\\nSaved mismatches to: {OUT} ({len(mismatches)} rows). You can download it from the Files sidebar or with:\")\n",
        "    print(f\"from google.colab import files; files.download('{OUT}')\")\n",
        "\n",
        "    # 6) Display top mismatches for quick manual review\n",
        "    display_cols = [\"input_text\",\"ref_summary\",\"pred_summary\",\"ref_interpretation\",\"pred_interpretation\",\"ref_topics\",\"pred_topics\"]\n",
        "    # Keep only existing columns\n",
        "    display_cols = [c for c in display_cols if c in mismatches.columns]\n",
        "    if len(mismatches) == 0:\n",
        "        print(\"No mismatches found (exact match for all rows) — still review a few samples below.\")\n",
        "        try_display_df(\"All_predictions_sample\", df.head(20).loc[:, display_cols])\n",
        "    else:\n",
        "        try_display_df(\"Top_mismatches_preview\", mismatches.loc[:, display_cols].head(40))\n",
        "\n",
        "    # Print helpful sample statistics\n",
        "    print(\"\\nSample counts by exact_match:\")\n",
        "    print(df[\"exact_match\"].value_counts(dropna=False))\n",
        "    print(\"\\nTop 10 categories (if 'category' exists):\")\n",
        "    if \"category\" in df.columns:\n",
        "        print(df[\"category\"].value_counts().head(10))\n",
        "    else:\n",
        "        print(\"No 'category' column in predictions file.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "zMz6btyjH4jX",
        "outputId": "ce4090ac-71ee-4f5e-cdd5-989bf333e9c9"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found CSV files (scanning common locations):\n",
            " - /content/bbc-text.csv\n",
            " - /content/News.csv\n",
            " - /content/student_eval_predictions_full.csv\n",
            " - /content/student_predictions.csv\n",
            " - bbc-text.csv\n",
            " - News.csv\n",
            " - student_eval_predictions_full.csv\n",
            " - student_predictions.csv\n",
            " - /content/sample_data/california_housing_train.csv\n",
            " - /content/sample_data/california_housing_test.csv\n",
            " - /content/sample_data/mnist_train_small.csv\n",
            " - /content/sample_data/mnist_test.csv\n",
            "\n",
            "Using prediction CSV: /content/student_eval_predictions_full.csv\n",
            "\n",
            "Rows total: 112\n",
            "Rows with non-empty student_pred: 112\n",
            "Exact match % (based on target_text vs student_pred): 0.00%\n",
            "\n",
            "Saved mismatches to: mismatches_review.csv (112 rows). You can download it from the Files sidebar or with:\n",
            "from google.colab import files; files.download('mismatches_review.csv')\n",
            "--- Top_mismatches_preview (first 20 rows) ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                           input_text  \\\n",
              "0   ray dvd beats box office takings oscar-nominat...   \n",
              "1   chinese wine tempts italy s illva italy s illv...   \n",
              "2   mild winter drives us oil down 6% us oil price...   \n",
              "3   dutch watch van gogh s last film the last film...   \n",
              "4   hewitt falls to dent in adelaide lleyton hewit...   \n",
              "5   microsoft gets the blogging bug software giant...   \n",
              "6   broadband steams ahead in the us more and more...   \n",
              "7   rock group korn s guitarist quits the guitaris...   \n",
              "8   career honour for actor dicaprio actor leonard...   \n",
              "9   britannia members  £42m windfall more than 800...   \n",
              "10  edwards tips idowu for euro gold world outdoor...   \n",
              "11  ray dvd beats box office takings oscar-nominat...   \n",
              "12  beattie return calms attack fears everton stri...   \n",
              "13  stock market eyes japan recovery japanese shar...   \n",
              "14  candela completes bolton switch bolton boss sa...   \n",
              "15  byrds producer melcher dies at 62 record produ...   \n",
              "16  klinsmann issues lehmann warning germany coach...   \n",
              "17  musical treatment for capra film the classic f...   \n",
              "18  talks held on gibraltar s future two days of t...   \n",
              "19  &#163;1.8m indecency fine for viacom media gia...   \n",
              "\n",
              "                                          ref_summary  \\\n",
              "0   ray dvd beats box office takings with a combin...   \n",
              "1   Italian liqueur maker illva saronno has agreed...   \n",
              "2   Light crude oil futures fell $2.86 to $41.32 a...   \n",
              "3   Theo van gogh was shot and stabbed to death in...   \n",
              "4   lleyton hewitt suffered a shock defeat to tayl...   \n",
              "5   msn spaces is free to anyone with a hotmail or...   \n",
              "6   The number of people and businesses connected ...   \n",
              "7   rock group korn s guitarist quits the guitaris...   \n",
              "8   leonardo dicaprio honoured at the santa barbar...   \n",
              "9   britannia members will share £42m windfall wit...   \n",
              "10  jonathan edwards believes phillips idowu can t...   \n",
              "11  ray dvd beats box office takings with a combin...   \n",
              "12  James beattie is not believed to be as serious...   \n",
              "13  Nikkei index of leading shares gained 7.6% dur...   \n",
              "14  bolton boss sam allardyce has signed roma defe...   \n",
              "15  byrds producer  terry melcher dies at 62 after...   \n",
              "16  lehmann is understudy to oliver kahn in the ge...   \n",
              "17  musical treatment for capra film the classic f...   \n",
              "18  Two-day summit at foreign secretary s official...   \n",
              "19  viacom has paid out $3.5m (£1.8m) to end inves...   \n",
              "\n",
              "                                         pred_summary  \\\n",
              "0   ray has surpassed its us box office takings wi...   \n",
              "1   chinese wine tempts italy s illva italy s illv...   \n",
              "2   Light crude oil futures fell $2.86 to $41.32 a...   \n",
              "3   members of van gogh s family and celebrities a...   \n",
              "4   lleyton hewitt suffered a shock defeat to tayl...   \n",
              "5   microsoft gets the blogging bug software giant...   \n",
              "6                                                 NaN   \n",
              "7   brian head welch told a radio station in calif...   \n",
              "8   santa barbara international film festival cele...   \n",
              "9   britannia members £42m windfall more than 800 ...   \n",
              "10  idowu landed 17.30m at the british trials in s...   \n",
              "11  ray has surpassed its us box office takings wi...   \n",
              "12  he was on a night out with his girlfriend and ...   \n",
              "13  In 2005 it will rise toward 13 000 predicted m...   \n",
              "14  sam allardyce has signed roma defender vincent...   \n",
              "15  terry melcher dies at 62 record producer terry...   \n",
              "16  klinsmann issues jens lehmann warning germany ...   \n",
              "17  frank capra s 1946 movie starring james stewar...   \n",
              "18  jack straw s country residence will plan a new...   \n",
              "19  &#163;1.8m indecency fine for viacom media gia...   \n",
              "\n",
              "                                   ref_interpretation  pred_interpretation  \\\n",
              "0   ray dvd beats box office takings with a combin...                  NaN   \n",
              "1   Italian liqueur maker illva saronno agreed to ...                  NaN   \n",
              "2   Light crude oil futures fell $2.86 to $41.32 a...                  NaN   \n",
              "3   Theo van gogh was shot and stabbed to death in...                  NaN   \n",
              "4          hewitt suffers shock defeat to taylor dent                  NaN   \n",
              "5   msn spaces is free to anyone with a hotmail or...                  NaN   \n",
              "6   The number of people and businesses connected ...                  NaN   \n",
              "7               korn s guitarist quits music business                  NaN   \n",
              "8   leonardo dicaprio was presented with the award...                  NaN   \n",
              "9   britannia will share £42m windfall with 100,00...                  NaN   \n",
              "10  jonathan edwards believes idowu can prove his ...                  NaN   \n",
              "11  ray dvd beats box office takings with a combin...                  NaN   \n",
              "12  James beattie is not believed to be as serious...                  NaN   \n",
              "13  Nikkei index of leading shares gained 7.6% dur...                  NaN   \n",
              "14  sam allardyce signs roma defender vincent cand...                  NaN   \n",
              "15  byrds producer terry melcher died at 62 after ...                  NaN   \n",
              "16  klinsmann says it will be difficult for any of...                  NaN   \n",
              "17  jon thoday is working with steve brown who wro...                  NaN   \n",
              "18  most gibraltarians say they want to remain bri...                  NaN   \n",
              "19  viacom has paid out $3.5m (£1.8m) to end inves...                  NaN   \n",
              "\n",
              "                                           ref_topics pred_topics  \n",
              "0            ['ray', 'dvd', 'oscar', 'film', 'actor']          []  \n",
              "1     ['changyu', 'chinese', 'china', 'yuan', 'wine']          []  \n",
              "2   ['futures', 'nymex', 'oil', 'crude', 'refineri...          []  \n",
              "3   ['gogh', 'stabbed', 'amsterdam', 'murder', 'van']          []  \n",
              "4   ['hewitt', 'dent', 'lleyton', 'taylor', 'finals']          []  \n",
              "5   ['msn', 'hotmail', 'blogs', 'spaces', 'messeng...          []  \n",
              "6   ['broadband', 'telecoms', 'connections', 'numb...          []  \n",
              "7      ['korn', 'guitarist', 'quits', 'band', 'quit']          []  \n",
              "8   ['leonardo', 'dicaprio', 'actor', 'award', 'sc...          []  \n",
              "9   ['britannia', 'windfall', 'payouts', 'members'...          []  \n",
              "10  ['edwards', 'phillips', 'idowu', 'jonathan', '...          []  \n",
              "11           ['ray', 'dvd', 'oscar', 'film', 'actor']          []  \n",
              "12  ['beattie', 'injured', 'james', 'hurt', 'assau...          []  \n",
              "13  ['nikkei', 'markets', 'optimism', 'index', 'sh...          []  \n",
              "14  ['roma', 'bolton', 'candela', 'luigi', 'defend...          []  \n",
              "15    ['manson', 'byrds', 'dies', 'terry', 'murders']          []  \n",
              "16  ['lehmann', 'kahn', 'klinsmann', 'keeper', 'ge...          []  \n",
              "17  ['musical', 'capra', 'theatre', 'spend', 'spen...          []  \n",
              "18  ['gibraltarians', 'kent', 'summit', 'british',...          []  \n",
              "19      ['viacom', 'fcc', 'paid', '5m', 'settlement']          []  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5f5bd781-940d-431e-ab03-fcffddc4adfb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>input_text</th>\n",
              "      <th>ref_summary</th>\n",
              "      <th>pred_summary</th>\n",
              "      <th>ref_interpretation</th>\n",
              "      <th>pred_interpretation</th>\n",
              "      <th>ref_topics</th>\n",
              "      <th>pred_topics</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ray dvd beats box office takings oscar-nominat...</td>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td>ray has surpassed its us box office takings wi...</td>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['ray', 'dvd', 'oscar', 'film', 'actor']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>chinese wine tempts italy s illva italy s illv...</td>\n",
              "      <td>Italian liqueur maker illva saronno has agreed...</td>\n",
              "      <td>chinese wine tempts italy s illva italy s illv...</td>\n",
              "      <td>Italian liqueur maker illva saronno agreed to ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['changyu', 'chinese', 'china', 'yuan', 'wine']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>mild winter drives us oil down 6% us oil price...</td>\n",
              "      <td>Light crude oil futures fell $2.86 to $41.32 a...</td>\n",
              "      <td>Light crude oil futures fell $2.86 to $41.32 a...</td>\n",
              "      <td>Light crude oil futures fell $2.86 to $41.32 a...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['futures', 'nymex', 'oil', 'crude', 'refineri...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>dutch watch van gogh s last film the last film...</td>\n",
              "      <td>Theo van gogh was shot and stabbed to death in...</td>\n",
              "      <td>members of van gogh s family and celebrities a...</td>\n",
              "      <td>Theo van gogh was shot and stabbed to death in...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['gogh', 'stabbed', 'amsterdam', 'murder', 'van']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>hewitt falls to dent in adelaide lleyton hewit...</td>\n",
              "      <td>lleyton hewitt suffered a shock defeat to tayl...</td>\n",
              "      <td>lleyton hewitt suffered a shock defeat to tayl...</td>\n",
              "      <td>hewitt suffers shock defeat to taylor dent</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['hewitt', 'dent', 'lleyton', 'taylor', 'finals']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>microsoft gets the blogging bug software giant...</td>\n",
              "      <td>msn spaces is free to anyone with a hotmail or...</td>\n",
              "      <td>microsoft gets the blogging bug software giant...</td>\n",
              "      <td>msn spaces is free to anyone with a hotmail or...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['msn', 'hotmail', 'blogs', 'spaces', 'messeng...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>broadband steams ahead in the us more and more...</td>\n",
              "      <td>The number of people and businesses connected ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>The number of people and businesses connected ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['broadband', 'telecoms', 'connections', 'numb...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>rock group korn s guitarist quits the guitaris...</td>\n",
              "      <td>rock group korn s guitarist quits the guitaris...</td>\n",
              "      <td>brian head welch told a radio station in calif...</td>\n",
              "      <td>korn s guitarist quits music business</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['korn', 'guitarist', 'quits', 'band', 'quit']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>career honour for actor dicaprio actor leonard...</td>\n",
              "      <td>leonardo dicaprio honoured at the santa barbar...</td>\n",
              "      <td>santa barbara international film festival cele...</td>\n",
              "      <td>leonardo dicaprio was presented with the award...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['leonardo', 'dicaprio', 'actor', 'award', 'sc...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>britannia members  £42m windfall more than 800...</td>\n",
              "      <td>britannia members will share £42m windfall wit...</td>\n",
              "      <td>britannia members £42m windfall more than 800 ...</td>\n",
              "      <td>britannia will share £42m windfall with 100,00...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['britannia', 'windfall', 'payouts', 'members'...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>edwards tips idowu for euro gold world outdoor...</td>\n",
              "      <td>jonathan edwards believes phillips idowu can t...</td>\n",
              "      <td>idowu landed 17.30m at the british trials in s...</td>\n",
              "      <td>jonathan edwards believes idowu can prove his ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['edwards', 'phillips', 'idowu', 'jonathan', '...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>ray dvd beats box office takings oscar-nominat...</td>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td>ray has surpassed its us box office takings wi...</td>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['ray', 'dvd', 'oscar', 'film', 'actor']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>beattie return calms attack fears everton stri...</td>\n",
              "      <td>James beattie is not believed to be as serious...</td>\n",
              "      <td>he was on a night out with his girlfriend and ...</td>\n",
              "      <td>James beattie is not believed to be as serious...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['beattie', 'injured', 'james', 'hurt', 'assau...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>stock market eyes japan recovery japanese shar...</td>\n",
              "      <td>Nikkei index of leading shares gained 7.6% dur...</td>\n",
              "      <td>In 2005 it will rise toward 13 000 predicted m...</td>\n",
              "      <td>Nikkei index of leading shares gained 7.6% dur...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['nikkei', 'markets', 'optimism', 'index', 'sh...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>candela completes bolton switch bolton boss sa...</td>\n",
              "      <td>bolton boss sam allardyce has signed roma defe...</td>\n",
              "      <td>sam allardyce has signed roma defender vincent...</td>\n",
              "      <td>sam allardyce signs roma defender vincent cand...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['roma', 'bolton', 'candela', 'luigi', 'defend...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>byrds producer melcher dies at 62 record produ...</td>\n",
              "      <td>byrds producer  terry melcher dies at 62 after...</td>\n",
              "      <td>terry melcher dies at 62 record producer terry...</td>\n",
              "      <td>byrds producer terry melcher died at 62 after ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['manson', 'byrds', 'dies', 'terry', 'murders']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>klinsmann issues lehmann warning germany coach...</td>\n",
              "      <td>lehmann is understudy to oliver kahn in the ge...</td>\n",
              "      <td>klinsmann issues jens lehmann warning germany ...</td>\n",
              "      <td>klinsmann says it will be difficult for any of...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['lehmann', 'kahn', 'klinsmann', 'keeper', 'ge...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>musical treatment for capra film the classic f...</td>\n",
              "      <td>musical treatment for capra film the classic f...</td>\n",
              "      <td>frank capra s 1946 movie starring james stewar...</td>\n",
              "      <td>jon thoday is working with steve brown who wro...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['musical', 'capra', 'theatre', 'spend', 'spen...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>talks held on gibraltar s future two days of t...</td>\n",
              "      <td>Two-day summit at foreign secretary s official...</td>\n",
              "      <td>jack straw s country residence will plan a new...</td>\n",
              "      <td>most gibraltarians say they want to remain bri...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['gibraltarians', 'kent', 'summit', 'british',...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>&amp;#163;1.8m indecency fine for viacom media gia...</td>\n",
              "      <td>viacom has paid out $3.5m (£1.8m) to end inves...</td>\n",
              "      <td>&amp;#163;1.8m indecency fine for viacom media gia...</td>\n",
              "      <td>viacom has paid out $3.5m (£1.8m) to end inves...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['viacom', 'fcc', 'paid', '5m', 'settlement']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5f5bd781-940d-431e-ab03-fcffddc4adfb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5f5bd781-940d-431e-ab03-fcffddc4adfb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5f5bd781-940d-431e-ab03-fcffddc4adfb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-423d30f9-40e7-4f7f-bbed-9d4fccbfccc1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-423d30f9-40e7-4f7f-bbed-9d4fccbfccc1')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-423d30f9-40e7-4f7f-bbed-9d4fccbfccc1 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"        print(\\\"No 'category' column in predictions file\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"input_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"ray dvd beats box office takings oscar-nominated film biopic ray has surpassed its us box office takings with a combined tally of $80m (\\u00a343m) from dvd and video sales and rentals.  ray s success on dvd outstripped its $74m (\\u00a340m) us box office total  earning more than $40m (\\u00a322m) on the first day of the dvd s release alone. ray has been nominated in six oscar categories including best film and best actor for jamie foxx. the film recounts the life of blues singer ray charles  who died in 2004. in its first week on home entertainment release the film was the number one selling dvd  with the limited edition version coming in at number 11. sony horror film the grudge  starring michelle gellar  was the us  second best-selling dvd  with jennifer lopez and richard gere s romantic comedy shall we dance  at number three. foxx s critically acclaimed performance as ray has already earned him a screen actors guild award for best actor  as well as a prestigious golden globe. ray director taylor hackford  responsible for the classic 1982 film an officer and a gentleman  has also received an oscar nomination in the best director category. the film s three other oscar nominations are for costume  film editing and sound mixing.\",\n          \"microsoft gets the blogging bug software giant microsoft is taking the plunge into the world of blogging.  it is launching a test service to allow people to publish blogs  or online journals  called msn spaces. microsoft is trailing behind competitors like google and aol  which already offer services which make it easy for people to set up web journals. blogs  short for web logs  have become a popular way for people to talk about their lives and express opinions online.  msn spaces is free to anyone with a hotmail or msn messenger account. people will be able to choose a layout for the page  upload images and share photo albums and music playlists. the service will be supported by banner ads.  this is a simple tool for people to express themselves   said msn s blake irving. this is microsoft s first foray into blogging  which has taken off as a web phenomenon in the past year. competitors like google already offer free services through its blogger site  while aol provides its members with journals. accurate figures for the number of blogs in existence are hard to come by. according to blog analysis firm technorati  the so-called blogosphere  has doubled every five and a half months for the last 18 months. it now estimates that the number of blogs in existence has exceeded 4.8 million  although some speculate that less than a quarter are regularly maintained.\",\n          \"beattie return calms attack fears everton striker james beattie has been declared fit for training on tuesday  despite suffering an alleged assault last saturday.  beattie  27  is not believed to be as seriously hurt as some reports have suggested after being  the victim of an unprovoked assault  in birmingham. he was on a night out with his girlfriend and two friends following everton s 3-1 win over aston villa.  he was shaken but not badly injured   said everton spokesman ian ross. he added:  he did speak to the police but will not be pressing charges.  he has spoken to manager david moyes about what happened.  beattie was suspended for the win at aston villa after his red card against chelsea and he will be available again for the merseyside derby at liverpool on 20 march.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ref_summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"ray dvd beats box office takings with a combined tally of $80m (\\u00a343m) from dvd and video sales and rentals . ray has been nominated in six oscar categories including best film and best actor for jamie foxx . The film recounts the life of blues singer ray charles who died in 2004 .\",\n          \"msn spaces is free to anyone with a hotmail or msn messenger account . The service will be supported by banner ads . The number of blogs in existence has exceeded 4.8 million .\",\n          \"James beattie is not believed to be as seriously hurt as some reports have suggested after being the victim of an unprovoked assault in birmingham . The 27-year-old was on a night out with his girlfriend and two friends following everton s 3-1 win over aston villa . He was shaken but not badly injured but will not be pressing charges .\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"ray has surpassed its us box office takings with a combined tally of $80m (\\u00a343m) from dvd and video sales and rentals . success on dvd outstripped its $74m (\\u00a340m) us box office total earning more than $40m (\\u00a322m) on the first day of the dvd s release alone . ray has been nominated in six oscar categories including best film and best actor for jamie foxx .\",\n          \"chinese wine tempts italy s illva italy s illva saronno has agreed to buy 33% of changyu the largest wine maker in china . changyu said in a statement to the shenzhen stock exchange that illva will pay 481.42m yuan ($58.16m; \\u00a330.7m) once the government approves the deal . the italian liqueur maker will acquire the shares from the\",\n          \"britannia members \\u00a342m windfall more than 800 000 britannia building society members are to receive a profit share worth on average \\u00a352 each . members of the uk s second largest building society will share \\u00a342m with 100 000 receiving a windfall of more than \\u00a3100 . to qualify for this year s payment customers must have been members for at least two years on 31 december 2004 . britannia has also stopped making payments to members if they are worth less\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ref_interpretation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"ray dvd beats box office takings with a combined tally of $80m (\\u00a343m) from dvd and video sales and rentals\",\n          \"msn spaces is free to anyone with a hotmail or msn messenger account .\",\n          \"James beattie is not believed to be as seriously injured as some reports have suggested\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_interpretation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ref_topics\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 19,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_topics\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Sample counts by exact_match:\n",
            "exact_match\n",
            "False    112\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Top 10 categories (if 'category' exists):\n",
            "No 'category' column in predictions file.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.download(\"mismatches_review.csv\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "2CfXB_WoH7RG",
        "outputId": "cab3f2e0-c108-4a22-b6a3-06a8729b4762"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_67e1e5cc-896e-47fb-9001-723a539aa3ce\", \"mismatches_review.csv\", 378565)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# run in your Colab (assumes `test_df` or `df` contains predictions)\n",
        "# Try both names if unsure:\n",
        "try:\n",
        "    df_check = test_df\n",
        "except NameError:\n",
        "    df_check = globals().get(\"df\", None)\n",
        "if df_check is None:\n",
        "    raise RuntimeError(\"Couldn't find `test_df` or `df` in the notebook. Use the variable that holds your predictions.\")\n",
        "\n",
        "cols = [\"ref_summary\",\"pred_summary\",\"ref_interpretation\",\"pred_interpretation\",\"ref_topics\",\"pred_topics\"]\n",
        "for c in cols:\n",
        "    nonempty = df_check[c].astype(bool).sum() if c in df_check.columns else 0\n",
        "    print(f\"{c}: {nonempty} non-empty / {len(df_check)} rows\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sZM20ChtH9rt",
        "outputId": "84d0f5df-51cf-499a-9386-aa3180358e22"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ref_summary: 112 non-empty / 112 rows\n",
            "pred_summary: 101 non-empty / 112 rows\n",
            "ref_interpretation: 112 non-empty / 112 rows\n",
            "pred_interpretation: 0 non-empty / 112 rows\n",
            "ref_topics: 112 non-empty / 112 rows\n",
            "pred_topics: 0 non-empty / 112 rows\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "display_cols = [c for c in [\"input_text\",\"ref_summary\",\"pred_summary\",\"ref_interpretation\",\"pred_interpretation\",\"ref_topics\",\"pred_topics\"] if c in df_check.columns]\n",
        "display(df_check[display_cols].head(10))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "id": "O-AC_6m_JF5-",
        "outputId": "4dc88b8f-074b-4c8e-aa3e-efbe46593e13"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                          input_text  \\\n",
              "0  ray dvd beats box office takings oscar-nominat...   \n",
              "1  chinese wine tempts italy s illva italy s illv...   \n",
              "2  mild winter drives us oil down 6% us oil price...   \n",
              "3  dutch watch van gogh s last film the last film...   \n",
              "4  hewitt falls to dent in adelaide lleyton hewit...   \n",
              "5  microsoft gets the blogging bug software giant...   \n",
              "6  broadband steams ahead in the us more and more...   \n",
              "7  rock group korn s guitarist quits the guitaris...   \n",
              "8  career honour for actor dicaprio actor leonard...   \n",
              "9  britannia members  £42m windfall more than 800...   \n",
              "\n",
              "                                         ref_summary  \\\n",
              "0  ray dvd beats box office takings with a combin...   \n",
              "1  Italian liqueur maker illva saronno has agreed...   \n",
              "2  Light crude oil futures fell $2.86 to $41.32 a...   \n",
              "3  Theo van gogh was shot and stabbed to death in...   \n",
              "4  lleyton hewitt suffered a shock defeat to tayl...   \n",
              "5  msn spaces is free to anyone with a hotmail or...   \n",
              "6  The number of people and businesses connected ...   \n",
              "7  rock group korn s guitarist quits the guitaris...   \n",
              "8  leonardo dicaprio honoured at the santa barbar...   \n",
              "9  britannia members will share £42m windfall wit...   \n",
              "\n",
              "                                        pred_summary  \\\n",
              "0  ray has surpassed its us box office takings wi...   \n",
              "1  chinese wine tempts italy s illva italy s illv...   \n",
              "2  Light crude oil futures fell $2.86 to $41.32 a...   \n",
              "3  members of van gogh s family and celebrities a...   \n",
              "4  lleyton hewitt suffered a shock defeat to tayl...   \n",
              "5  microsoft gets the blogging bug software giant...   \n",
              "6                                                      \n",
              "7  brian head welch told a radio station in calif...   \n",
              "8  santa barbara international film festival cele...   \n",
              "9  britannia members £42m windfall more than 800 ...   \n",
              "\n",
              "                                  ref_interpretation pred_interpretation  \\\n",
              "0  ray dvd beats box office takings with a combin...                       \n",
              "1  Italian liqueur maker illva saronno agreed to ...                       \n",
              "2  Light crude oil futures fell $2.86 to $41.32 a...                       \n",
              "3  Theo van gogh was shot and stabbed to death in...                       \n",
              "4         hewitt suffers shock defeat to taylor dent                       \n",
              "5  msn spaces is free to anyone with a hotmail or...                       \n",
              "6  The number of people and businesses connected ...                       \n",
              "7              korn s guitarist quits music business                       \n",
              "8  leonardo dicaprio was presented with the award...                       \n",
              "9  britannia will share £42m windfall with 100,00...                       \n",
              "\n",
              "                                          ref_topics pred_topics  \n",
              "0                     [ray, dvd, oscar, film, actor]          []  \n",
              "1              [changyu, chinese, china, yuan, wine]          []  \n",
              "2           [futures, nymex, oil, crude, refineries]          []  \n",
              "3            [gogh, stabbed, amsterdam, murder, van]          []  \n",
              "4            [hewitt, dent, lleyton, taylor, finals]          []  \n",
              "5           [msn, hotmail, blogs, spaces, messenger]          []  \n",
              "6  [broadband, telecoms, connections, number, bus...          []  \n",
              "7               [korn, guitarist, quits, band, quit]          []  \n",
              "8       [leonardo, dicaprio, actor, award, scorsese]          []  \n",
              "9       [britannia, windfall, payouts, members, 000]          []  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-82a97478-4c8b-4954-b399-62058cb4e28a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>input_text</th>\n",
              "      <th>ref_summary</th>\n",
              "      <th>pred_summary</th>\n",
              "      <th>ref_interpretation</th>\n",
              "      <th>pred_interpretation</th>\n",
              "      <th>ref_topics</th>\n",
              "      <th>pred_topics</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ray dvd beats box office takings oscar-nominat...</td>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td>ray has surpassed its us box office takings wi...</td>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td></td>\n",
              "      <td>[ray, dvd, oscar, film, actor]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>chinese wine tempts italy s illva italy s illv...</td>\n",
              "      <td>Italian liqueur maker illva saronno has agreed...</td>\n",
              "      <td>chinese wine tempts italy s illva italy s illv...</td>\n",
              "      <td>Italian liqueur maker illva saronno agreed to ...</td>\n",
              "      <td></td>\n",
              "      <td>[changyu, chinese, china, yuan, wine]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>mild winter drives us oil down 6% us oil price...</td>\n",
              "      <td>Light crude oil futures fell $2.86 to $41.32 a...</td>\n",
              "      <td>Light crude oil futures fell $2.86 to $41.32 a...</td>\n",
              "      <td>Light crude oil futures fell $2.86 to $41.32 a...</td>\n",
              "      <td></td>\n",
              "      <td>[futures, nymex, oil, crude, refineries]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>dutch watch van gogh s last film the last film...</td>\n",
              "      <td>Theo van gogh was shot and stabbed to death in...</td>\n",
              "      <td>members of van gogh s family and celebrities a...</td>\n",
              "      <td>Theo van gogh was shot and stabbed to death in...</td>\n",
              "      <td></td>\n",
              "      <td>[gogh, stabbed, amsterdam, murder, van]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>hewitt falls to dent in adelaide lleyton hewit...</td>\n",
              "      <td>lleyton hewitt suffered a shock defeat to tayl...</td>\n",
              "      <td>lleyton hewitt suffered a shock defeat to tayl...</td>\n",
              "      <td>hewitt suffers shock defeat to taylor dent</td>\n",
              "      <td></td>\n",
              "      <td>[hewitt, dent, lleyton, taylor, finals]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>microsoft gets the blogging bug software giant...</td>\n",
              "      <td>msn spaces is free to anyone with a hotmail or...</td>\n",
              "      <td>microsoft gets the blogging bug software giant...</td>\n",
              "      <td>msn spaces is free to anyone with a hotmail or...</td>\n",
              "      <td></td>\n",
              "      <td>[msn, hotmail, blogs, spaces, messenger]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>broadband steams ahead in the us more and more...</td>\n",
              "      <td>The number of people and businesses connected ...</td>\n",
              "      <td></td>\n",
              "      <td>The number of people and businesses connected ...</td>\n",
              "      <td></td>\n",
              "      <td>[broadband, telecoms, connections, number, bus...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>rock group korn s guitarist quits the guitaris...</td>\n",
              "      <td>rock group korn s guitarist quits the guitaris...</td>\n",
              "      <td>brian head welch told a radio station in calif...</td>\n",
              "      <td>korn s guitarist quits music business</td>\n",
              "      <td></td>\n",
              "      <td>[korn, guitarist, quits, band, quit]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>career honour for actor dicaprio actor leonard...</td>\n",
              "      <td>leonardo dicaprio honoured at the santa barbar...</td>\n",
              "      <td>santa barbara international film festival cele...</td>\n",
              "      <td>leonardo dicaprio was presented with the award...</td>\n",
              "      <td></td>\n",
              "      <td>[leonardo, dicaprio, actor, award, scorsese]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>britannia members  £42m windfall more than 800...</td>\n",
              "      <td>britannia members will share £42m windfall wit...</td>\n",
              "      <td>britannia members £42m windfall more than 800 ...</td>\n",
              "      <td>britannia will share £42m windfall with 100,00...</td>\n",
              "      <td></td>\n",
              "      <td>[britannia, windfall, payouts, members, 000]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-82a97478-4c8b-4954-b399-62058cb4e28a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-82a97478-4c8b-4954-b399-62058cb4e28a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-82a97478-4c8b-4954-b399-62058cb4e28a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-82c5ab20-65d5-4cbd-99d4-74ac1a311642\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-82c5ab20-65d5-4cbd-99d4-74ac1a311642')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-82c5ab20-65d5-4cbd-99d4-74ac1a311642 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df_check[display_cols]\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"input_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"career honour for actor dicaprio actor leonardo dicaprio s  exceptional career  has been honoured at the santa barbara international film festival.  the star was presented with the award by martin scorsese  who directed him in oscar-nominated movie the aviator.  it s a lifetime achievement award  which is completely and utterly surreal  given i m only 30 years old   dicaprio said.  but what has it been  almost 17 years now. i ve done quite a few films.  a retrospective of his movies was shown.   what s really exciting  for me  is that this is what i really love doing   he added.  it s what i want to do for the rest of my life.  dicaprio began his movie career in horror film critters 3  before moving onto roles in the basketball diaries  romeo and juliet  titanic and gangs of new york. the achievement award was created to commemorate the california festival s 20th anniversary and coincided with dicaprio s portrayal of millionaire howard hughes in the aviator.  veteran actress jane russell  who starred in hughes  1943 film the outlaw  said was impressed by dicaprio s quest for authenticity when he previously discussed the role with her.  i was very happy that (dicaprio) came and cared to come up and find out what (hughes) was really like   she said. the aviator has taken pole position in this year s oscars race with 11 nominations  including nominations for best film  best actor for dicaprio and best director for scorsese.\",\n          \"chinese wine tempts italy s illva italy s illva saronno has agreed to buy 33% of changyu  the largest wine maker in china.  changyu said in a statement to the shenzhen stock exchange that illva will pay 481.42m yuan ($58.16m; \\u00a330.7m)  once the government approves the deal. the italian liqueur maker will acquire the shares from the yantai state asset management bureau. chinese wine sales are growing  the us agriculture department said  with wine sales in 2003 up 25% at 61.1bn yuan.  china is encouraging state-owned companies to sell shares to foreign investors. anheuser-busch  heineken and scottish & newcastle have all invested in the chinese beer industry in the last two years and now illva saronno is betting on the chinese wine market. yantai state asset management bureau - a government agency in the north-eastern city of yantai - owns 55% of changyu. the state agency will also sell 10% of its stake in changyu to another overseas company  although it didn t say who. the remaining 12% will be retained by the yantai city government. the consumption of wine in china is still low  at just 0.22 litres per capita  said the us agriculture department. this compares with 59 litres in france  12 litres in the us and three litres in japan.\",\n          \"microsoft gets the blogging bug software giant microsoft is taking the plunge into the world of blogging.  it is launching a test service to allow people to publish blogs  or online journals  called msn spaces. microsoft is trailing behind competitors like google and aol  which already offer services which make it easy for people to set up web journals. blogs  short for web logs  have become a popular way for people to talk about their lives and express opinions online.  msn spaces is free to anyone with a hotmail or msn messenger account. people will be able to choose a layout for the page  upload images and share photo albums and music playlists. the service will be supported by banner ads.  this is a simple tool for people to express themselves   said msn s blake irving. this is microsoft s first foray into blogging  which has taken off as a web phenomenon in the past year. competitors like google already offer free services through its blogger site  while aol provides its members with journals. accurate figures for the number of blogs in existence are hard to come by. according to blog analysis firm technorati  the so-called blogosphere  has doubled every five and a half months for the last 18 months. it now estimates that the number of blogs in existence has exceeded 4.8 million  although some speculate that less than a quarter are regularly maintained.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ref_summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"leonardo dicaprio honoured at the santa barbara international film festival . The 30-year-old actor was presented with the award by martin scorsese . The award was created to commemorate the california festival s 20th anniversary .\",\n          \"Italian liqueur maker illva saronno has agreed to buy 33% of changyu the largest wine maker in china . chinese wine sales are growing with wine sales in 2003 up 25% at 61.1bn yuan . anheuser-busch  heineken and scottish & newcastle have all invested in the chinese beer industry .\",\n          \"msn spaces is free to anyone with a hotmail or msn messenger account . The service will be supported by banner ads . The number of blogs in existence has exceeded 4.8 million .\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"santa barbara international film festival celebrates actor dicaprio s exceptional career has been honoured at the santa barbara international film festival . star was presented with the award by martin scorsese who directed him in oscar-nominated movie the aviator . achievement award was created to commemorate the california festival s 20th anniversary and coincided with dicaprio s portrayal of millionaire howard hughes in the aviator\",\n          \"chinese wine tempts italy s illva italy s illva saronno has agreed to buy 33% of changyu the largest wine maker in china . changyu said in a statement to the shenzhen stock exchange that illva will pay 481.42m yuan ($58.16m; \\u00a330.7m) once the government approves the deal . the italian liqueur maker will acquire the shares from the\",\n          \"microsoft gets the blogging bug software giant microsoft is taking the plunge into the world of blogging . it is launching a test service to allow people to publish blogs or online journals called msn spaces . microsoft is trailing behind competitors like google and aol which already offer services which make it easy for people to set up web journals .\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ref_interpretation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"leonardo dicaprio was presented with the award by martin scorsese .\",\n          \"Italian liqueur maker illva saronno agreed to buy 33% of changyu the largest wine maker in china\",\n          \"msn spaces is free to anyone with a hotmail or msn messenger account .\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_interpretation\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ref_topics\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_topics\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if \"ref_interpretation\" in df_check.columns and \"pred_interpretation\" in df_check.columns:\n",
        "    df_check[\"len_ref_interp\"] = df_check[\"ref_interpretation\"].astype(str).apply(len)\n",
        "    df_check[\"len_pred_interp\"] = df_check[\"pred_interpretation\"].astype(str).apply(len)\n",
        "    display(df_check[[\"len_ref_interp\",\"len_pred_interp\"]].describe())\n",
        "    # show examples where either is empty\n",
        "    display(df_check.loc[(df_check[\"len_ref_interp\"]==0) | (df_check[\"len_pred_interp\"]==0), [\"ref_interpretation\",\"pred_interpretation\"]].head(20))\n",
        "else:\n",
        "    print(\"Interpretation columns missing.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 960
        },
        "id": "GvPGDPbEJHb9",
        "outputId": "36824481-d36c-4914-a0d0-b2fe6051ac68"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "       len_ref_interp  len_pred_interp\n",
              "count      112.000000            112.0\n",
              "mean        84.392857              0.0\n",
              "std         31.175284              0.0\n",
              "min         12.000000              0.0\n",
              "25%         66.250000              0.0\n",
              "50%         81.500000              0.0\n",
              "75%        104.000000              0.0\n",
              "max        184.000000              0.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d2522743-d3e9-4f44-a82c-44fbc23f0a14\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>len_ref_interp</th>\n",
              "      <th>len_pred_interp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>112.000000</td>\n",
              "      <td>112.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>84.392857</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>31.175284</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>12.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>66.250000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>81.500000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>104.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>184.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d2522743-d3e9-4f44-a82c-44fbc23f0a14')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d2522743-d3e9-4f44-a82c-44fbc23f0a14 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d2522743-d3e9-4f44-a82c-44fbc23f0a14');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7a840d05-1ddc-48e2-9fb4-637510941df5\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7a840d05-1ddc-48e2-9fb4-637510941df5')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7a840d05-1ddc-48e2-9fb4-637510941df5 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"Interpretation columns missing\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"len_ref_interp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52.7508174739204,\n        \"min\": 12.0,\n        \"max\": 184.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          84.39285714285714,\n          81.5,\n          112.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"len_pred_interp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 39.59797974644666,\n        \"min\": 0.0,\n        \"max\": 112.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          112.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                   ref_interpretation pred_interpretation\n",
              "0   ray dvd beats box office takings with a combin...                    \n",
              "1   Italian liqueur maker illva saronno agreed to ...                    \n",
              "2   Light crude oil futures fell $2.86 to $41.32 a...                    \n",
              "3   Theo van gogh was shot and stabbed to death in...                    \n",
              "4          hewitt suffers shock defeat to taylor dent                    \n",
              "5   msn spaces is free to anyone with a hotmail or...                    \n",
              "6   The number of people and businesses connected ...                    \n",
              "7               korn s guitarist quits music business                    \n",
              "8   leonardo dicaprio was presented with the award...                    \n",
              "9   britannia will share £42m windfall with 100,00...                    \n",
              "10  jonathan edwards believes idowu can prove his ...                    \n",
              "11  ray dvd beats box office takings with a combin...                    \n",
              "12  James beattie is not believed to be as serious...                    \n",
              "13  Nikkei index of leading shares gained 7.6% dur...                    \n",
              "14  sam allardyce signs roma defender vincent cand...                    \n",
              "15  byrds producer terry melcher died at 62 after ...                    \n",
              "16  klinsmann says it will be difficult for any of...                    \n",
              "17  jon thoday is working with steve brown who wro...                    \n",
              "18  most gibraltarians say they want to remain bri...                    \n",
              "19  viacom has paid out $3.5m (£1.8m) to end inves...                    "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d2808688-6541-49e7-be4c-927f2f456360\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ref_interpretation</th>\n",
              "      <th>pred_interpretation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Italian liqueur maker illva saronno agreed to ...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Light crude oil futures fell $2.86 to $41.32 a...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Theo van gogh was shot and stabbed to death in...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>hewitt suffers shock defeat to taylor dent</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>msn spaces is free to anyone with a hotmail or...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>The number of people and businesses connected ...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>korn s guitarist quits music business</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>leonardo dicaprio was presented with the award...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>britannia will share £42m windfall with 100,00...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>jonathan edwards believes idowu can prove his ...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>James beattie is not believed to be as serious...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Nikkei index of leading shares gained 7.6% dur...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>sam allardyce signs roma defender vincent cand...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>byrds producer terry melcher died at 62 after ...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>klinsmann says it will be difficult for any of...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>jon thoday is working with steve brown who wro...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>most gibraltarians say they want to remain bri...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>viacom has paid out $3.5m (£1.8m) to end inves...</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d2808688-6541-49e7-be4c-927f2f456360')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d2808688-6541-49e7-be4c-927f2f456360 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d2808688-6541-49e7-be4c-927f2f456360');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-bff52cce-e5a3-4f57-a841-ceee1d862b24\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bff52cce-e5a3-4f57-a841-ceee1d862b24')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-bff52cce-e5a3-4f57-a841-ceee1d862b24 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"Interpretation columns missing\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"ref_interpretation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"ray dvd beats box office takings with a combined tally of $80m (\\u00a343m) from dvd and video sales and rentals\",\n          \"msn spaces is free to anyone with a hotmail or msn messenger account .\",\n          \"James beattie is not believed to be as seriously injured as some reports have suggested\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_interpretation\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import ast\n",
        "def parse_list_safe(x):\n",
        "    if isinstance(x, list): return x\n",
        "    s = str(x)\n",
        "    # try literal eval if it's a repr of list\n",
        "    try:\n",
        "        v = ast.literal_eval(s)\n",
        "        if isinstance(v, (list, tuple)): return [str(i).strip().lower() for i in v if i]\n",
        "    except Exception:\n",
        "        pass\n",
        "    # fallback splitting\n",
        "    import re\n",
        "    parts = [p.strip().lower() for p in re.split(r\"[;\\n,]\\s*\", s) if p.strip()]\n",
        "    return parts\n",
        "\n",
        "if \"ref_topics\" in df_check.columns and \"pred_topics\" in df_check.columns:\n",
        "    df_check[\"ref_topics_parsed\"] = df_check[\"ref_topics\"].apply(parse_list_safe)\n",
        "    df_check[\"pred_topics_parsed\"] = df_check[\"pred_topics\"].apply(parse_list_safe)\n",
        "    print(\"avg ref topics:\", df_check[\"ref_topics_parsed\"].apply(len).mean())\n",
        "    print(\"avg pred topics:\", df_check[\"pred_topics_parsed\"].apply(len).mean())\n",
        "    display(df_check.loc[df_check[\"ref_topics_parsed\"].apply(len)>0, [\"ref_topics\",\"pred_topics\"]].head(20))\n",
        "else:\n",
        "    print(\"Topic columns missing.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 711
        },
        "id": "8IlY0rlkJREV",
        "outputId": "a01f05db-5971-4cad-957b-e50f5ca5252f"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "avg ref topics: 5.0\n",
            "avg pred topics: 0.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                           ref_topics pred_topics\n",
              "0                      [ray, dvd, oscar, film, actor]          []\n",
              "1               [changyu, chinese, china, yuan, wine]          []\n",
              "2            [futures, nymex, oil, crude, refineries]          []\n",
              "3             [gogh, stabbed, amsterdam, murder, van]          []\n",
              "4             [hewitt, dent, lleyton, taylor, finals]          []\n",
              "5            [msn, hotmail, blogs, spaces, messenger]          []\n",
              "6   [broadband, telecoms, connections, number, bus...          []\n",
              "7                [korn, guitarist, quits, band, quit]          []\n",
              "8        [leonardo, dicaprio, actor, award, scorsese]          []\n",
              "9        [britannia, windfall, payouts, members, 000]          []\n",
              "10       [edwards, phillips, idowu, jonathan, jumper]          []\n",
              "11                     [ray, dvd, oscar, film, actor]          []\n",
              "12           [beattie, injured, james, hurt, assault]          []\n",
              "13         [nikkei, markets, optimism, index, shares]          []\n",
              "14           [roma, bolton, candela, luigi, defender]          []\n",
              "15              [manson, byrds, dies, terry, murders]          []\n",
              "16        [lehmann, kahn, klinsmann, keeper, germany]          []\n",
              "17           [musical, capra, theatre, spend, spends]          []\n",
              "18  [gibraltarians, kent, summit, british, referen...          []\n",
              "19                [viacom, fcc, paid, 5m, settlement]          []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-12079ec6-08d5-4ca6-a6ca-a1cc1661d3e2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ref_topics</th>\n",
              "      <th>pred_topics</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>[ray, dvd, oscar, film, actor]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>[changyu, chinese, china, yuan, wine]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[futures, nymex, oil, crude, refineries]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>[gogh, stabbed, amsterdam, murder, van]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>[hewitt, dent, lleyton, taylor, finals]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>[msn, hotmail, blogs, spaces, messenger]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>[broadband, telecoms, connections, number, bus...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>[korn, guitarist, quits, band, quit]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>[leonardo, dicaprio, actor, award, scorsese]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>[britannia, windfall, payouts, members, 000]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>[edwards, phillips, idowu, jonathan, jumper]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>[ray, dvd, oscar, film, actor]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>[beattie, injured, james, hurt, assault]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>[nikkei, markets, optimism, index, shares]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>[roma, bolton, candela, luigi, defender]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>[manson, byrds, dies, terry, murders]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>[lehmann, kahn, klinsmann, keeper, germany]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>[musical, capra, theatre, spend, spends]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>[gibraltarians, kent, summit, british, referen...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>[viacom, fcc, paid, 5m, settlement]</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-12079ec6-08d5-4ca6-a6ca-a1cc1661d3e2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-12079ec6-08d5-4ca6-a6ca-a1cc1661d3e2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-12079ec6-08d5-4ca6-a6ca-a1cc1661d3e2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-11d81dcd-d625-47d9-ab48-f97ccc8f0b48\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-11d81dcd-d625-47d9-ab48-f97ccc8f0b48')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-11d81dcd-d625-47d9-ab48-f97ccc8f0b48 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"Topic columns missing\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"ref_topics\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_topics\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from rouge_score import rouge_scorer\n",
        "import numpy as np\n",
        "\n",
        "def rouge_avg_percent(refs, preds):\n",
        "    scorer = rouge_scorer.RougeScorer([\"rouge1\",\"rouge2\",\"rougeL\"], use_stemmer=True)\n",
        "    scores = {\"rouge1\":[], \"rouge2\":[], \"rougeL\":[]}\n",
        "    for r,p in zip(refs, preds):\n",
        "        if not r or not p:\n",
        "            continue\n",
        "        sc = scorer.score(str(r), str(p))\n",
        "        for k in scores: scores[k].append(sc[k].fmeasure)\n",
        "    return {k: float(np.mean(v))*100 if v else 0.0 for k,v in scores.items()}\n",
        "\n",
        "print(\"Summary ROUGE %:\", rouge_avg_percent(df_check[\"ref_summary\"].tolist(), df_check[\"pred_summary\"].tolist()))\n",
        "print(\"Interpretation ROUGE %:\", rouge_avg_percent(df_check[\"ref_interpretation\"].tolist(), df_check[\"pred_interpretation\"].tolist()))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "piAvHPKdJTiu",
        "outputId": "6cc8471b-eb24-456f-cab4-71712859f7b2"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Summary ROUGE %: {'rouge1': 56.20018399782802, 'rouge2': 45.69405761407687, 'rougeL': 50.37149484097216}\n",
            "Interpretation ROUGE %: {'rouge1': 0.0, 'rouge2': 0.0, 'rougeL': 0.0}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell A: Setup & find test_df / predictions\n",
        "import os, json, math, time\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import torch\n",
        "from transformers import pipeline, AutoTokenizer\n",
        "from pathlib import Path\n",
        "\n",
        "# Try to use existing in-memory test_df; else load CSV\n",
        "if \"test_df\" in globals():\n",
        "    df = test_df.copy()\n",
        "    print(\"Using in-memory test_df\")\n",
        "else:\n",
        "    # look for common prediction CSVs\n",
        "    candidates = [\"student_predictions.csv\", \"student_eval_predictions_full.csv\", \"student_eval_predictions.csv\"]\n",
        "    found = None\n",
        "    for c in candidates:\n",
        "        if os.path.exists(c):\n",
        "            found = c\n",
        "            break\n",
        "    if not found:\n",
        "        # try any csv in cwd with 'student' in name\n",
        "        for f in os.listdir(\".\"):\n",
        "            if f.lower().endswith(\".csv\") and \"student\" in f.lower():\n",
        "                found = f\n",
        "                break\n",
        "    if not found:\n",
        "        raise FileNotFoundError(\"Could not find predictions CSV. Run generation cell (Cell 9) first to create 'student_predictions.csv'.\")\n",
        "    df = pd.read_csv(found)\n",
        "    print(\"Loaded predictions CSV:\", found)\n",
        "\n",
        "# Ensure text column exists\n",
        "if \"input_text\" not in df.columns and \"text\" in df.columns:\n",
        "    df = df.rename(columns={\"text\":\"input_text\"})\n",
        "\n",
        "if \"input_text\" not in df.columns:\n",
        "    # try first column\n",
        "    df = df.rename(columns={df.columns[0]: \"input_text\"})\n",
        "\n",
        "print(\"Rows in dataset to re-generate:\", len(df))\n",
        "\n",
        "# defaults (if not defined earlier in notebook)\n",
        "MAX_TARGET_LENGTH = globals().get(\"MAX_TARGET_LENGTH\", 256)\n",
        "MAX_INPUT_LENGTH = globals().get(\"MAX_INPUT_LENGTH\", 512)\n",
        "\n",
        "_device = 0 if torch.cuda.is_available() else -1\n",
        "print(\"Device for pipelines:\", \"GPU\" if _device == 0 else \"CPU\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "go2f3Td3JYeP",
        "outputId": "a066073a-c843-4cc4-d063-9c5fb84d2051"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using in-memory test_df\n",
            "Rows in dataset to re-generate: 112\n",
            "Device for pipelines: GPU\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell B: Generate improved predictions with beam search (batched)\n",
        "from transformers import pipeline as hf_pipeline\n",
        "import math\n",
        "from tqdm.auto import tqdm\n",
        "\n",
        "model_dir = \"./student_model_final\"\n",
        "if not os.path.isdir(model_dir):\n",
        "    # also try \"./student_model\"\n",
        "    if os.path.isdir(\"./student_model\"):\n",
        "        model_dir = \"./student_model\"\n",
        "    else:\n",
        "        raise FileNotFoundError(\"Saved student model dir not found (./student_model_final or ./student_model)\")\n",
        "\n",
        "print(\"Loading student pipeline from:\", model_dir)\n",
        "student_pipe_beam = hf_pipeline(\"text2text-generation\", model=model_dir, tokenizer=model_dir, device=_device)\n",
        "\n",
        "def batch_generate_beam(texts, bs=8, num_beams=6, max_length=MAX_TARGET_LENGTH, length_penalty=1.0, no_repeat_ngram_size=3):\n",
        "    outs = []\n",
        "    for i in tqdm(range(0, len(texts), bs), desc=\"Beam generate\"):\n",
        "        batch = texts[i:i+bs]\n",
        "        # pipeline allows generation kwargs\n",
        "        res = student_pipe_beam(batch,\n",
        "                                max_length=max_length,\n",
        "                                num_beams=num_beams,\n",
        "                                length_penalty=length_penalty,\n",
        "                                no_repeat_ngram_size=no_repeat_ngram_size,\n",
        "                                early_stopping=True,\n",
        "                                do_sample=False)\n",
        "        outs.extend([r[\"generated_text\"] for r in res])\n",
        "    return outs\n",
        "\n",
        "texts = df[\"input_text\"].astype(str).tolist()\n",
        "print(\"Generating with beams for\", len(texts), \"items...\")\n",
        "preds_beam = batch_generate_beam(texts, bs=8, num_beams=6, max_length=MAX_TARGET_LENGTH)\n",
        "df[\"student_pred_beam\"] = preds_beam\n",
        "# Save intermediate file\n",
        "df.to_csv(\"student_predictions_beam.csv\", index=False)\n",
        "print(\"Saved beam predictions to student_predictions_beam.csv\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "1b6a6bbdd6834be99caf681507d4ec73",
            "5a15366a2726499988e2800a4bae8a7c",
            "7d779323db554f7e80e365b4dd955f10",
            "ca7c0764d81848f688caa6efb0a1d09f",
            "e5cc0c4849c546f88642414b30eaf072",
            "0a94a0ccd7474ac8a87d44d34be690d8",
            "e7076aeba23344f781bc3e6a543b8f63",
            "343d6930b9ae4281b4966b0784eac8dd",
            "7e5e44503fc0497da5f83431b3d72d33",
            "e1e29e30825743b48261c2f94cfa10e5",
            "7cce886073c241ad88324e097842226a"
          ]
        },
        "id": "Jh_VdTamLEXf",
        "outputId": "4e3c4141-6fac-4194-e850-4c2f103305db"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading student pipeline from: ./student_model_final\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Device set to use cuda:0\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Generating with beams for 112 items...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Beam generate:   0%|          | 0/14 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "1b6a6bbdd6834be99caf681507d4ec73"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n",
            "Both `max_new_tokens` (=256) and `max_length`(=256) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved beam predictions to student_predictions_beam.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell C: Helpers (parse, fill missing interpretation/topics)\n",
        "import re\n",
        "from sentence_transformers import SentenceTransformer\n",
        "from keybert import KeyBERT\n",
        "\n",
        "# parse_combined same logic as notebook (robust)\n",
        "def parse_combined(text):\n",
        "    if not isinstance(text, str):\n",
        "        return \"\", \"\", []\n",
        "    t = text.strip()\n",
        "    up = t.upper()\n",
        "    idx_summary = up.find(\"SUMMARY:\")\n",
        "    idx_interp = up.find(\"INTERPRETATION:\")\n",
        "    idx_topics = up.find(\"TOPICS:\")\n",
        "    summary = \"\"\n",
        "    interpretation = \"\"\n",
        "    topics = []\n",
        "    if idx_summary != -1:\n",
        "        start = idx_summary + len(\"SUMMARY:\")\n",
        "        end = len(t)\n",
        "        if idx_interp != -1:\n",
        "            end = idx_interp\n",
        "        elif idx_topics != -1:\n",
        "            end = idx_topics\n",
        "        summary = t[start:end].strip()\n",
        "    if idx_interp != -1:\n",
        "        start = idx_interp + len(\"INTERPRETATION:\")\n",
        "        end = len(t)\n",
        "        if idx_topics != -1:\n",
        "            end = idx_topics\n",
        "        interpretation = t[start:end].strip()\n",
        "    if idx_topics != -1:\n",
        "        start = idx_topics + len(\"TOPICS:\")\n",
        "        topics_str = t[start:].strip()\n",
        "        topics = re.split(r\"[;\\n,]\\s*\", topics_str)\n",
        "        topics = [x.strip().lower() for x in topics if x.strip()]\n",
        "    # fallback\n",
        "    if idx_summary == -1 and idx_interp == -1 and idx_topics == -1:\n",
        "        parts = [p.strip() for p in re.split(r\"\\n\\s*\\n\", t) if p.strip()]\n",
        "        if len(parts) >= 1:\n",
        "            summary = parts[0]\n",
        "        if len(parts) >= 2:\n",
        "            interpretation = parts[1]\n",
        "        if len(parts) >= 3:\n",
        "            topics = [x.strip().lower() for x in re.split(r\"[;\\n,]\\s*\", parts[2]) if x.strip()]\n",
        "    return summary, interpretation, topics\n",
        "\n",
        "# Ensure interpreter and KeyBERT are available for fallback\n",
        "# Load flan-t5-small interpreter pipeline (teacher) if available in notebook else load it\n",
        "try:\n",
        "    interpreter  # from earlier cell\n",
        "    print(\"Using existing 'interpreter' pipeline from notebook.\")\n",
        "except Exception:\n",
        "    print(\"Loading flan-t5-small interpreter pipeline for fallback interpretation generation...\")\n",
        "    interpreter = hf_pipeline(\"text2text-generation\", model=\"google/flan-t5-small\", tokenizer=\"google/flan-t5-small\", device=_device)\n",
        "\n",
        "# Load KeyBERT embed model (may be cached already)\n",
        "try:\n",
        "    kw_model\n",
        "except Exception:\n",
        "    print(\"Loading SentenceTransformer & KeyBERT for topic extraction (this may take a short time)...\")\n",
        "    embed_model = SentenceTransformer(\"all-MiniLM-L6-v2\")\n",
        "    kw_model = KeyBERT(model=embed_model)\n",
        "\n",
        "# Helper to generate interpretation for a summary if missing\n",
        "def gen_interpretation_from_summary(summaries, bs=8, max_new_tokens=128):\n",
        "    outs = []\n",
        "    prompts = [f\"Explain this like an expert: {s}\" for s in summaries]\n",
        "    for i in range(0, len(prompts), bs):\n",
        "        batch = prompts[i:i+bs]\n",
        "        res = interpreter(batch, max_new_tokens=max_new_tokens, do_sample=False)\n",
        "        outs.extend([r.get(\"generated_text\", \"\") for r in res])\n",
        "    return outs\n",
        "\n",
        "# Helper to extract topics from original article if missing (top_n)\n",
        "def extract_topics_from_texts(texts, top_n=5):\n",
        "    topics_out = []\n",
        "    for txt in texts:\n",
        "        try:\n",
        "            kws = kw_model.extract_keywords(str(txt), top_n=top_n, keyphrase_ngram_range=(1,2))\n",
        "            topics_out.append([kw for kw,score in kws])\n",
        "        except Exception:\n",
        "            topics_out.append([])\n",
        "    return topics_out\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zrsl7egZLKyl",
        "outputId": "a2ff72fc-29ba-418c-9bb1-2b4f1ee871e2"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using existing 'interpreter' pipeline from notebook.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell D: Parse, fill missing pieces, compute ROUGE and topic metrics\n",
        "from rouge_score import rouge_scorer\n",
        "import numpy as np\n",
        "from collections import Counter\n",
        "import json, pprint\n",
        "\n",
        "# Select which prediction column to evaluate\n",
        "pred_col = \"student_pred_beam\" if \"student_pred_beam\" in df.columns else \"student_pred\"\n",
        "print(\"Evaluating using prediction column:\", pred_col)\n",
        "\n",
        "# Parse references (from target_text or ref_*) and predictions\n",
        "if \"target_text\" in df.columns:\n",
        "    refs_parsed = [parse_combined(x) for x in df[\"target_text\"].astype(str).tolist()]\n",
        "    df[\"ref_summary\"] = [p[0] for p in refs_parsed]\n",
        "    df[\"ref_interpretation\"] = [p[1] for p in refs_parsed]\n",
        "    df[\"ref_topics\"] = [p[2] for p in refs_parsed]\n",
        "else:\n",
        "    # try existing ref_summary columns or leave blank\n",
        "    if \"ref_summary\" not in df.columns: df[\"ref_summary\"] = \"\"\n",
        "    if \"ref_interpretation\" not in df.columns: df[\"ref_interpretation\"] = \"\"\n",
        "    if \"ref_topics\" not in df.columns: df[\"ref_topics\"] = \"\"\n",
        "\n",
        "preds_parsed = [parse_combined(x) for x in df[pred_col].astype(str).tolist()]\n",
        "df[\"pred_summary\"] = [p[0] for p in preds_parsed]\n",
        "df[\"pred_interpretation\"] = [p[1] for p in preds_parsed]\n",
        "df[\"pred_topics\"] = [p[2] for p in preds_parsed]\n",
        "\n",
        "# Fill missing interpretations: generate from predicted summary when empty\n",
        "missing_interp_idx = df[df[\"pred_interpretation\"].astype(str).str.strip()==\"\"].index.tolist()\n",
        "print(\"Predicted interpretations missing for rows:\", len(missing_interp_idx))\n",
        "if len(missing_interp_idx) > 0:\n",
        "    summaries_to_gen = df.loc[missing_interp_idx, \"pred_summary\"].astype(str).tolist()\n",
        "    # If summary is empty too, fall back to using input_text shortened\n",
        "    fallback_texts = []\n",
        "    fill_summaries = []\n",
        "    for s, txt in zip(summaries_to_gen, df.loc[missing_interp_idx, \"input_text\"].astype(str).tolist()):\n",
        "        if s.strip()==\"\":\n",
        "            # use the first 200 tokens of input as stand-in summary\n",
        "            fill_summaries.append(\" \".join(str(txt).split()[:200]))\n",
        "        else:\n",
        "            fill_summaries.append(s)\n",
        "    new_interps = gen_interpretation_from_summary(fill_summaries, bs=8, max_new_tokens=128)\n",
        "    # assign back\n",
        "    for idx, interp in zip(missing_interp_idx, new_interps):\n",
        "        df.at[idx, \"pred_interpretation\"] = interp\n",
        "\n",
        "# Fill missing topics: extract from input_text when pred_topics empty\n",
        "missing_topics_idx = df[df[\"pred_topics\"].astype(str).apply(lambda x: len(str(x).strip())==0)].index.tolist()\n",
        "print(\"Predicted topics missing for rows:\", len(missing_topics_idx))\n",
        "if len(missing_topics_idx) > 0:\n",
        "    texts_for_topics = df.loc[missing_topics_idx, \"input_text\"].astype(str).tolist()\n",
        "    new_topics = extract_topics_from_texts(texts_for_topics, top_n=5)\n",
        "    for idx, tlist in zip(missing_topics_idx, new_topics):\n",
        "        df.at[idx, \"pred_topics\"] = tlist\n",
        "\n",
        "# Now compute ROUGE for summaries & interpretations\n",
        "def rouge_avg(refs, preds):\n",
        "    scorer = rouge_scorer.RougeScorer([\"rouge1\",\"rouge2\",\"rougeL\"], use_stemmer=True)\n",
        "    scores = {\"rouge1\": [], \"rouge2\": [], \"rougeL\": []}\n",
        "    for r,p in zip(refs, preds):\n",
        "        if not r or not p:\n",
        "            continue\n",
        "        sc = scorer.score(str(r), str(p))\n",
        "        for k in scores: scores[k].append(sc[k].fmeasure)\n",
        "    return {k: float(np.mean(v))*100 if v else 0.0 for k,v in scores.items()}\n",
        "\n",
        "rouge_summary = rouge_avg(df[\"ref_summary\"].tolist(), df[\"pred_summary\"].tolist())\n",
        "rouge_interpretation = rouge_avg(df[\"ref_interpretation\"].tolist(), df[\"pred_interpretation\"].tolist())\n",
        "\n",
        "# Topic metrics (reusing earlier approach)\n",
        "def topics_metrics(refs_list, preds_list):\n",
        "    import numpy as np\n",
        "    per_prec, per_rec, per_f1 = [], [], []\n",
        "    total_tp = total_pred = total_ref = 0\n",
        "    for refs, preds in zip(refs_list, preds_list):\n",
        "        refs_set = set([r.strip().lower() for r in (refs if isinstance(refs, list) else (refs or []))]) if refs else set()\n",
        "        preds_set = set([p.strip().lower() for p in (preds if isinstance(preds, list) else (preds or []))]) if preds else set()\n",
        "        if len(preds_set)==0 and len(refs_set)==0:\n",
        "            per_prec.append(1.0); per_rec.append(1.0); per_f1.append(1.0)\n",
        "            continue\n",
        "        if len(preds_set)==0:\n",
        "            per_prec.append(0.0); per_rec.append(0.0); per_f1.append(0.0)\n",
        "            continue\n",
        "        tp = len(preds_set & refs_set)\n",
        "        prec = tp / len(preds_set) if len(preds_set)>0 else 0.0\n",
        "        rec = tp / len(refs_set) if len(refs_set)>0 else 0.0\n",
        "        f1 = 2*prec*rec/(prec+rec) if (prec+rec)>0 else 0.0\n",
        "        per_prec.append(prec); per_rec.append(rec); per_f1.append(f1)\n",
        "        total_tp += tp; total_pred += len(preds_set); total_ref += len(refs_set)\n",
        "    macro = {\"precision\": float(np.mean(per_prec)), \"recall\": float(np.mean(per_rec)), \"f1\": float(np.mean(per_f1))}\n",
        "    micro_prec = total_tp / total_pred if total_pred>0 else 0.0\n",
        "    micro_rec = total_tp / total_ref if total_ref>0 else 0.0\n",
        "    micro_f1 = 2*micro_prec*micro_rec/(micro_prec+micro_rec) if (micro_prec+micro_rec)>0 else 0.0\n",
        "    micro = {\"precision\": float(micro_prec), \"recall\": float(micro_rec), \"f1\": float(micro_f1)}\n",
        "    return {\"macro\": macro, \"micro\": micro}\n",
        "\n",
        "topic_stats = topics_metrics(df[\"ref_topics\"].tolist(), df[\"pred_topics\"].tolist())\n",
        "\n",
        "# Exact match for whole target (unlikely but compute)\n",
        "if \"target_text\" in df.columns:\n",
        "    exact_match = (df[\"target_text\"].astype(str).str.strip() == df[pred_col].astype(str).str.strip()).mean()\n",
        "else:\n",
        "    exact_match = 0.0\n",
        "\n",
        "# Save updated predictions and metrics\n",
        "out_csv = \"student_predictions_beam_augmented.csv\"\n",
        "df.to_csv(out_csv, index=False)\n",
        "metrics = {\n",
        "    \"rouge_summary_percent\": rouge_summary,\n",
        "    \"rouge_interpretation_percent\": rouge_interpretation,\n",
        "    \"topic_metrics\": topic_stats,\n",
        "    \"exact_match_full_target\": float(exact_match),\n",
        "    \"generation_mode\": \"beam (num_beams=6) + fill_interpretation_with_flan5 + topics_from_keybert_fallback\"\n",
        "}\n",
        "with open(\"student_beam_metrics.json\",\"w\") as f:\n",
        "    json.dump(metrics, f, indent=2)\n",
        "\n",
        "print(\"Saved augmented predictions to:\", out_csv)\n",
        "print(\"Saved metrics to: student_beam_metrics.json\")\n",
        "print(\"\\nROUGE Summary (%):\", rouge_summary)\n",
        "print(\"ROUGE Interpretation (%):\", rouge_interpretation)\n",
        "print(\"Topic metrics:\", topic_stats)\n",
        "print(\"Exact match (full target):\", exact_match)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ulgf_AXDLMym",
        "outputId": "5819a24c-df1d-4d91-f584-0233cca958b5"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Evaluating using prediction column: student_pred_beam\n",
            "Predicted interpretations missing for rows: 112\n",
            "Predicted topics missing for rows: 0\n",
            "Saved augmented predictions to: student_predictions_beam_augmented.csv\n",
            "Saved metrics to: student_beam_metrics.json\n",
            "\n",
            "ROUGE Summary (%): {'rouge1': 60.11393714458434, 'rouge2': 48.00717703427163, 'rougeL': 51.77960561252015}\n",
            "ROUGE Interpretation (%): {'rouge1': 39.75544940145138, 'rouge2': 28.175466676419564, 'rougeL': 37.53284698036836}\n",
            "Topic metrics: {'macro': {'precision': 0.0, 'recall': 0.0, 'f1': 0.0}, 'micro': {'precision': 0.0, 'recall': 0.0, 'f1': 0.0}}\n",
            "Exact match (full target): 0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell E: Display examples, mismatches, top topics, and simple charts\n",
        "import matplotlib.pyplot as plt\n",
        "from collections import Counter\n",
        "# from caas_jupyter_tools import display_dataframe_to_user # Removed due to ModuleNotFoundError\n",
        "\n",
        "# Helper to display when caas_jupyter_tools is available, fallback to display\n",
        "def try_display_df(title, df):\n",
        "    try:\n",
        "        # from caas_jupyter_tools import display_dataframe_to_user # Removed\n",
        "        # display_dataframe_to_user(title, df) # Removed\n",
        "        # Fallback to standard display\n",
        "        from IPython.display import display\n",
        "        print(f\"--- {title} ---\")\n",
        "        display(df)\n",
        "    except Exception as e:\n",
        "        print(f\"Error displaying dataframe {title}: {e}\")\n",
        "        # Further fallback if display also fails\n",
        "        print(f\"--- {title} (first 20 rows) ---\")\n",
        "        print(df.head(20).to_string())\n",
        "\n",
        "\n",
        "# Show a sample of improved outputs\n",
        "sample_cols = [\"input_text\",\"pred_summary\",\"ref_summary\",\"pred_interpretation\",\"ref_interpretation\",\"pred_topics\",\"ref_topics\"]\n",
        "present_cols = [c for c in sample_cols if c in df.columns]\n",
        "try_display_df(\"Improved_sample_outputs\", df[present_cols].head(30))\n",
        "\n",
        "# Save mismatches (by summary equality)\n",
        "df[\"summary_exact\"] = df[\"ref_summary\"].astype(str).str.strip() == df[\"pred_summary\"].astype(str).str.strip()\n",
        "mismatches = df[~df[\"summary_exact\"]].copy()\n",
        "mismatches.to_csv(\"mismatches_after_beam.csv\", index=False)\n",
        "print(\"Saved mismatches_after_beam.csv (open from Files). Total mismatches by summary:\", len(mismatches))\n",
        "\n",
        "# Plot predicted summary length distribution\n",
        "df[\"pred_summary_len\"] = df[\"pred_summary\"].astype(str).apply(lambda x: len(x.split()))\n",
        "plt.figure(figsize=(6,4))\n",
        "plt.hist(df[\"pred_summary_len\"].dropna(), bins=20)\n",
        "plt.title(\"Predicted summary length (words) after beam\")\n",
        "plt.xlabel(\"Words\")\n",
        "plt.ylabel(\"Count\")\n",
        "plt.show()\n",
        "\n",
        "# Top predicted topics\n",
        "all_pred_topics = [t for lst in df[\"pred_topics\"].tolist() for t in (lst if isinstance(lst, list) else [])]\n",
        "top_pred = Counter(all_pred_topics).most_common(30)\n",
        "top_df = pd.DataFrame(top_pred, columns=[\"topic\",\"count\"])\n",
        "try_display_df(\"Top_predicted_topics_after_beam\", top_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "KCfs8ia_LRxO",
        "outputId": "e8dade58-a052-45d6-c72d-d0fb826d7f10"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Improved_sample_outputs ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                           input_text  \\\n",
              "0   ray dvd beats box office takings oscar-nominat...   \n",
              "1   chinese wine tempts italy s illva italy s illv...   \n",
              "2   mild winter drives us oil down 6% us oil price...   \n",
              "3   dutch watch van gogh s last film the last film...   \n",
              "4   hewitt falls to dent in adelaide lleyton hewit...   \n",
              "5   microsoft gets the blogging bug software giant...   \n",
              "6   broadband steams ahead in the us more and more...   \n",
              "7   rock group korn s guitarist quits the guitaris...   \n",
              "8   career honour for actor dicaprio actor leonard...   \n",
              "9   britannia members  £42m windfall more than 800...   \n",
              "10  edwards tips idowu for euro gold world outdoor...   \n",
              "11  ray dvd beats box office takings oscar-nominat...   \n",
              "12  beattie return calms attack fears everton stri...   \n",
              "13  stock market eyes japan recovery japanese shar...   \n",
              "14  candela completes bolton switch bolton boss sa...   \n",
              "15  byrds producer melcher dies at 62 record produ...   \n",
              "16  klinsmann issues lehmann warning germany coach...   \n",
              "17  musical treatment for capra film the classic f...   \n",
              "18  talks held on gibraltar s future two days of t...   \n",
              "19  &#163;1.8m indecency fine for viacom media gia...   \n",
              "20  teenager tait picked for england newcastle s t...   \n",
              "21  mccririck out of big brother show racing pundi...   \n",
              "22  almagro continues spanish surge unseeded nicol...   \n",
              "23  us tv host clark suffers stroke veteran us tel...   \n",
              "24  short attacks us over tsunami aid former cabin...   \n",
              "25  aaliyah claim dismissed by court late r&b star...   \n",
              "26  electrolux to export europe jobs electrolux sa...   \n",
              "27  european losses hit gm s profits general motor...   \n",
              "28  imf  cuts  german growth estimate the internat...   \n",
              "29  beer giant swallows russian firm brewing giant...   \n",
              "\n",
              "                                         pred_summary  \\\n",
              "0   ray has been nominated in six oscar categories...   \n",
              "1   changyu said in a statement to the shenzhen st...   \n",
              "2   6% us oil prices have fallen by 6% driven down...   \n",
              "3   members of van gogh s family and celebrities a...   \n",
              "4   lleyton hewitt suffered a shock defeat to tayl...   \n",
              "5   microsoft gets the blogging bug software giant...   \n",
              "6   In a report it said there were more than 32 mi...   \n",
              "7   brian head welch told a radio station in calif...   \n",
              "8   the achievement award was created to commemora...   \n",
              "9   Mitglieder of the uk s second largest building...   \n",
              "10  phillips idowu landed 17.30m at the british tr...   \n",
              "11  ray has been nominated in six oscar categories...   \n",
              "12  Everton striker james beattie has been declare...   \n",
              "13  In 2005 it will rise toward 13 000 predicted m...   \n",
              "14  sam allardyce has signed roma defender vincent...   \n",
              "15  terry melcher died on friday night at his home...   \n",
              "16  Lehmann is understudy to oliver kahn in the ge...   \n",
              "17  frank capra s 1946 movie starring james stewar...   \n",
              "18  In october mr straw and his spanish counterpar...   \n",
              "19  fcc was looking into 50 shows including those ...   \n",
              "20  mathew tait has been named as a centre in engl...   \n",
              "21  mccririck was ordered to leave the house on mo...   \n",
              "22  nicolas almagro becomes the fifth spaniard to ...   \n",
              "23  dick clark is in hospital in los angeles after...   \n",
              "24  ms short attacks us over tsunami aid former ca...   \n",
              "25  aaliyah s record company has failed in an atte...   \n",
              "26  swedish firm the world s largest maker of home...   \n",
              "27  gm s profits general motors (gm) saw its net p...   \n",
              "28  Imf cuts german growth estimate the internatio...   \n",
              "29  russian firm brewing giant inbev has agreed to...   \n",
              "\n",
              "                                          ref_summary  \\\n",
              "0   ray dvd beats box office takings with a combin...   \n",
              "1   Italian liqueur maker illva saronno has agreed...   \n",
              "2   Light crude oil futures fell $2.86 to $41.32 a...   \n",
              "3   Theo van gogh was shot and stabbed to death in...   \n",
              "4   lleyton hewitt suffered a shock defeat to tayl...   \n",
              "5   msn spaces is free to anyone with a hotmail or...   \n",
              "6   The number of people and businesses connected ...   \n",
              "7   rock group korn s guitarist quits the guitaris...   \n",
              "8   leonardo dicaprio honoured at the santa barbar...   \n",
              "9   britannia members will share £42m windfall wit...   \n",
              "10  jonathan edwards believes phillips idowu can t...   \n",
              "11  ray dvd beats box office takings with a combin...   \n",
              "12  James beattie is not believed to be as serious...   \n",
              "13  Nikkei index of leading shares gained 7.6% dur...   \n",
              "14  bolton boss sam allardyce has signed roma defe...   \n",
              "15  byrds producer  terry melcher dies at 62 after...   \n",
              "16  lehmann is understudy to oliver kahn in the ge...   \n",
              "17  musical treatment for capra film the classic f...   \n",
              "18  Two-day summit at foreign secretary s official...   \n",
              "19  viacom has paid out $3.5m (£1.8m) to end inves...   \n",
              "20  teenager tait picked for england newcastle s t...   \n",
              "21  racing pundit john mccririck has become the la...   \n",
              "22  Unseeded nicolas almagro becomes fifth spaniar...   \n",
              "23  us tv host clark suffers stroke veteran us tel...   \n",
              "24  Former cabinet minister clare short criticises...   \n",
              "25  aaliyah had completed a music video when the p...   \n",
              "26  electrolux saw its shares rise 14% on t Tuesda...   \n",
              "27  gm earned $630m (£481.5m) in the october-to-de...   \n",
              "28  imf will also reduce its growth estimate for t...   \n",
              "29  inbev agrees to buy alfa-eco stake in sun inte...   \n",
              "\n",
              "                                  pred_interpretation  \\\n",
              "0   ray has been nominated in six oscar categories...   \n",
              "1   changyu says illva will pay 481.42m yuan ($58....   \n",
              "2   6% us oil prices have fallen by 6% driven down...   \n",
              "3   van gogh s family and celebrities attended the...   \n",
              "4         hewitt suffered shock defeat to taylor dent   \n",
              "5   microsoft is launching a test service to allow...   \n",
              "6   the us is still behind compared to other natio...   \n",
              "7   brian head welch told radio station that his b...   \n",
              "8   leonardo dicaprio 's exceptional career has be...   \n",
              "9   members of the uk s second largest building so...   \n",
              "10  phillips idowu landed 17.30m at the british tr...   \n",
              "11  ray has been nominated in six oscar categories...   \n",
              "12  james beattie has been declared fit for traini...   \n",
              "13    morgan stanley equity strategist naoki kamiyama   \n",
              "14  sam allardyce signs roma defender vincent cand...   \n",
              "15  terry melcher died at his home in beverly hill...   \n",
              "16  jurgen klinsmann has warned lehmann he may hav...   \n",
              "17  frank capra s 1946 movie starring james stewar...   \n",
              "18  mr straw and moratinos agreed to establish a b...   \n",
              "19  fcc was looking into 50 shows including those ...   \n",
              "20  mathew tait named as centre in england team to...   \n",
              "21              jackie stallone 's mother was evicted   \n",
              "22  nicolas almagro is the fifth spaniard to reach...   \n",
              "23  dick clark is in hospital in los angeles after...   \n",
              "24  former cabinet minister clare short criticised...   \n",
              "25  aaliyah 's record company has failed to sue th...   \n",
              "26  swedish firm to relocate about 10 of its 27 pl...   \n",
              "27  gm s net profits fell 37% in the last quarter ...   \n",
              "28  international monetary fund to cut german grow...   \n",
              "29     inbev to buy alfa-eco s stake in sun interbrew   \n",
              "\n",
              "                                   ref_interpretation pred_topics  \\\n",
              "0   ray dvd beats box office takings with a combin...          []   \n",
              "1   Italian liqueur maker illva saronno agreed to ...          []   \n",
              "2   Light crude oil futures fell $2.86 to $41.32 a...          []   \n",
              "3   Theo van gogh was shot and stabbed to death in...          []   \n",
              "4          hewitt suffers shock defeat to taylor dent          []   \n",
              "5   msn spaces is free to anyone with a hotmail or...          []   \n",
              "6   The number of people and businesses connected ...          []   \n",
              "7               korn s guitarist quits music business          []   \n",
              "8   leonardo dicaprio was presented with the award...          []   \n",
              "9   britannia will share £42m windfall with 100,00...          []   \n",
              "10  jonathan edwards believes idowu can prove his ...          []   \n",
              "11  ray dvd beats box office takings with a combin...          []   \n",
              "12  James beattie is not believed to be as serious...          []   \n",
              "13  Nikkei index of leading shares gained 7.6% dur...          []   \n",
              "14  sam allardyce signs roma defender vincent cand...          []   \n",
              "15  byrds producer terry melcher died at 62 after ...          []   \n",
              "16  klinsmann says it will be difficult for any of...          []   \n",
              "17  jon thoday is working with steve brown who wro...          []   \n",
              "18  most gibraltarians say they want to remain bri...          []   \n",
              "19  viacom has paid out $3.5m (£1.8m) to end inves...          []   \n",
              "20  mathew tait being named centre in england team...          []   \n",
              "21                                  mccririck and bez          []   \n",
              "22  nicolas almagro beat mariano zabaleta 6-7 6-4 ...          []   \n",
              "23           dick clark is in hospital in Los Angeles          []   \n",
              "24  former cabinet minister clare short criticises...          []   \n",
              "25  aaliyah had completed a music video when the p...          []   \n",
              "26  electrolux shares rise 14% on t Tuesday after ...          []   \n",
              "27                   gm in the fourth quarter of 2003          []   \n",
              "28  imf will also reduce its growth estimate for t...          []   \n",
              "29  inbev agrees to buy alfa-eco stake in sun inte...          []   \n",
              "\n",
              "                                           ref_topics  \n",
              "0                      [ray, dvd, oscar, film, actor]  \n",
              "1               [changyu, chinese, china, yuan, wine]  \n",
              "2            [futures, nymex, oil, crude, refineries]  \n",
              "3             [gogh, stabbed, amsterdam, murder, van]  \n",
              "4             [hewitt, dent, lleyton, taylor, finals]  \n",
              "5            [msn, hotmail, blogs, spaces, messenger]  \n",
              "6   [broadband, telecoms, connections, number, bus...  \n",
              "7                [korn, guitarist, quits, band, quit]  \n",
              "8        [leonardo, dicaprio, actor, award, scorsese]  \n",
              "9        [britannia, windfall, payouts, members, 000]  \n",
              "10       [edwards, phillips, idowu, jonathan, jumper]  \n",
              "11                     [ray, dvd, oscar, film, actor]  \n",
              "12           [beattie, injured, james, hurt, assault]  \n",
              "13         [nikkei, markets, optimism, index, shares]  \n",
              "14           [roma, bolton, candela, luigi, defender]  \n",
              "15              [manson, byrds, dies, terry, murders]  \n",
              "16        [lehmann, kahn, klinsmann, keeper, germany]  \n",
              "17           [musical, capra, theatre, spend, spends]  \n",
              "18  [gibraltarians, kent, summit, british, referen...  \n",
              "19                [viacom, fcc, paid, 5m, settlement]  \n",
              "20       [tait, newcastle, cardiff, centre, midfield]  \n",
              "21  [housemates, contestant, evicted, mccririck, j...  \n",
              "22           [rafael, nadal, almagro, mariano, match]  \n",
              "23              [clark, stroke, tv, dick, television]  \n",
              "24    [resigned, secretary, minister, short, tsunami]  \n",
              "25         [aaliyah, singer, crashed, bahamas, plane]  \n",
              "26  [electrolux, shares, company, restructuring, c...  \n",
              "27                    [gm, revenues, losses, 5m, 8bn]  \n",
              "28     [imf, eurozone, economy, unemployment, growth]  \n",
              "29               [inbev, brewer, brewing, alfa, beer]  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-753a3f68-4a88-41a5-a496-4546d28a173d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>input_text</th>\n",
              "      <th>pred_summary</th>\n",
              "      <th>ref_summary</th>\n",
              "      <th>pred_interpretation</th>\n",
              "      <th>ref_interpretation</th>\n",
              "      <th>pred_topics</th>\n",
              "      <th>ref_topics</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ray dvd beats box office takings oscar-nominat...</td>\n",
              "      <td>ray has been nominated in six oscar categories...</td>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td>ray has been nominated in six oscar categories...</td>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[ray, dvd, oscar, film, actor]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>chinese wine tempts italy s illva italy s illv...</td>\n",
              "      <td>changyu said in a statement to the shenzhen st...</td>\n",
              "      <td>Italian liqueur maker illva saronno has agreed...</td>\n",
              "      <td>changyu says illva will pay 481.42m yuan ($58....</td>\n",
              "      <td>Italian liqueur maker illva saronno agreed to ...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[changyu, chinese, china, yuan, wine]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>mild winter drives us oil down 6% us oil price...</td>\n",
              "      <td>6% us oil prices have fallen by 6% driven down...</td>\n",
              "      <td>Light crude oil futures fell $2.86 to $41.32 a...</td>\n",
              "      <td>6% us oil prices have fallen by 6% driven down...</td>\n",
              "      <td>Light crude oil futures fell $2.86 to $41.32 a...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[futures, nymex, oil, crude, refineries]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>dutch watch van gogh s last film the last film...</td>\n",
              "      <td>members of van gogh s family and celebrities a...</td>\n",
              "      <td>Theo van gogh was shot and stabbed to death in...</td>\n",
              "      <td>van gogh s family and celebrities attended the...</td>\n",
              "      <td>Theo van gogh was shot and stabbed to death in...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[gogh, stabbed, amsterdam, murder, van]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>hewitt falls to dent in adelaide lleyton hewit...</td>\n",
              "      <td>lleyton hewitt suffered a shock defeat to tayl...</td>\n",
              "      <td>lleyton hewitt suffered a shock defeat to tayl...</td>\n",
              "      <td>hewitt suffered shock defeat to taylor dent</td>\n",
              "      <td>hewitt suffers shock defeat to taylor dent</td>\n",
              "      <td>[]</td>\n",
              "      <td>[hewitt, dent, lleyton, taylor, finals]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>microsoft gets the blogging bug software giant...</td>\n",
              "      <td>microsoft gets the blogging bug software giant...</td>\n",
              "      <td>msn spaces is free to anyone with a hotmail or...</td>\n",
              "      <td>microsoft is launching a test service to allow...</td>\n",
              "      <td>msn spaces is free to anyone with a hotmail or...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[msn, hotmail, blogs, spaces, messenger]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>broadband steams ahead in the us more and more...</td>\n",
              "      <td>In a report it said there were more than 32 mi...</td>\n",
              "      <td>The number of people and businesses connected ...</td>\n",
              "      <td>the us is still behind compared to other natio...</td>\n",
              "      <td>The number of people and businesses connected ...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[broadband, telecoms, connections, number, bus...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>rock group korn s guitarist quits the guitaris...</td>\n",
              "      <td>brian head welch told a radio station in calif...</td>\n",
              "      <td>rock group korn s guitarist quits the guitaris...</td>\n",
              "      <td>brian head welch told radio station that his b...</td>\n",
              "      <td>korn s guitarist quits music business</td>\n",
              "      <td>[]</td>\n",
              "      <td>[korn, guitarist, quits, band, quit]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>career honour for actor dicaprio actor leonard...</td>\n",
              "      <td>the achievement award was created to commemora...</td>\n",
              "      <td>leonardo dicaprio honoured at the santa barbar...</td>\n",
              "      <td>leonardo dicaprio 's exceptional career has be...</td>\n",
              "      <td>leonardo dicaprio was presented with the award...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[leonardo, dicaprio, actor, award, scorsese]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>britannia members  £42m windfall more than 800...</td>\n",
              "      <td>Mitglieder of the uk s second largest building...</td>\n",
              "      <td>britannia members will share £42m windfall wit...</td>\n",
              "      <td>members of the uk s second largest building so...</td>\n",
              "      <td>britannia will share £42m windfall with 100,00...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[britannia, windfall, payouts, members, 000]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>edwards tips idowu for euro gold world outdoor...</td>\n",
              "      <td>phillips idowu landed 17.30m at the british tr...</td>\n",
              "      <td>jonathan edwards believes phillips idowu can t...</td>\n",
              "      <td>phillips idowu landed 17.30m at the british tr...</td>\n",
              "      <td>jonathan edwards believes idowu can prove his ...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[edwards, phillips, idowu, jonathan, jumper]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>ray dvd beats box office takings oscar-nominat...</td>\n",
              "      <td>ray has been nominated in six oscar categories...</td>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td>ray has been nominated in six oscar categories...</td>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[ray, dvd, oscar, film, actor]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>beattie return calms attack fears everton stri...</td>\n",
              "      <td>Everton striker james beattie has been declare...</td>\n",
              "      <td>James beattie is not believed to be as serious...</td>\n",
              "      <td>james beattie has been declared fit for traini...</td>\n",
              "      <td>James beattie is not believed to be as serious...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[beattie, injured, james, hurt, assault]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>stock market eyes japan recovery japanese shar...</td>\n",
              "      <td>In 2005 it will rise toward 13 000 predicted m...</td>\n",
              "      <td>Nikkei index of leading shares gained 7.6% dur...</td>\n",
              "      <td>morgan stanley equity strategist naoki kamiyama</td>\n",
              "      <td>Nikkei index of leading shares gained 7.6% dur...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[nikkei, markets, optimism, index, shares]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>candela completes bolton switch bolton boss sa...</td>\n",
              "      <td>sam allardyce has signed roma defender vincent...</td>\n",
              "      <td>bolton boss sam allardyce has signed roma defe...</td>\n",
              "      <td>sam allardyce signs roma defender vincent cand...</td>\n",
              "      <td>sam allardyce signs roma defender vincent cand...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[roma, bolton, candela, luigi, defender]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>byrds producer melcher dies at 62 record produ...</td>\n",
              "      <td>terry melcher died on friday night at his home...</td>\n",
              "      <td>byrds producer  terry melcher dies at 62 after...</td>\n",
              "      <td>terry melcher died at his home in beverly hill...</td>\n",
              "      <td>byrds producer terry melcher died at 62 after ...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[manson, byrds, dies, terry, murders]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>klinsmann issues lehmann warning germany coach...</td>\n",
              "      <td>Lehmann is understudy to oliver kahn in the ge...</td>\n",
              "      <td>lehmann is understudy to oliver kahn in the ge...</td>\n",
              "      <td>jurgen klinsmann has warned lehmann he may hav...</td>\n",
              "      <td>klinsmann says it will be difficult for any of...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[lehmann, kahn, klinsmann, keeper, germany]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>musical treatment for capra film the classic f...</td>\n",
              "      <td>frank capra s 1946 movie starring james stewar...</td>\n",
              "      <td>musical treatment for capra film the classic f...</td>\n",
              "      <td>frank capra s 1946 movie starring james stewar...</td>\n",
              "      <td>jon thoday is working with steve brown who wro...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[musical, capra, theatre, spend, spends]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>talks held on gibraltar s future two days of t...</td>\n",
              "      <td>In october mr straw and his spanish counterpar...</td>\n",
              "      <td>Two-day summit at foreign secretary s official...</td>\n",
              "      <td>mr straw and moratinos agreed to establish a b...</td>\n",
              "      <td>most gibraltarians say they want to remain bri...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[gibraltarians, kent, summit, british, referen...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>&amp;#163;1.8m indecency fine for viacom media gia...</td>\n",
              "      <td>fcc was looking into 50 shows including those ...</td>\n",
              "      <td>viacom has paid out $3.5m (£1.8m) to end inves...</td>\n",
              "      <td>fcc was looking into 50 shows including those ...</td>\n",
              "      <td>viacom has paid out $3.5m (£1.8m) to end inves...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[viacom, fcc, paid, 5m, settlement]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>teenager tait picked for england newcastle s t...</td>\n",
              "      <td>mathew tait has been named as a centre in engl...</td>\n",
              "      <td>teenager tait picked for england newcastle s t...</td>\n",
              "      <td>mathew tait named as centre in england team to...</td>\n",
              "      <td>mathew tait being named centre in england team...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[tait, newcastle, cardiff, centre, midfield]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>mccririck out of big brother show racing pundi...</td>\n",
              "      <td>mccririck was ordered to leave the house on mo...</td>\n",
              "      <td>racing pundit john mccririck has become the la...</td>\n",
              "      <td>jackie stallone 's mother was evicted</td>\n",
              "      <td>mccririck and bez</td>\n",
              "      <td>[]</td>\n",
              "      <td>[housemates, contestant, evicted, mccririck, j...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>almagro continues spanish surge unseeded nicol...</td>\n",
              "      <td>nicolas almagro becomes the fifth spaniard to ...</td>\n",
              "      <td>Unseeded nicolas almagro becomes fifth spaniar...</td>\n",
              "      <td>nicolas almagro is the fifth spaniard to reach...</td>\n",
              "      <td>nicolas almagro beat mariano zabaleta 6-7 6-4 ...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[rafael, nadal, almagro, mariano, match]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>us tv host clark suffers stroke veteran us tel...</td>\n",
              "      <td>dick clark is in hospital in los angeles after...</td>\n",
              "      <td>us tv host clark suffers stroke veteran us tel...</td>\n",
              "      <td>dick clark is in hospital in los angeles after...</td>\n",
              "      <td>dick clark is in hospital in Los Angeles</td>\n",
              "      <td>[]</td>\n",
              "      <td>[clark, stroke, tv, dick, television]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>short attacks us over tsunami aid former cabin...</td>\n",
              "      <td>ms short attacks us over tsunami aid former ca...</td>\n",
              "      <td>Former cabinet minister clare short criticises...</td>\n",
              "      <td>former cabinet minister clare short criticised...</td>\n",
              "      <td>former cabinet minister clare short criticises...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[resigned, secretary, minister, short, tsunami]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>aaliyah claim dismissed by court late r&amp;b star...</td>\n",
              "      <td>aaliyah s record company has failed in an atte...</td>\n",
              "      <td>aaliyah had completed a music video when the p...</td>\n",
              "      <td>aaliyah 's record company has failed to sue th...</td>\n",
              "      <td>aaliyah had completed a music video when the p...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[aaliyah, singer, crashed, bahamas, plane]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>electrolux to export europe jobs electrolux sa...</td>\n",
              "      <td>swedish firm the world s largest maker of home...</td>\n",
              "      <td>electrolux saw its shares rise 14% on t Tuesda...</td>\n",
              "      <td>swedish firm to relocate about 10 of its 27 pl...</td>\n",
              "      <td>electrolux shares rise 14% on t Tuesday after ...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[electrolux, shares, company, restructuring, c...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>european losses hit gm s profits general motor...</td>\n",
              "      <td>gm s profits general motors (gm) saw its net p...</td>\n",
              "      <td>gm earned $630m (£481.5m) in the october-to-de...</td>\n",
              "      <td>gm s net profits fell 37% in the last quarter ...</td>\n",
              "      <td>gm in the fourth quarter of 2003</td>\n",
              "      <td>[]</td>\n",
              "      <td>[gm, revenues, losses, 5m, 8bn]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>imf  cuts  german growth estimate the internat...</td>\n",
              "      <td>Imf cuts german growth estimate the internatio...</td>\n",
              "      <td>imf will also reduce its growth estimate for t...</td>\n",
              "      <td>international monetary fund to cut german grow...</td>\n",
              "      <td>imf will also reduce its growth estimate for t...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[imf, eurozone, economy, unemployment, growth]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>beer giant swallows russian firm brewing giant...</td>\n",
              "      <td>russian firm brewing giant inbev has agreed to...</td>\n",
              "      <td>inbev agrees to buy alfa-eco stake in sun inte...</td>\n",
              "      <td>inbev to buy alfa-eco s stake in sun interbrew</td>\n",
              "      <td>inbev agrees to buy alfa-eco stake in sun inte...</td>\n",
              "      <td>[]</td>\n",
              "      <td>[inbev, brewer, brewing, alfa, beer]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-753a3f68-4a88-41a5-a496-4546d28a173d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-753a3f68-4a88-41a5-a496-4546d28a173d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-753a3f68-4a88-41a5-a496-4546d28a173d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-936cc648-7a63-4e3f-9bf2-3f3d50180b09\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-936cc648-7a63-4e3f-9bf2-3f3d50180b09')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-936cc648-7a63-4e3f-9bf2-3f3d50180b09 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"try_display_df(\\\"Top_predicted_topics_after_beam\\\", top_df)\",\n  \"rows\": 30,\n  \"fields\": [\n    {\n      \"column\": \"input_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          \"imf  cuts  german growth estimate the international monetary fund is to cut its 2005 growth forecast for the german economy from 1.8% to 0.8%  the financial times deutschland reported.  the imf will also reduce its growth estimate for the 12-member eurozone economy from 2.2% to 1.6%  the newspaper reported. the german economy has been faltering  with unemployment levels rising to a seventy-year high of 5.2 million. its sluggish performance continues to hamper the entire eurozone.  the imf s draft world economic outlook - due to be published in april - would point to a marked deterioration in germany s economy  the ft report said.  in september  the imf had said that german growth for the current year would be 1.8%. the imf has also revised eurozone forecasts  the paper said  taking into account high oil prices  the strength of the euro and weak demand in many of the world s leading economies. europe s economic difficulties have been highlighted by the organisation for economic co-operation and development  which argued in a report published on tuesday that the continent could only achieve us living standards by freeing up its labour markets.  the eurozone does not look like it has a self-sustaining recovery   james carrick  an economist with abn amro  told the newspaper.  it is too dependant on the rest of the world.\",\n          \"musical treatment for capra film the classic film it s a wonderful life is to be turned into a musical by the producer of the controversial hit show jerry springer - the opera.  frank capra s 1946 movie starring james stewart  is being turned into a \\u00a37m musical by producer jon thoday. he is working with steve brown  who wrote the award-winning musical spend spend spend. a spokeswoman said the plans were in the  very early stages   with no cast  opening date or theatre announced.  a series of workshops have been held in london  and on wednesday a cast of singers unveiled the musical to a select group of potential investors. mr thoday said the idea of turning the film into a musical had been an ambition of his for almost 20 years. it s a wonderful life was based on a short story  the greatest gift  by philip van doren stern. mr thoday managed to buy the rights to the story from van doren stern s family in 1999  following mr brown s success with spend spend spend. he later secured the film rights from paramount  enabling them to use the title it s a wonderful life.\",\n          \"stock market eyes japan recovery japanese shares have ended the year at their highest level since 13 july amidst hopes of an economic recovery during 2005.  the nikkei index of leading shares gained 7.6% during the year to close at 11 488.76 points. in 2005 it  will rise toward 13 000   predicted morgan stanley equity strategist naoki kamiyama. the optimism in the financial markets contrast sharply with pessimism in the japanese business community. earlier this month  the quarterly tankan survey of japanese manufacturers found that business confidence had weakened for the first time since march 2003.  slower economic growth  rising oil prices  a stronger yen and weaker exports were blamed for the fall in confidence. despite this  traders expect strength in the global economy to benefit japan  which has been close to sliding into recession in recent months. structural reform within japan and an anticipated end to the banking sector s bad debt problems should also help  they say.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          \"Imf cuts german growth estimate the international monetary fund is to cut its 2005 growth forecast for the german economy from 1.8% to 0.8% the financial times deutschland reported . the imf has also revised eurozone forecasts the paper said taking into account high oil prices the strength of the euro and weak demand in many of the world s leading economies .\",\n          \"frank capra s 1946 movie starring james stewart is being turned into a musical by producer jon thoday . he is working with steve brown who wrote the award-winning musical spend spend spend . it s a wonderful life was based on a short story the greatest gift by philip van doren stern .\",\n          \"In 2005 it will rise toward 13 000 predicted morgan stanley equity strategist naoki kamiyama . optimism in the financial markets contrast sharply with pessimism in the japanese business community . slower economic growth rising oil prices a stronger yen and weaker exports were blamed for the fall in confidence .\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ref_summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          \"imf will also reduce its growth estimate for the 12-member eurozone economy from 2.2% to 1.6% . Unemployment levels rise to a seventy-year high of 5.2 million .\",\n          \"musical treatment for capra film the classic film it s a wonderful life is to be turned into a musical by producer jon thoday . He is working with steve brown who wrote the award-winning musical spend spend spends spend spend spend . The musical is to open in the early stages with no opening date or theatre announced .\",\n          \"Nikkei index of leading shares gained 7.6% during the year to close at 11 488.76 points . The optimism in the financial markets contrast sharply with pessimism in the japanese business community .\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_interpretation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          \"international monetary fund to cut german growth forecast for german economy from 1.8% to 0.8%\",\n          \"frank capra s 1946 movie starring james stewart is being turned into a musical by producer jon thoday\",\n          \"morgan stanley equity strategist naoki kamiyama\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ref_interpretation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          \"imf will also reduce its growth estimate for the 12-member eurozone economy from 2.2% to 1.6%\",\n          \"jon thoday is working with steve brown who wrote the award-winning musical spend spend spend spend spend\",\n          \"Nikkei index of leading shares gained 7.6% during the year to close at 11 488.76 points .\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_topics\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ref_topics\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved mismatches_after_beam.csv (open from Files). Total mismatches by summary: 112\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Top_predicted_topics_after_beam ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [topic, count]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2bb52325-0d73-4526-8db8-fbc82c20a478\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>topic</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2bb52325-0d73-4526-8db8-fbc82c20a478')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2bb52325-0d73-4526-8db8-fbc82c20a478 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2bb52325-0d73-4526-8db8-fbc82c20a478');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_b7efd1a5-9cd4-41bd-9342-6842ccf6d344\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('top_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b7efd1a5-9cd4-41bd-9342-6842ccf6d344 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('top_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "top_df",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell A: Load predictions CSV and metrics JSON (robust)\n",
        "import os, json, math, ast, re\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from pathlib import Path\n",
        "\n",
        "# helper search for files\n",
        "def find_file(candidates):\n",
        "    for c in candidates:\n",
        "        if os.path.exists(c):\n",
        "            return c\n",
        "    # try anywhere in /content\n",
        "    for root,_,files in os.walk(\"/content\"):\n",
        "        for f in files:\n",
        "            if f.lower() in [x.lower() for x in candidates]:\n",
        "                return os.path.join(root, f)\n",
        "    return None\n",
        "\n",
        "csv_candidates = [\n",
        "    \"student_predictions_beam_augmented.csv\",\n",
        "    \"student_predictions_beam.csv\",\n",
        "    \"student_predictions_beam.csv\",\n",
        "    \"student_predictions.csv\",\n",
        "    \"student_eval_predictions_full.csv\",\n",
        "    \"student_eval_predictions.csv\"\n",
        "]\n",
        "metrics_candidates = [\n",
        "    \"student_beam_metrics.json\",\n",
        "    \"student_eval_metrics.json\",\n",
        "    \"student_eval_metrics.json\",\n",
        "    \"student_beam_metrics.json\"\n",
        "]\n",
        "\n",
        "csv_path = find_file(csv_candidates)\n",
        "metrics_path = find_file(metrics_candidates)\n",
        "\n",
        "print(\"Predictions CSV:\", csv_path)\n",
        "print(\"Metrics JSON:\", metrics_path)\n",
        "\n",
        "if csv_path is None:\n",
        "    raise FileNotFoundError(\"No predictions CSV found. Run the beam/augmentation cells first (they produce student_predictions_beam_augmented.csv).\")\n",
        "\n",
        "df = pd.read_csv(csv_path)\n",
        "# ensure columns exist\n",
        "for c in [\"input_text\",\"target_text\",\"pred_summary\",\"ref_summary\",\"pred_interpretation\",\"ref_interpretation\",\"pred_topics\",\"ref_topics\"]:\n",
        "    if c not in df.columns:\n",
        "        df[c] = \"\"\n",
        "\n",
        "metrics = {}\n",
        "if metrics_path:\n",
        "    with open(metrics_path, \"r\") as f:\n",
        "        metrics = json.load(f)\n",
        "\n",
        "# Basic info\n",
        "n_rows = len(df)\n",
        "print(f\"Loaded {n_rows} rows from predictions.\")\n",
        "print(\"Keys in metrics JSON:\", list(metrics.keys()))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_RWEcahDNHue",
        "outputId": "446e7b3a-6a4a-42b4-a26c-c9fbed079d57"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predictions CSV: student_predictions_beam_augmented.csv\n",
            "Metrics JSON: student_beam_metrics.json\n",
            "Loaded 112 rows from predictions.\n",
            "Keys in metrics JSON: ['rouge_summary_percent', 'rouge_interpretation_percent', 'topic_metrics', 'exact_match_full_target', 'generation_mode']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell B: High-level stats and model/runtime info\n",
        "import shutil, torch\n",
        "\n",
        "# file sizes & saved model dir size if exists\n",
        "model_dirs = [\"./student_model_final\",\"./student_model\"]\n",
        "model_dir_found = next((d for d in model_dirs if os.path.isdir(d)), None)\n",
        "\n",
        "def folder_size(path):\n",
        "    total = 0\n",
        "    for root, dirs, files in os.walk(path):\n",
        "        for f in files:\n",
        "            try:\n",
        "                total += os.path.getsize(os.path.join(root, f))\n",
        "            except Exception:\n",
        "                pass\n",
        "    return total\n",
        "\n",
        "info = {\n",
        "    \"rows\": n_rows,\n",
        "    \"pred_csv\": csv_path,\n",
        "    \"metrics_json\": metrics_path,\n",
        "    \"gpu_available\": torch.cuda.is_available(),\n",
        "    \"cuda_device_count\": torch.cuda.device_count() if torch.cuda.is_available() else 0,\n",
        "    \"model_dir\": model_dir_found,\n",
        "    \"model_dir_size_bytes\": folder_size(model_dir_found) if model_dir_found else None,\n",
        "    \"inference_time_s\": metrics.get(\"inference_time_s\"),\n",
        "    \"estimated_energy_Wh\": metrics.get(\"estimated_energy_Wh\")\n",
        "}\n",
        "\n",
        "import pprint\n",
        "pprint.pprint(info, width=120)\n",
        "\n",
        "# display a small table of counts\n",
        "counts = {\n",
        "    \"total_rows\": n_rows,\n",
        "    \"non_empty_pred\": int(df[\"pred_summary\"].astype(bool).sum()) if \"pred_summary\" in df.columns else int(df[\"student_pred\"].astype(bool).sum()),\n",
        "    \"non_empty_ref_summary\": int(df[\"ref_summary\"].astype(bool).sum())\n",
        "}\n",
        "print(\"\\nQuick counts:\")\n",
        "pprint.pprint(counts)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lDcKDRp0NJfe",
        "outputId": "69b35812-984d-4287-a544-0eaa3d892bf2"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'cuda_device_count': 1,\n",
            " 'estimated_energy_Wh': None,\n",
            " 'gpu_available': True,\n",
            " 'inference_time_s': None,\n",
            " 'metrics_json': 'student_beam_metrics.json',\n",
            " 'model_dir': './student_model_final',\n",
            " 'model_dir_size_bytes': 245286314,\n",
            " 'pred_csv': 'student_predictions_beam_augmented.csv',\n",
            " 'rows': 112}\n",
            "\n",
            "Quick counts:\n",
            "{'non_empty_pred': 112, 'non_empty_ref_summary': 112, 'total_rows': 112}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell C: Plot ROUGE bars (use metrics JSON if present, else compute here)\n",
        "import matplotlib.pyplot as plt\n",
        "from rouge_score import rouge_scorer\n",
        "import numpy as np\n",
        "\n",
        "# Try to load ROUGE from metrics JSON (percent)\n",
        "rouge_summary = metrics.get(\"rouge_summary_percent\") or metrics.get(\"rouge_summary_reference\") or None\n",
        "rouge_interp  = metrics.get(\"rouge_interpretation_percent\") or metrics.get(\"rouge_interpretation_reference\") or None\n",
        "\n",
        "# If metrics JSON missing or doesn't include percents, compute from df\n",
        "def compute_rouge_from_df(refs, preds):\n",
        "    scorer = rouge_scorer.RougeScorer([\"rouge1\",\"rouge2\",\"rougeL\"], use_stemmer=True)\n",
        "    scores = {\"rouge1\":[], \"rouge2\":[], \"rougeL\":[]}\n",
        "    for r,p in zip(refs, preds):\n",
        "        if not r or not p:\n",
        "            continue\n",
        "        sc = scorer.score(str(r), str(p))\n",
        "        for k in scores:\n",
        "            scores[k].append(sc[k].fmeasure)\n",
        "    return {k: float(np.mean(v))*100 if v else 0.0 for k,v in scores.items()}\n",
        "\n",
        "if rouge_summary is None:\n",
        "    rouge_summary = compute_rouge_from_df(df[\"ref_summary\"].tolist(), df[\"pred_summary\"].tolist())\n",
        "if rouge_interp is None:\n",
        "    rouge_interp = compute_rouge_from_df(df[\"ref_interpretation\"].tolist(), df[\"pred_interpretation\"].tolist())\n",
        "\n",
        "print(\"ROUGE Summary (%):\", rouge_summary)\n",
        "print(\"ROUGE Interpretation (%):\", rouge_interp)\n",
        "\n",
        "# bar plot for summary\n",
        "labels = list(rouge_summary.keys())\n",
        "vals = [rouge_summary[k] for k in labels]\n",
        "plt.figure(figsize=(6,4))\n",
        "plt.bar(labels, vals)\n",
        "plt.title(\"ROUGE (Summary) %\")\n",
        "plt.ylabel(\"Percent\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# bar plot for interpretation\n",
        "labels2 = list(rouge_interp.keys())\n",
        "vals2 = [rouge_interp[k] for k in labels2]\n",
        "plt.figure(figsize=(6,4))\n",
        "plt.bar(labels2, vals2)\n",
        "plt.title(\"ROUGE (Interpretation) %\")\n",
        "plt.ylabel(\"Percent\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 832
        },
        "id": "h-WWmlwwNLfe",
        "outputId": "2a99305e-c8cb-4bcd-80af-a719857aec9f"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ROUGE Summary (%): {'rouge1': 60.11393714458434, 'rouge2': 48.00717703427163, 'rougeL': 51.77960561252015}\n",
            "ROUGE Interpretation (%): {'rouge1': 39.75544940145138, 'rouge2': 28.175466676419564, 'rougeL': 37.53284698036836}\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAk4AAAGGCAYAAACNCg6xAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAL09JREFUeJzt3XlcVeW+x/EvKKMIOAGagDjkmGlaSGqaUajldaBSM6Xy5KljlpppnAaH45TmUOeg3kzFCo5mN03riidNzUxNLadKDQ8GpqA5gKICwnP/OC/2bQfYAtG9kc/79Vqvl+tZz3rWb+9W+W2tZ63tYowxAgAAwB9ydXQBAAAAFQXBCQAAwCKCEwAAgEUEJwAAAIsITgAAABYRnAAAACwiOAEAAFhEcAIAALCI4AQAAGARwQmAU0tLS5Onp6e2bt3q6FJuGklJSfLx8dGpU6ccXQpQ4RCcACcUHx8vFxcX21K1alXdcssteuKJJ/TLL78Uu48xRu+//77uuece+fv7y9vbW7fddpsmTZqk7OzsIv0bNGighx56qNixdu3aJRcXF8XHxxfZtm/fPj355JMKCwuTp6enfHx81KZNG40dO1b//ve/7fo+8cQTdp/jt4unp6el72LSpEkKDw9Xx44d7drXrFmjLl26KCAgQN7e3mrYsKEeffRRJSUlWRq3MuvevbsaN26sadOmWer/ww8/qHPnzqpevbrat2+vbdu2Fekze/ZstWzZUleuXCnvcgGnUtXRBQAo2aRJkxQWFqbLly9r+/btio+P11dffaUDBw7YBY/8/Hw99thj+vDDD9W5c2dNmDBB3t7e2rJliyZOnKgVK1Zo/fr1CgwMvKZ6Fi5cqGeffVa1a9fWoEGD1KxZM125ckUHDhzQe++9p7lz5+rSpUuqUqWKbR8PDw+9++67Rcb6bZ+SnDp1SkuXLtXSpUvt2t9880299NJL6tKli2JjY+Xt7a3k5GStX79ey5YtU/fu3a/pc1YGf/7znzVmzBhNnDhR1atXL7Fffn6++vXrp5o1a2rmzJlavXq1evfureTkZPn6+kqSTp48qUmTJunDDz9U1ar8tYKbnAHgdJYsWWIkmZ07d9q1jxs3zkgyy5cvt2ufOnWqkWTGjBlTZKzVq1cbV1dX0717d7v20NBQ8+CDDxZ7/J07dxpJZsmSJba2rVu3mipVqph77rnHZGVlFdnn0qVL5tVXXzVXrlyxtcXExJhq1ar94ectyezZs42Xl5c5f/68rS0vL8/4+vqa+++/v9h9MjIyyny8iiovL8/k5OSUap+MjAxTpUoVs2jRoqv2+/HHH40k8/PPPxtjjMnOzjZeXl4mKSnJ1mfo0KGmV69epS8cqIC4VQdUIJ07d5YkHTlyxNZ26dIlzZw5U7feemuxt1569eqlmJgYJSUlafv27WU+9sSJE+Xi4qKEhIRir1B4enrqb3/7m6UrSVatWrVK4eHh8vHxsbX9+uuvysrKKnLrrlBAQIDtz4W3PI8ePWrXZ9OmTXJxcdGmTZtsbV27dlWrVq20b98+denSRd7e3mrcuLE++ugjSdLmzZsVHh4uLy8vNW3aVOvXr7cbc8KECXJxcdHhw4f1+OOPy8/PT3Xq1NFrr70mY4zS0tLUu3dv+fr6KigoSLNmzbLbPzc3V6+//rratWsnPz8/VatWTZ07d9bGjRvt+h09elQuLi568803NXfuXDVq1EgeHh765ptvVK1aNb3wwgtFvpNjx46pSpUqdudHQECAWrdurU8++aTY77HQpUuXJEk1atSQJHl7e8vLy0sXL16UJH377bdKSEjQ7NmzrzoOcLMgOAEVSGEAKPxLTJK++uornT17Vo899liJt0mGDBkiSfr000/LdNyLFy/qiy++UNeuXVW/fv1S7//rr78WWbKysq66T15ennbu3Kk77rjDrj0gIEBeXl5as2aNzpw5U+parubs2bN66KGHFB4erhkzZsjDw0MDBgzQ8uXLNWDAAPXs2VPTp09Xdna2Hn74YZ0/f77IGP3791dBQYGmT5+u8PBwTZ48WXPnztX999+vW265RW+88YYaN26sMWPG6Msvv7Ttl5WVpXfffVddu3bVG2+8oQkTJujUqVOKiorSnj17ihxnyZIl+vvf/65hw4Zp1qxZCgkJUd++fbV8+XLl5+fb9f3nP/8pY4wGDRpk196uXTt9/fXXV/1Obr31Vvn5+WnChAn6+eefNXPmTGVlZdn+uTz//PN67rnn1LhxY6tfM1CxOfqSF4CiCm/VrV+/3pw6dcqkpaWZjz76yNSpU8d4eHiYtLQ0W9+5c+caSWblypUljnfmzBkjyfTr18/WVppbdXv37jWSzMiRI4v0PX36tDl16pRt+e0to5iYGCOp2CUqKuqq30FycrKRZP7+978X2fb6668bSaZatWqmR48eZsqUKWb37t1F+hV+jykpKXbtGzduNJLMxo0bbW1dunQxkkxiYqKt7eDBg0aScXV1Ndu3b7e1r1u3rsitzPHjxxtJZtiwYba2K1eumPr16xsXFxczffp0W/vZs2eNl5eXiYmJsev7+9ttZ8+eNYGBgeapp56ytaWkpBhJxtfX15w8edKuf2Fda9eutWtv3bq16dKlS5Hvp/AW7x/d3kxMTDReXl5GkqlSpYp58803jTHGJCQkmMDAQJOZmXnV/YGbCbP4ACcWGRlpt96gQQN98MEHdld9Cq96XG2Cb+G2P7rKU5LC/X57y6xQw4YNlZmZaVtfsWKFHn74Ydu6p6en1qxZU2S/2rVrX/WYp0+flmR/da3QxIkT1axZM82bN0/r1q3T2rVr9corr6ht27ZKSEhQ8+bNrX2w3/Hx8dGAAQNs602bNpW/v79uueUWhYeH29oL//z7pwgl6U9/+pPtz1WqVFH79u117NgxDR061Nbu7++vpk2b2u1fpUoV223OgoICnTt3TgUFBWrfvr2+/fbbIseJjo5WnTp17NoiIyNVr149JSQk2CbIHzhwQPv27dPChQuLjFH43f766692tzh/b+DAgerevbsOHTqksLAwBQYG6uLFixo3bpymTJkiHx8fTZw4UUuXLrX9uW/fviWOB1RkBCfAicXFxenWW29VZmamFi9erC+//FIeHh52fQpDUXG3jQpZCVfFcXFxsdvvwoULRfp88sknysvL0969ezVmzJgi26tUqVIkAJaGMabY9oEDB2rgwIHKysrSjh07FB8fr8TERPXq1avIU4dW1a9f3/aZC/n5+Sk4OLhIm/SfW3u/FxISUqSvp6dnkaDo5+dnC4eFli5dqlmzZungwYPKy8uztYeFhRU5TnFtrq6uGjRokObPn6+LFy/K29tbCQkJ8vT01COPPFKkf+F3+/vPXJwaNWqoQ4cOtvVp06YpICBATz75pBYvXqwFCxYoISFBR48eVf/+/fXDDz9w+w43JeY4AU7srrvuUmRkpKKjo7V69Wq1atVKjz32mF2AKby6sm/fvhLHKdzWokULW5unp6dt4u/vFU78LQwfjRs3VtWqVXXgwIEifbt06aLIyEi1a9eulJ/u6mrVqiWp+HDyW76+vrr//vuVkJCgmJgYHTlyRDt27JBUciD4/RygQiVNbC+pvbhQV1xfK/t/8MEHeuKJJ9SoUSMtWrRISUlJ+vzzz9WtWzcVFBQU2dfLy6vYMYcMGaILFy5o1apVMsYoMTFRDz30kC3s/Vbhd/tHV/9+7+jRo5o1a5beeustubq66p///Kf+/Oc/q1u3bnrqqacUERGhZcuWlWpMoKIgOAEVROFTUcePH9c//vEPW3unTp3k7++vxMTEEgPBe++9J0l2L7wMDQ3V4cOHi+1/6NAhWx9Jqlatmrp27arNmzeX+ALO8hYSEiIvLy+lpKRY3qd9+/aSpBMnTkj6/1tR586ds+v3888/l0+R5eijjz5Sw4YN9fHHH2vw4MGKiopSZGSkLl++XKpxWrVqZbtluWXLFqWmpmrw4MHF9k1JSVHt2rWL3PL7I2PGjNF//dd/qVOnTpKk48ePq169erbt9erVu2HnCXCjEZyACqRr16666667NHfuXNtfqN7e3hozZowOHTqkV155pcg+n332meLj4xUVFWV3q6Vnz546duyYVq1aZdc/JydH7777rgICAuyeaHv99deVn5+vxx9/vNhbdiXdUisrNzc3tW/fXrt27bJrv3jxYrFvrpaktWvXSvrP3CRJatSokSTZPb2Wn5+vd955p1xrLQ+FV6V++z3u2LGjxM96NYMHD9a//vUvzZ07V7Vq1VKPHj2K7bd7925FRESUauyNGzfqf//3fzVjxgxbW2BgoA4ePGhb//HHHxUUFFTquoGKgDlOQAXz0ksv6ZFHHlF8fLyeeeYZSdLLL7+s7777Tm+88Ya2bdum6OhoeXl56auvvtIHH3yg5s2bF3n79rBhw7R48WI98sgjeuqpp9S2bVudPn1ay5cvt70J3N3d3da/c+fO+sc//qERI0aoSZMmtjeH5+bm6vDhw0pISJC7u3uRvzCvXLmiDz74oNjP0rdvX1WrVq3Ez9q7d2+98sorysrKsr2l+uLFi7r77rvVoUMHde/eXcHBwTp37pxWrVqlLVu2qE+fPmrbtq0kqWXLlurQoYNiY2N15swZ1axZU8uWLXPKnwV56KGH9PHHH6tv37568MEHlZKSogULFqhFixbFBtWreeyxxzR27FitXLlSzz77rNzc3Ir0OXnypPbt26fhw4dbHjc/P18jR47USy+9ZDeX6+GHH9bYsWNVp04d/fzzz9q/f78SEhJKVTNQYTjwiT4AJSjpzeHGGJOfn28aNWpkGjVqZPeW7vz8fLNkyRLTsWNH4+vrazw9PU3Lli3NxIkTzYULF4o9ztmzZ82oUaNMWFiYcXNzM76+vubee+8t8jj7b3333XdmyJAhJiQkxLi7u5tq1aqZ1q1bmxdffNEkJyfb9b3a6whUzGsCfi8jI8NUrVrVvP/++7a2vLw8s3DhQtOnTx8TGhpqPDw8jLe3t2nbtq2ZOXNmkUf6jxw5YiIjI42Hh4cJDAw0f/3rX83nn39e7OsIWrZsWaSGkl7bIMkMHz7ctl74OoJTp04V+Q6Ke3v6749XUFBgpk6davtMbdu2NZ9++qmJiYkxoaGhtn6FryOYOXNmyV+cMaZnz55Gkvn666+L3T5//nzj7e1d7FvgSxIXF2fq169vsrOz7drz8vLM6NGjTe3atU1oaKhZunSp5TGBisbFmHK+vg4A5Wjo0KE6fPiwtmzZ4uhSKpS+fftq//79Sk5OLnZ727Zt1bVrV82ZM+cGVwZUbMxxAuDUxo8fr507d2rr1q2OLqXCOHHihD777LMSJ4UnJSXpp59+Umxs7A2uDKj4uOIEADeJlJQUbd26Ve+++6527typI0eOMEkbKGdccQKAm8TmzZs1ePBgpaSkaOnSpYQm4DrgihMAAIBFXHECAACwiOAEAABg0U3/AsyCggIdP35c1atXt/RDlgAAoHIxxuj8+fOqV6+eXF2vfk3ppg9Ox48fL/LL5gAAAL+Xlpam+vXrX7XPTR+cqlevLuk/X0bhTzYAAAAUysrKUnBwsC0zXM1NH5wKb8/5+voSnAAAQImsTOlhcjgAAIBFBCcAAACLCE4AAAAWEZwAAAAsIjgBAABYRHACAACwiOAEAABgEcEJAADAIoITAACARQ4PTr/88osef/xx1apVS15eXrrtttu0a9cu23ZjjF5//XXVrVtXXl5eioyM1E8//eTAigEAQGXl0OB09uxZdezYUW5ublq7dq1++OEHzZo1SzVq1LD1mTFjht5++20tWLBAO3bsULVq1RQVFaXLly87sHIAAFAZuRhjjKMO/vLLL2vr1q3asmVLsduNMapXr55efPFFjRkzRpKUmZmpwMBAxcfHa8CAAX94jKysLPn5+SkzM5PfqgMAAEWUJis49IrT6tWr1b59ez3yyCMKCAhQ27ZttXDhQtv2lJQUpaenKzIy0tbm5+en8PBwbdu2rdgxc3JylJWVZbcAAACUh6qOPPi///1vzZ8/X6NHj9Zf//pX7dy5U88//7zc3d0VExOj9PR0SVJgYKDdfoGBgbZtvzdt2jRNnDjxutf+Ww1e/uyGHg8Vy9HpDzq6BABAOXHoFaeCggLdcccdmjp1qtq2bathw4bp6aef1oIFC8o8ZmxsrDIzM21LWlpaOVYMAAAqM4cGp7p166pFixZ2bc2bN1dqaqokKSgoSJKUkZFh1ycjI8O27fc8PDzk6+trtwAAAJQHhwanjh076tChQ3Zthw8fVmhoqCQpLCxMQUFB2rBhg217VlaWduzYoYiIiBtaKwAAgEPnOI0aNUp33323pk6dqkcffVTffPON3nnnHb3zzjuSJBcXF40cOVKTJ09WkyZNFBYWptdee0316tVTnz59HFk6AACohBwanO68806tXLlSsbGxmjRpksLCwjR37lwNGjTI1mfs2LHKzs7WsGHDdO7cOXXq1ElJSUny9PR0YOUAAKAycuh7nG6EG/EeJ56qw9XwVB0AOLcK8x4nAACAioTgBAAAYBHBCQAAwCKCEwAAgEUEJwAAAIsITgAAABYRnAAAACwiOAEAAFhEcAIAALCI4AQAAGARwQkAAMAighMAAIBFBCcAAACLCE4AAAAWEZwAAAAsIjgBAABYRHACAACwiOAEAABgEcEJAADAIoITAACARQQnAAAAiwhOAAAAFhGcAAAALCI4AQAAWERwAgAAsIjgBAAAYBHBCQAAwCKCEwAAgEUEJwAAAIsITgAAABYRnAAAACwiOAEAAFhEcAIAALCI4AQAAGARwQkAAMAighMAAIBFVR1dAAAAktTg5c8cXQKc2NHpDzq6BElccQIAALCM4AQAAGARwQkAAMAihwanCRMmyMXFxW5p1qyZbfvly5c1fPhw1apVSz4+PoqOjlZGRoYDKwYAAJWZw684tWzZUidOnLAtX331lW3bqFGjtGbNGq1YsUKbN2/W8ePH1a9fPwdWCwAAKjOHP1VXtWpVBQUFFWnPzMzUokWLlJiYqG7dukmSlixZoubNm2v79u3q0KHDjS4VAABUcg6/4vTTTz+pXr16atiwoQYNGqTU1FRJ0u7du5WXl6fIyEhb32bNmikkJETbtm1zVLkAAKASc+gVp/DwcMXHx6tp06Y6ceKEJk6cqM6dO+vAgQNKT0+Xu7u7/P397fYJDAxUenp6iWPm5OQoJyfHtp6VlXW9ygcAAJWMQ4NTjx49bH9u3bq1wsPDFRoaqg8//FBeXl5lGnPatGmaOHFieZUIAABg4/Bbdb/l7++vW2+9VcnJyQoKClJubq7OnTtn1ycjI6PYOVGFYmNjlZmZaVvS0tKuc9UAAKCycKrgdOHCBR05ckR169ZVu3bt5Obmpg0bNti2Hzp0SKmpqYqIiChxDA8PD/n6+totAAAA5cGht+rGjBmjXr16KTQ0VMePH9f48eNVpUoVDRw4UH5+fho6dKhGjx6tmjVrytfXVyNGjFBERARP1AEAAIdwaHA6duyYBg4cqNOnT6tOnTrq1KmTtm/frjp16kiS5syZI1dXV0VHRysnJ0dRUVGaN2+eI0sGAACVmEOD07Jly6663dPTU3FxcYqLi7tBFQEAAJTMqeY4AQAAODOCEwAAgEUEJwAAAIsITgAAABY5/Ed+AdwYDV7+zNElwEkdnf6go0sAKgyuOAEAAFhEcAIAALCI4AQAAGARwQkAAMAighMAAIBFBCcAAACLCE4AAAAWEZwAAAAsIjgBAABYRHACAACwiOAEAABgEcEJAADAIoITAACARQQnAAAAiwhOAAAAFhGcAAAALCI4AQAAWERwAgAAsIjgBAAAYBHBCQAAwCKCEwAAgEUEJwAAAIsITgAAABYRnAAAACwiOAEAAFhEcAIAALCI4AQAAGARwQkAAMAighMAAIBFBCcAAACLCE4AAAAWEZwAAAAsIjgBAABYRHACAACwiOAEAABgkdMEp+nTp8vFxUUjR460tV2+fFnDhw9XrVq15OPjo+joaGVkZDiuSAAAUKk5RXDauXOn/vu//1utW7e2ax81apTWrFmjFStWaPPmzTp+/Lj69evnoCoBAEBl5/DgdOHCBQ0aNEgLFy5UjRo1bO2ZmZlatGiRZs+erW7duqldu3ZasmSJvv76a23fvt2BFQMAgMrK4cFp+PDhevDBBxUZGWnXvnv3buXl5dm1N2vWTCEhIdq2bduNLhMAAEBVHXnwZcuW6dtvv9XOnTuLbEtPT5e7u7v8/f3t2gMDA5Wenl7imDk5OcrJybGtZ2VllVu9AACgcnPYFae0tDS98MILSkhIkKenZ7mNO23aNPn5+dmW4ODgchsbAABUbg4LTrt379bJkyd1xx13qGrVqqpatao2b96st99+W1WrVlVgYKByc3N17tw5u/0yMjIUFBRU4rixsbHKzMy0LWlpadf5kwAAgMrCYbfq7rvvPu3fv9+u7cknn1SzZs00btw4BQcHy83NTRs2bFB0dLQk6dChQ0pNTVVERESJ43p4eMjDw+O61g4AAConhwWn6tWrq1WrVnZt1apVU61atWztQ4cO1ejRo1WzZk35+vpqxIgRioiIUIcOHRxRMgAAqOQcOjn8j8yZM0eurq6Kjo5WTk6OoqKiNG/ePEeXBQAAKimnCk6bNm2yW/f09FRcXJzi4uIcUxAAAMBvOPw9TgAAABUFwQkAAMAighMAAIBFBCcAAACLCE4AAAAWEZwAAAAsIjgBAABYRHACAACwiOAEAABgEcEJAADAIoITAACARQQnAAAAiwhOAAAAFhGcAAAALCpTcGrYsKFOnz5dpP3cuXNq2LDhNRcFAADgjMoUnI4ePar8/Pwi7Tk5Ofrll1+uuSgAAABnVLU0nVevXm3787p16+Tn52dbz8/P14YNG9SgQYNyKw4AAMCZlCo49enTR5Lk4uKimJgYu21ubm5q0KCBZs2aVW7FAQAAOJNSBaeCggJJUlhYmHbu3KnatWtfl6IAAACcUamCU6GUlJTyrgMAAMDplSk4SdKGDRu0YcMGnTx50nYlqtDixYuvuTAAAABnU6bgNHHiRE2aNEnt27dX3bp15eLiUt51AQAAOJ0yBacFCxYoPj5egwcPLu96AAAAnFaZ3uOUm5uru+++u7xrAQAAcGplCk5/+tOflJiYWN61AAAAOLUy3aq7fPmy3nnnHa1fv16tW7eWm5ub3fbZs2eXS3EAAADOpEzBad++fWrTpo0k6cCBA3bbmCgOAABuVmUKThs3bizvOgAAAJxemeY4FUpOTta6det06dIlSZIxplyKAgAAcEZlCk6nT5/Wfffdp1tvvVU9e/bUiRMnJElDhw7Viy++WK4FAgAAOIsyBadRo0bJzc1Nqamp8vb2trX3799fSUlJ5VYcAACAMynTHKd//etfWrdunerXr2/X3qRJE/3888/lUhgAAICzKdMVp+zsbLsrTYXOnDkjDw+Pay4KAADAGZUpOHXu3Fnvvfeebd3FxUUFBQWaMWOG7r333nIrDgAAwJmU6VbdjBkzdN9992nXrl3Kzc3V2LFj9f333+vMmTPaunVredcIAADgFMp0xalVq1Y6fPiwOnXqpN69eys7O1v9+vXTd999p0aNGpV3jQAAAE6hTFecJMnPz0+vvPJKedYCAADg1Mp0xWnJkiVasWJFkfYVK1Zo6dKl11wUAACAMypTcJo2bZpq165dpD0gIEBTp0695qIAAACcUZmCU2pqqsLCwoq0h4aGKjU19ZqLAgAAcEZlCk4BAQHat29fkfa9e/eqVq1a11wUAACAMypTcBo4cKCef/55bdy4Ufn5+crPz9cXX3yhF154QQMGDLA8zvz589W6dWv5+vrK19dXERERWrt2rW375cuXNXz4cNWqVUs+Pj6Kjo5WRkZGWUoGAAC4ZmUKTn/7298UHh6u++67T15eXvLy8tIDDzygbt26lWqOU/369TV9+nTt3r1bu3btUrdu3dS7d299//33kv7zm3hr1qzRihUrtHnzZh0/flz9+vUrS8kAAADXrNSvIzDGKD09XfHx8Zo8ebL27NkjLy8v3XbbbQoNDS3VWL169bJbnzJliubPn6/t27erfv36WrRokRITE9WtWzdJ/3mar3nz5tq+fbs6dOhQ2tIBAACuSZmCU+PGjfX999+rSZMmatKkSbkUkp+frxUrVig7O1sRERHavXu38vLyFBkZaevTrFkzhYSEaNu2bSUGp5ycHOXk5NjWs7KyyqU+AACAUt+qc3V1VZMmTXT69OlyKWD//v3y8fGRh4eHnnnmGa1cuVItWrRQenq63N3d5e/vb9c/MDBQ6enpJY43bdo0+fn52Zbg4OByqRMAAKBMc5ymT5+ul156SQcOHLjmApo2bao9e/Zox44devbZZxUTE6MffvihzOPFxsYqMzPTtqSlpV1zjQAAAFIZf3JlyJAhunjxom6//Xa5u7vLy8vLbvuZM2csj+Xu7q7GjRtLktq1a6edO3fqrbfeUv/+/ZWbm6tz587ZXXXKyMhQUFBQieN5eHjIw8OjdB8IAADAgjIFp7lz55ZzGf+voKBAOTk5ateundzc3LRhwwZFR0dLkg4dOqTU1FRFRERct+MDAACUpEzBKSYmplwOHhsbqx49eigkJETnz59XYmKiNm3apHXr1snPz09Dhw7V6NGjVbNmTfn6+mrEiBGKiIjgiToAAOAQZQpOknTkyBEtWbJER44c0VtvvaWAgACtXbtWISEhatmypaUxTp48qSFDhujEiRPy8/NT69attW7dOt1///2SpDlz5sjV1VXR0dHKyclRVFSU5s2bV9aSAQAArkmZgtPmzZvVo0cPdezYUV9++aWmTJmigIAA7d27V4sWLdJHH31kaZxFixZddbunp6fi4uIUFxdXljIBAADKVZmeqnv55Zc1efJkff7553J3d7e1d+vWTdu3by+34gAAAJxJmYLT/v371bdv3yLtAQEB+vXXX6+5KAAAAGdUpuDk7++vEydOFGn/7rvvdMstt1xzUQAAAM6oTMFpwIABGjdunNLT0+Xi4qKCggJt3bpVY8aM0ZAhQ8q7RgAAAKdQpuA0depUNW/eXCEhIbpw4YJatGihe+65R3fffbdeffXV8q4RAADAKZTqqbqCggLNnDlTq1evVm5urgYPHqzo6GhduHBBbdu2Lbcf/AUAAHBGpQpOU6ZM0YQJExQZGSkvLy8lJibKGKPFixdfr/oAAACcRqlu1b333nuaN2+e1q1bp1WrVmnNmjVKSEhQQUHB9aoPAADAaZQqOKWmpqpnz5629cjISLm4uOj48ePlXhgAAICzKVVwunLlijw9Pe3a3NzclJeXV65FAQAAOKNSzXEyxuiJJ56Qh4eHre3y5ct65plnVK1aNVvbxx9/XH4VAgAAOIlSBaeYmJgibY8//ni5FQMAAODMShWclixZcr3qAAAAcHplegEmAABAZURwAgAAsIjgBAAAYBHBCQAAwCKCEwAAgEUEJwAAAIsITgAAABYRnAAAACwiOAEAAFhEcAIAALCI4AQAAGARwQkAAMAighMAAIBFBCcAAACLCE4AAAAWEZwAAAAsIjgBAABYRHACAACwiOAEAABgEcEJAADAIoITAACARQQnAAAAiwhOAAAAFhGcAAAALCI4AQAAWERwAgAAsIjgBAAAYJFDg9O0adN05513qnr16goICFCfPn106NAhuz6XL1/W8OHDVatWLfn4+Cg6OloZGRkOqhgAAFRmDg1Omzdv1vDhw7V9+3Z9/vnnysvL0wMPPKDs7Gxbn1GjRmnNmjVasWKFNm/erOPHj6tfv34OrBoAAFRWVR158KSkJLv1+Ph4BQQEaPfu3brnnnuUmZmpRYsWKTExUd26dZMkLVmyRM2bN9f27dvVoUMHR5QNAAAqKaea45SZmSlJqlmzpiRp9+7dysvLU2RkpK1Ps2bNFBISom3btjmkRgAAUHk59IrTbxUUFGjkyJHq2LGjWrVqJUlKT0+Xu7u7/P397foGBgYqPT292HFycnKUk5NjW8/KyrpuNQMAgMrFaa44DR8+XAcOHNCyZcuuaZxp06bJz8/PtgQHB5dThQAAoLJziuD03HPP6dNPP9XGjRtVv359W3tQUJByc3N17tw5u/4ZGRkKCgoqdqzY2FhlZmbalrS0tOtZOgAAqEQcGpyMMXruuee0cuVKffHFFwoLC7Pb3q5dO7m5uWnDhg22tkOHDik1NVURERHFjunh4SFfX1+7BQAAoDw4dI7T8OHDlZiYqE8++UTVq1e3zVvy8/OTl5eX/Pz8NHToUI0ePVo1a9aUr6+vRowYoYiICJ6oAwAAN5xDg9P8+fMlSV27drVrX7JkiZ544glJ0pw5c+Tq6qro6Gjl5OQoKipK8+bNu8GVAgAAODg4GWP+sI+np6fi4uIUFxd3AyoCAAAomVNMDgcAAKgICE4AAAAWEZwAAAAsIjgBAABYRHACAACwiOAEAABgEcEJAADAIoITAACARQQnAAAAiwhOAAAAFhGcAAAALCI4AQAAWERwAgAAsIjgBAAAYBHBCQAAwCKCEwAAgEUEJwAAAIsITgAAABYRnAAAACwiOAEAAFhEcAIAALCI4AQAAGARwQkAAMAighMAAIBFBCcAAACLCE4AAAAWEZwAAAAsIjgBAABYRHACAACwiOAEAABgEcEJAADAIoITAACARQQnAAAAiwhOAAAAFhGcAAAALCI4AQAAWERwAgAAsIjgBAAAYBHBCQAAwCKCEwAAgEUODU5ffvmlevXqpXr16snFxUWrVq2y226M0euvv666devKy8tLkZGR+umnnxxTLAAAqPQcGpyys7N1++23Ky4urtjtM2bM0Ntvv60FCxZox44dqlatmqKionT58uUbXCkAAIBU1ZEH79Gjh3r06FHsNmOM5s6dq1dffVW9e/eWJL333nsKDAzUqlWrNGDAgBtZKgAAgPPOcUpJSVF6eroiIyNtbX5+fgoPD9e2bdscWBkAAKisHHrF6WrS09MlSYGBgXbtgYGBtm3FycnJUU5Ojm09Kyvr+hQIAAAqHae94lRW06ZNk5+fn20JDg52dEkAAOAm4bTBKSgoSJKUkZFh156RkWHbVpzY2FhlZmbalrS0tOtaJwAAqDycNjiFhYUpKChIGzZssLVlZWVpx44dioiIKHE/Dw8P+fr62i0AAADlwaFznC5cuKDk5GTbekpKivbs2aOaNWsqJCREI0eO1OTJk9WkSROFhYXptddeU7169dSnTx/HFQ0AACothwanXbt26d5777Wtjx49WpIUExOj+Ph4jR07VtnZ2Ro2bJjOnTunTp06KSkpSZ6eno4qGQAAVGIODU5du3aVMabE7S4uLpo0aZImTZp0A6sCAAAontPOcQIAAHA2BCcAAACLCE4AAAAWEZwAAAAsIjgBAABYRHACAACwiOAEAABgEcEJAADAIoITAACARQQnAAAAiwhOAAAAFhGcAAAALCI4AQAAWERwAgAAsIjgBAAAYBHBCQAAwCKCEwAAgEUEJwAAAIsITgAAABYRnAAAACwiOAEAAFhEcAIAALCI4AQAAGARwQkAAMAighMAAIBFBCcAAACLCE4AAAAWEZwAAAAsIjgBAABYRHACAACwiOAEAABgEcEJAADAIoITAACARQQnAAAAiwhOAAAAFhGcAAAALCI4AQAAWERwAgAAsIjgBAAAYBHBCQAAwCKCEwAAgEUVIjjFxcWpQYMG8vT0VHh4uL755htHlwQAACohpw9Oy5cv1+jRozV+/Hh9++23uv322xUVFaWTJ086ujQAAFDJOH1wmj17tp5++mk9+eSTatGihRYsWCBvb28tXrzY0aUBAIBKpqqjC7ia3Nxc7d69W7GxsbY2V1dXRUZGatu2bcXuk5OTo5ycHNt6ZmamJCkrK+u61VmQc/G6jY2K73qee6XBeYqScI6iIrie52nh2MaYP+zr1MHp119/VX5+vgIDA+3aAwMDdfDgwWL3mTZtmiZOnFikPTg4+LrUCPwRv7mOrgC4Os5RVAQ34jw9f/68/Pz8rtrHqYNTWcTGxmr06NG29YKCAp05c0a1atWSi4uLAyurHLKyshQcHKy0tDT5+vo6uhygCM5RVAScpzeWMUbnz59XvXr1/rCvUwen2rVrq0qVKsrIyLBrz8jIUFBQULH7eHh4yMPDw67N39//epWIEvj6+vIvO5wa5ygqAs7TG+ePrjQVcurJ4e7u7mrXrp02bNhgaysoKNCGDRsUERHhwMoAAEBl5NRXnCRp9OjRiomJUfv27XXXXXdp7ty5ys7O1pNPPuno0gAAQCXj9MGpf//+OnXqlF5//XWlp6erTZs2SkpKKjJhHM7Bw8ND48ePL3K7FHAWnKOoCDhPnZeLsfLsHQAAAJx7jhMAAIAzITgBAABYRHACAACwiOAEAABgEcEJTuX7779XdHS0GjRoIBcXF82dO9fRJQFFLFy4UJ07d1aNGjVUo0YNRUZG6ptvvnF0WUAREyZMUJs2bRxdxk2F4ATl5uY6ugSbixcvqmHDhpo+fXqJb4dH5eRM5+mmTZs0cOBAbdy4Udu2bVNwcLAeeOAB/fLLL44uDU7Amc5VlD+CUyXUtWtXPffccxo5cqRq166tqKgobd68WXfddZc8PDxUt25dvfzyy7py5YptnwYNGhS5+tOmTRtNmDDBtn7w4EF16tRJnp6eatGihdavXy8XFxetWrXK1ictLU2PPvqo/P39VbNmTfXu3VtHjx61bb/zzjs1c+ZMDRgwgPeXVHLOfJ4mJCToL3/5i9q0aaNmzZrp3Xfftf2qASofZz5XUf4ITpXU0qVL5e7urq1bt2rChAnq2bOn7rzzTu3du1fz58/XokWLNHnyZMvj5efnq0+fPvL29taOHTv0zjvv6JVXXrHrk5eXp6ioKFWvXl1btmzR1q1b5ePjo+7du/N/aChWRTlPL168qLy8PNWsWfOaPi8qropyrqIcGFQ6Xbp0MW3btrWt//WvfzVNmzY1BQUFtra4uDjj4+Nj8vPzjTHGhIaGmjlz5tiNc/vtt5vx48cbY4xZu3atqVq1qjlx4oRt++eff24kmZUrVxpjjHn//feLHCcnJ8d4eXmZdevWFamzuGOi8qgo56kxxjz77LOmYcOG5tKlS9fykVFBOfO5On78eHP77beX46eF0//kCq6Pdu3a2f78448/KiIiQi4uLra2jh076sKFCzp27JhCQkL+cLxDhw4pODjYbl7SXXfdZddn7969Sk5OVvXq1e3aL1++rCNHjpT1o+AmVhHO0+nTp2vZsmXatGmTPD09LX823FwqwrmK8kFwqqSqVatWqv6urq4yv/t1nry8vFKNceHCBbVr104JCQlFttWpU6dUY6FycPbz9M0339T06dO1fv16tW7dulTHwc3F2c9VlB+CE9S8eXP9z//8j4wxtv9D2rp1q6pXr6769etL+s+/hCdOnLDtk5WVpZSUFNt606ZNlZaWpoyMDNsPMO/cudPuOHfccYeWL1+ugIAA+fr6Xu+PhZuMs52nM2bM0JQpU7Ru3Tq1b9++3D4nKj5nO1dRvpgcDv3lL39RWlqaRowYoYMHD+qTTz7R+PHjNXr0aLm6/ucU6datm95//31t2bJF+/fvV0xMjKpUqWIb4/7771ejRo0UExOjffv2aevWrXr11VclyfYfjkGDBql27drq3bu3tmzZopSUFG3atEnPP/+8jh07Juk/j/Hu2bNHe/bsUW5urn755Rft2bNHycnJN/hbgbNxpvP0jTfe0GuvvabFixerQYMGSk9PV3p6ui5cuHCDvxU4I2c6VyXp0qVLtv+uFi7cyrsGjpxgBcfo0qWLeeGFF+zaNm3aZO68807j7u5ugoKCzLhx40xeXp5te2Zmpunfv7/x9fU1wcHBJj4+3m4iozHG/Pjjj6Zjx47G3d3dNGvWzKxZs8ZIMklJSbY+J06cMEOGDDG1a9c2Hh4epmHDhubpp582mZmZxhhjUlJSjKQiS5cuXa7nVwIn5MznaWhoaLHn6W+Pg8rDmc/V8ePHF3uu3nfffdf1O7mZuRjzu5usQDnZunWrOnXqpOTkZDVq1MjR5QDF4jxFRcG56hwITig3K1eulI+Pj5o0aaLk5GS98MILqlGjhr766itHlwbYcJ6iouBcdU5MDke5OX/+vMaNG6fU1FTVrl1bkZGRmjVrlqPLAuxwnqKi4Fx1TlxxAgAAsIin6gAAACwiOAEAAFhEcAIAALCI4AQAAGARwQkAAMAighMAAIBFBCcAAACLCE4AAAAWEZwAAAAs+j9sLFhcoFWAkwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell D: Compute topic metrics and plot macro/micro precision, recall, f1\n",
        "import numpy as np\n",
        "\n",
        "# helper to parse topic cells into lists\n",
        "def parse_topics_cell(cell):\n",
        "    if pd.isna(cell) or cell == \"\":\n",
        "        return []\n",
        "    if isinstance(cell, list):\n",
        "        return cell\n",
        "    s = str(cell).strip()\n",
        "    # try literal eval\n",
        "    try:\n",
        "        val = ast.literal_eval(s)\n",
        "        if isinstance(val, (list,tuple)):\n",
        "            return [str(x).strip().lower() for x in val if str(x).strip()]\n",
        "    except Exception:\n",
        "        pass\n",
        "    return [p.strip().lower() for p in re.split(r\"[;\\n,]\\s*\", s) if p.strip()]\n",
        "\n",
        "refs_topics = [parse_topics_cell(x) for x in df[\"ref_topics\"].tolist()]\n",
        "preds_topics = [parse_topics_cell(x) for x in df[\"pred_topics\"].tolist()]\n",
        "\n",
        "def topics_metrics_calc(refs_list, preds_list):\n",
        "    per_prec, per_rec, per_f1 = [], [], []\n",
        "    total_tp = total_pred = total_ref = 0\n",
        "    for refs, preds in zip(refs_list, preds_list):\n",
        "        refs_set = set([r.strip().lower() for r in refs]) if refs else set()\n",
        "        preds_set = set([p.strip().lower() for p in preds]) if preds else set()\n",
        "        if len(preds_set)==0 and len(refs_set)==0:\n",
        "            per_prec.append(1.0); per_rec.append(1.0); per_f1.append(1.0)\n",
        "            continue\n",
        "        if len(preds_set)==0:\n",
        "            per_prec.append(0.0); per_rec.append(0.0); per_f1.append(0.0)\n",
        "            continue\n",
        "        tp = len(preds_set & refs_set)\n",
        "        prec = tp / len(preds_set) if len(preds_set)>0 else 0.0\n",
        "        rec = tp / len(refs_set) if len(refs_set)>0 else 0.0\n",
        "        f1 = 2*prec*rec/(prec+rec) if (prec+rec)>0 else 0.0\n",
        "        per_prec.append(prec); per_rec.append(rec); per_f1.append(f1)\n",
        "        total_tp += tp; total_pred += len(preds_set); total_ref += len(refs_set)\n",
        "    macro = {\"precision\": float(np.mean(per_prec)), \"recall\": float(np.mean(per_rec)), \"f1\": float(np.mean(per_f1))}\n",
        "    micro_prec = total_tp / total_pred if total_pred>0 else 0.0\n",
        "    micro_rec = total_tp / total_ref if total_ref>0 else 0.0\n",
        "    micro_f1 = 2*micro_prec*micro_rec/(micro_prec+micro_rec) if (micro_prec+micro_rec)>0 else 0.0\n",
        "    micro = {\"precision\": float(micro_prec), \"recall\": float(micro_rec), \"f1\": float(micro_f1)}\n",
        "    return {\"macro\": macro, \"micro\": micro}\n",
        "\n",
        "topic_stats = topics_metrics_calc(refs_topics, preds_topics)\n",
        "print(\"Topic metrics:\", topic_stats)\n",
        "\n",
        "# Plot macro and micro metrics side by side\n",
        "metrics_to_plot = {\n",
        "    \"macro_precision\": topic_stats[\"macro\"][\"precision\"]*100,\n",
        "    \"macro_recall\": topic_stats[\"macro\"][\"recall\"]*100,\n",
        "    \"macro_f1\": topic_stats[\"macro\"][\"f1\"]*100,\n",
        "    \"micro_precision\": topic_stats[\"micro\"][\"precision\"]*100,\n",
        "    \"micro_recall\": topic_stats[\"micro\"][\"recall\"]*100,\n",
        "    \"micro_f1\": topic_stats[\"micro\"][\"f1\"]*100\n",
        "}\n",
        "plt.figure(figsize=(8,4))\n",
        "plt.bar(list(metrics_to_plot.keys()), list(metrics_to_plot.values()))\n",
        "plt.xticks(rotation=45, ha=\"right\")\n",
        "plt.ylabel(\"Percent\")\n",
        "plt.title(\"Topic metrics (macro & micro) %\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "fORMU50yNN22",
        "outputId": "e9799510-a058-468c-d1ee-17c46885bf99"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Topic metrics: {'macro': {'precision': 0.0, 'recall': 0.0, 'f1': 0.0}, 'micro': {'precision': 0.0, 'recall': 0.0, 'f1': 0.0}}\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell E: Summary length distributions and scatter plot\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "df[\"ref_summary_len\"] = df[\"ref_summary\"].astype(str).apply(lambda x: len(x.split()))\n",
        "df[\"pred_summary_len\"] = df[\"pred_summary\"].astype(str).apply(lambda x: len(x.split()))\n",
        "\n",
        "# histogram of predicted summary lengths\n",
        "plt.figure(figsize=(6,4))\n",
        "plt.hist(df[\"pred_summary_len\"].dropna(), bins=25)\n",
        "plt.title(\"Predicted summary length (words)\")\n",
        "plt.xlabel(\"Words\")\n",
        "plt.ylabel(\"Count\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# histogram of reference summary lengths\n",
        "plt.figure(figsize=(6,4))\n",
        "plt.hist(df[\"ref_summary_len\"].dropna(), bins=25)\n",
        "plt.title(\"Reference summary length (words)\")\n",
        "plt.xlabel(\"Words\")\n",
        "plt.ylabel(\"Count\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# scatter ref vs pred length\n",
        "plt.figure(figsize=(6,6))\n",
        "plt.scatter(df[\"ref_summary_len\"], df[\"pred_summary_len\"], alpha=0.6, s=10)\n",
        "plt.plot([0, max(df[\"ref_summary_len\"].max(), df[\"pred_summary_len\"].max())],\n",
        "         [0, max(df[\"ref_summary_len\"].max(), df[\"pred_summary_len\"].max())], linestyle=\"--\")\n",
        "plt.xlabel(\"Reference summary length (words)\")\n",
        "plt.ylabel(\"Predicted summary length (words)\")\n",
        "plt.title(\"Ref vs Pred summary length\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "lbvxyittNRDc",
        "outputId": "3a7c2157-9543-4a3a-d5e3-2f9a5e0831dc"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell F: Top predicted topics frequency\n",
        "from collections import Counter\n",
        "all_pred_topics_flat = [t for lst in preds_topics for t in (lst if isinstance(lst, list) else [])]\n",
        "topic_counts = Counter(all_pred_topics_flat).most_common(40)\n",
        "top_topics_df = pd.DataFrame(topic_counts, columns=[\"topic\",\"count\"])\n",
        "print(\"Top predicted topics (top 40):\")\n",
        "display(top_topics_df.head(40))\n",
        "\n",
        "# bar chart (top 20)\n",
        "top20 = top_topics_df.head(20)\n",
        "plt.figure(figsize=(8,4))\n",
        "plt.bar(top20[\"topic\"].astype(str), top20[\"count\"])\n",
        "plt.xticks(rotation=45, ha=\"right\")\n",
        "plt.title(\"Top predicted topics (count)\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "jd2mF9e6NUkN",
        "outputId": "29509efa-c758-438d-82b5-8b29df9cfc9c"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top predicted topics (top 40):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [topic, count]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fda7d3f4-b92b-4f39-9d00-948fde3c2ea7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>topic</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fda7d3f4-b92b-4f39-9d00-948fde3c2ea7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fda7d3f4-b92b-4f39-9d00-948fde3c2ea7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fda7d3f4-b92b-4f39-9d00-948fde3c2ea7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell G: Show top mismatches (by summary ROUGE-ish or exact summary mismatch)\n",
        "# We'll use summary exact equality as filter for quick review\n",
        "df[\"summary_exact\"] = df[\"ref_summary\"].astype(str).str.strip() == df[\"pred_summary\"].astype(str).str.strip()\n",
        "mismatches = df[~df[\"summary_exact\"]].copy().reset_index(drop=True)\n",
        "print(\"Mismatches by exact-summary:\", len(mismatches))\n",
        "# show first 30 mismatches\n",
        "# from caas_jupyter_tools import display_dataframe_to_user # Removed\n",
        "from IPython.display import display\n",
        "cols_show = [\"input_text\",\"ref_summary\",\"pred_summary\",\"ref_interpretation\",\"pred_interpretation\",\"ref_topics\",\"pred_topics\"]\n",
        "cols_show = [c for c in cols_show if c in mismatches.columns]\n",
        "# display_dataframe_to_user(\"Top_mismatches_for_manual_review\", mismatches.loc[:, cols_show].head(50)) # Removed\n",
        "print(\"--- Top_mismatches_for_manual_review (first 50 rows) ---\")\n",
        "display(mismatches.loc[:, cols_show].head(50))\n",
        "\n",
        "# Save mismatches CSV\n",
        "mismatches.to_csv(\"mismatches_full_for_review.csv\", index=False)\n",
        "print(\"Saved mismatches_full_for_review.csv (download from Files sidebar if needed).\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "0QlGvX1CNWb-",
        "outputId": "ce4fac1d-0071-4386-f458-088df0295341"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mismatches by exact-summary: 112\n",
            "--- Top_mismatches_for_manual_review (first 50 rows) ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                           input_text  \\\n",
              "0   ray dvd beats box office takings oscar-nominat...   \n",
              "1   chinese wine tempts italy s illva italy s illv...   \n",
              "2   mild winter drives us oil down 6% us oil price...   \n",
              "3   dutch watch van gogh s last film the last film...   \n",
              "4   hewitt falls to dent in adelaide lleyton hewit...   \n",
              "5   microsoft gets the blogging bug software giant...   \n",
              "6   broadband steams ahead in the us more and more...   \n",
              "7   rock group korn s guitarist quits the guitaris...   \n",
              "8   career honour for actor dicaprio actor leonard...   \n",
              "9   britannia members  £42m windfall more than 800...   \n",
              "10  edwards tips idowu for euro gold world outdoor...   \n",
              "11  ray dvd beats box office takings oscar-nominat...   \n",
              "12  beattie return calms attack fears everton stri...   \n",
              "13  stock market eyes japan recovery japanese shar...   \n",
              "14  candela completes bolton switch bolton boss sa...   \n",
              "15  byrds producer melcher dies at 62 record produ...   \n",
              "16  klinsmann issues lehmann warning germany coach...   \n",
              "17  musical treatment for capra film the classic f...   \n",
              "18  talks held on gibraltar s future two days of t...   \n",
              "19  &#163;1.8m indecency fine for viacom media gia...   \n",
              "20  teenager tait picked for england newcastle s t...   \n",
              "21  mccririck out of big brother show racing pundi...   \n",
              "22  almagro continues spanish surge unseeded nicol...   \n",
              "23  us tv host clark suffers stroke veteran us tel...   \n",
              "24  short attacks us over tsunami aid former cabin...   \n",
              "25  aaliyah claim dismissed by court late r&b star...   \n",
              "26  electrolux to export europe jobs electrolux sa...   \n",
              "27  european losses hit gm s profits general motor...   \n",
              "28  imf  cuts  german growth estimate the internat...   \n",
              "29  beer giant swallows russian firm brewing giant...   \n",
              "30  butler strikes gold in spain britain s kathy b...   \n",
              "31  owen delighted with real display michael owen ...   \n",
              "32  leeds v saracens (fri) headingley  friday  25 ...   \n",
              "33  wipro beats forecasts once again wipro  india ...   \n",
              "34  davies favours gloucester future wales hooker ...   \n",
              "35  cactus diet deal for phytopharm a slimming aid...   \n",
              "36  smith aims to bring back respect scotland mana...   \n",
              "37  qpr keeper day heads for preston queens park r...   \n",
              "38  venus stunned by farina elia venus williams su...   \n",
              "39  algeria hit by further gas riots algeria suffe...   \n",
              "40  vw considers opening indian plant volkswagen i...   \n",
              "41  isinbayeva heads for birmingham olympic pole v...   \n",
              "42  jack cunningham to stand down veteran labour m...   \n",
              "43  fry set for role in hitchhiker s actor stephen...   \n",
              "44  actress roberts takes spider role actress juli...   \n",
              "45  lewis-francis turns to christie mark lewis-fra...   \n",
              "46  wine comedy wins critics  award quirky comedy ...   \n",
              "47  santini resigns as spurs manager tottenham man...   \n",
              "48  february poll claim  speculation  reports that...   \n",
              "49  argentina  venezuela in oil deal argentina and...   \n",
              "\n",
              "                                          ref_summary  \\\n",
              "0   ray dvd beats box office takings with a combin...   \n",
              "1   Italian liqueur maker illva saronno has agreed...   \n",
              "2   Light crude oil futures fell $2.86 to $41.32 a...   \n",
              "3   Theo van gogh was shot and stabbed to death in...   \n",
              "4   lleyton hewitt suffered a shock defeat to tayl...   \n",
              "5   msn spaces is free to anyone with a hotmail or...   \n",
              "6   The number of people and businesses connected ...   \n",
              "7   rock group korn s guitarist quits the guitaris...   \n",
              "8   leonardo dicaprio honoured at the santa barbar...   \n",
              "9   britannia members will share £42m windfall wit...   \n",
              "10  jonathan edwards believes phillips idowu can t...   \n",
              "11  ray dvd beats box office takings with a combin...   \n",
              "12  James beattie is not believed to be as serious...   \n",
              "13  Nikkei index of leading shares gained 7.6% dur...   \n",
              "14  bolton boss sam allardyce has signed roma defe...   \n",
              "15  byrds producer  terry melcher dies at 62 after...   \n",
              "16  lehmann is understudy to oliver kahn in the ge...   \n",
              "17  musical treatment for capra film the classic f...   \n",
              "18  Two-day summit at foreign secretary s official...   \n",
              "19  viacom has paid out $3.5m (£1.8m) to end inves...   \n",
              "20  teenager tait picked for england newcastle s t...   \n",
              "21  racing pundit john mccririck has become the la...   \n",
              "22  Unseeded nicolas almagro becomes fifth spaniar...   \n",
              "23  us tv host clark suffers stroke veteran us tel...   \n",
              "24  Former cabinet minister clare short criticises...   \n",
              "25  aaliyah had completed a music video when the p...   \n",
              "26  electrolux saw its shares rise 14% on t Tuesda...   \n",
              "27  gm earned $630m (£481.5m) in the october-to-de...   \n",
              "28  imf will also reduce its growth estimate for t...   \n",
              "29  inbev agrees to buy alfa-eco stake in sun inte...   \n",
              "30  kathy butler continued her impressive year wit...   \n",
              "31  michael owen revelled in his return to the sta...   \n",
              "32  leeds v saracens (fri) headingley  friday  25 ...   \n",
              "33  wipro  india s third-biggest software firm  ha...   \n",
              "34  future wales hooker mefin davies is likely to ...   \n",
              "35  phytopharm shares jumped 10.7% on the news wit...   \n",
              "36  walter smith has joined his first squad for a ...   \n",
              "37  qpr keeper day heads for preston queens park r...   \n",
              "38  sylvia farina elia beats venus williams 7-5 7-...   \n",
              "39  Price of butane gas has risen to 200 dinars ($...   \n",
              "40  volkswagen said it was studying the possibilit...   \n",
              "41  olympic pole vault champion yelena isinbayeva ...   \n",
              "42  veteran Labour MP will stand down at the next ...   \n",
              "43  actor stephen fry will provide the voice of th...   \n",
              "44  Julia roberts will play a spider in a new film...   \n",
              "45  lewis-francis has stepped up his preparations ...   \n",
              "46  The us movie also picked up four other accolad...   \n",
              "47  jacques santini resigns as spurs manager totte...   \n",
              "48  Labour spokesman said he had no idea where the...   \n",
              "49  Argentine president nestor kirchner and venezu...   \n",
              "\n",
              "                                         pred_summary  \\\n",
              "0   ray has been nominated in six oscar categories...   \n",
              "1   changyu said in a statement to the shenzhen st...   \n",
              "2   6% us oil prices have fallen by 6% driven down...   \n",
              "3   members of van gogh s family and celebrities a...   \n",
              "4   lleyton hewitt suffered a shock defeat to tayl...   \n",
              "5   microsoft gets the blogging bug software giant...   \n",
              "6   In a report it said there were more than 32 mi...   \n",
              "7   brian head welch told a radio station in calif...   \n",
              "8   the achievement award was created to commemora...   \n",
              "9   Mitglieder of the uk s second largest building...   \n",
              "10  phillips idowu landed 17.30m at the british tr...   \n",
              "11  ray has been nominated in six oscar categories...   \n",
              "12  Everton striker james beattie has been declare...   \n",
              "13  In 2005 it will rise toward 13 000 predicted m...   \n",
              "14  sam allardyce has signed roma defender vincent...   \n",
              "15  terry melcher died on friday night at his home...   \n",
              "16  Lehmann is understudy to oliver kahn in the ge...   \n",
              "17  frank capra s 1946 movie starring james stewar...   \n",
              "18  In october mr straw and his spanish counterpar...   \n",
              "19  fcc was looking into 50 shows including those ...   \n",
              "20  mathew tait has been named as a centre in engl...   \n",
              "21  mccririck was ordered to leave the house on mo...   \n",
              "22  nicolas almagro becomes the fifth spaniard to ...   \n",
              "23  dick clark is in hospital in los angeles after...   \n",
              "24  ms short attacks us over tsunami aid former ca...   \n",
              "25  aaliyah s record company has failed in an atte...   \n",
              "26  swedish firm the world s largest maker of home...   \n",
              "27  gm s profits general motors (gm) saw its net p...   \n",
              "28  Imf cuts german growth estimate the internatio...   \n",
              "29  russian firm brewing giant inbev has agreed to...   \n",
              "30  kathy butler continued her impressive year wit...   \n",
              "31  robert carlos made it 2-0 at the break smashin...   \n",
              "32  leeds v saracens (fri) headingley friday 25 fe...   \n",
              "33  wipro india s third-biggest software firm has ...   \n",
              "34  Ifin davies is likely to stay with english sid...   \n",
              "35  a slimming aid made from a southern african ca...   \n",
              "36  walter smith wants to restore the national tea...   \n",
              "37  keeper day heads for preston queens park range...   \n",
              "38  venus williams suffered a first-round defeat f...   \n",
              "39  riots also flared up in the maghnia region clo...   \n",
              "40  vw considers opening indian plant volkswagen i...   \n",
              "41  olympic pole vault champion yelena isinbayeva ...   \n",
              "42  jack cunningham is one of the few blair-era mi...   \n",
              "43  stephen fry is joining the cast of the forthco...   \n",
              "44  julia roberts will play the part of a spider i...   \n",
              "45  british sprint icon linford christie has stepp...   \n",
              "46  Las vegas was named the best film of the year ...   \n",
              "47  santini has resigned as spurs manager tottenha...   \n",
              "48  spokesman said he had no idea where the report...   \n",
              "49  argentine president nestor kirchner and venezu...   \n",
              "\n",
              "                                   ref_interpretation  \\\n",
              "0   ray dvd beats box office takings with a combin...   \n",
              "1   Italian liqueur maker illva saronno agreed to ...   \n",
              "2   Light crude oil futures fell $2.86 to $41.32 a...   \n",
              "3   Theo van gogh was shot and stabbed to death in...   \n",
              "4          hewitt suffers shock defeat to taylor dent   \n",
              "5   msn spaces is free to anyone with a hotmail or...   \n",
              "6   The number of people and businesses connected ...   \n",
              "7               korn s guitarist quits music business   \n",
              "8   leonardo dicaprio was presented with the award...   \n",
              "9   britannia will share £42m windfall with 100,00...   \n",
              "10  jonathan edwards believes idowu can prove his ...   \n",
              "11  ray dvd beats box office takings with a combin...   \n",
              "12  James beattie is not believed to be as serious...   \n",
              "13  Nikkei index of leading shares gained 7.6% dur...   \n",
              "14  sam allardyce signs roma defender vincent cand...   \n",
              "15  byrds producer terry melcher died at 62 after ...   \n",
              "16  klinsmann says it will be difficult for any of...   \n",
              "17  jon thoday is working with steve brown who wro...   \n",
              "18  most gibraltarians say they want to remain bri...   \n",
              "19  viacom has paid out $3.5m (£1.8m) to end inves...   \n",
              "20  mathew tait being named centre in england team...   \n",
              "21                                  mccririck and bez   \n",
              "22  nicolas almagro beat mariano zabaleta 6-7 6-4 ...   \n",
              "23           dick clark is in hospital in Los Angeles   \n",
              "24  former cabinet minister clare short criticises...   \n",
              "25  aaliyah had completed a music video when the p...   \n",
              "26  electrolux shares rise 14% on t Tuesday after ...   \n",
              "27                   gm in the fourth quarter of 2003   \n",
              "28  imf will also reduce its growth estimate for t...   \n",
              "29  inbev agrees to buy alfa-eco stake in sun inte...   \n",
              "30  kenenisa bekele - the reigning world long and ...   \n",
              "31  owen revelled in his return to the starting li...   \n",
              "32                        leeds v saracens headingley   \n",
              "33  wipro india s third-biggest software firm repo...   \n",
              "34        gloucester are interested in mefin davies .   \n",
              "35  phytopharm shares jumped 10.7% on news with an...   \n",
              "36                                       walter smith   \n",
              "37  qpr keeper day heads for preston queens park r...   \n",
              "38  sylvia farina elia beats venus williams 7-5 7-...   \n",
              "39  Butane gas has risen to 200 dinars ($2.77) per...   \n",
              "40  volkswagen says it is considering opening an a...   \n",
              "41  olympic pole vault champion yelena isinbayeva ...   \n",
              "42  jim callaghan will stand down at the next elec...   \n",
              "43  stephen fry will provide the voice of the guid...   \n",
              "44  Julia roberts will play a spider in a new film...   \n",
              "45  lewis-francis is set to compete at birmingham ...   \n",
              "46  imelda staunton has also been recognised for h...   \n",
              "47                   santini resigns as spurs manager   \n",
              "48  Labour spokesman said he had no idea where the...   \n",
              "49  venezuelan presidents hugo chavez and venezuel...   \n",
              "\n",
              "                                  pred_interpretation  \\\n",
              "0   ray has been nominated in six oscar categories...   \n",
              "1   changyu says illva will pay 481.42m yuan ($58....   \n",
              "2   6% us oil prices have fallen by 6% driven down...   \n",
              "3   van gogh s family and celebrities attended the...   \n",
              "4         hewitt suffered shock defeat to taylor dent   \n",
              "5   microsoft is launching a test service to allow...   \n",
              "6   the us is still behind compared to other natio...   \n",
              "7   brian head welch told radio station that his b...   \n",
              "8   leonardo dicaprio 's exceptional career has be...   \n",
              "9   members of the uk s second largest building so...   \n",
              "10  phillips idowu landed 17.30m at the british tr...   \n",
              "11  ray has been nominated in six oscar categories...   \n",
              "12  james beattie has been declared fit for traini...   \n",
              "13    morgan stanley equity strategist naoki kamiyama   \n",
              "14  sam allardyce signs roma defender vincent cand...   \n",
              "15  terry melcher died at his home in beverly hill...   \n",
              "16  jurgen klinsmann has warned lehmann he may hav...   \n",
              "17  frank capra s 1946 movie starring james stewar...   \n",
              "18  mr straw and moratinos agreed to establish a b...   \n",
              "19  fcc was looking into 50 shows including those ...   \n",
              "20  mathew tait named as centre in england team to...   \n",
              "21              jackie stallone 's mother was evicted   \n",
              "22  nicolas almagro is the fifth spaniard to reach...   \n",
              "23  dick clark is in hospital in los angeles after...   \n",
              "24  former cabinet minister clare short criticised...   \n",
              "25  aaliyah 's record company has failed to sue th...   \n",
              "26  swedish firm to relocate about 10 of its 27 pl...   \n",
              "27  gm s net profits fell 37% in the last quarter ...   \n",
              "28  international monetary fund to cut german grow...   \n",
              "29     inbev to buy alfa-eco s stake in sun interbrew   \n",
              "30  kathy butler continues her impressive year wit...   \n",
              "31           owen is confident real can close the gap   \n",
              "32  leeds v saracens -lrb- fri -rrb- -lrb- fri -rr...   \n",
              "33  wipro india s third-biggest software firm repo...   \n",
              "34                                         gloucester   \n",
              "35  phytopharm and unilever will develop the snack...   \n",
              "36  walter smith wants to restore respectability i...   \n",
              "37  keeper day heads for preston queens park range...   \n",
              "38  venus williams suffered a first-round defeat f...   \n",
              "39  butane gas and fuel oil are used to heat homes...   \n",
              "40  volkswagen is considering building a car facto...   \n",
              "41  olympic pole vault champion yelena isinbayeva ...   \n",
              "42  jack cunningham is one of the few blair-era mi...   \n",
              "43  stephen fry is joining the cast of the hitchhi...   \n",
              "44  julia roberts will play the part of a spider i...   \n",
              "45                                 britain 100m final   \n",
              "46              liam neeson won best actor for kinsey   \n",
              "47                   santini resigns as spurs manager   \n",
              "48  tony blair is planning a snap general election...   \n",
              "49  argentine president kirchner venezuelan presid...   \n",
              "\n",
              "                                           ref_topics pred_topics  \n",
              "0            ['ray', 'dvd', 'oscar', 'film', 'actor']          []  \n",
              "1     ['changyu', 'chinese', 'china', 'yuan', 'wine']          []  \n",
              "2   ['futures', 'nymex', 'oil', 'crude', 'refineri...          []  \n",
              "3   ['gogh', 'stabbed', 'amsterdam', 'murder', 'van']          []  \n",
              "4   ['hewitt', 'dent', 'lleyton', 'taylor', 'finals']          []  \n",
              "5   ['msn', 'hotmail', 'blogs', 'spaces', 'messeng...          []  \n",
              "6   ['broadband', 'telecoms', 'connections', 'numb...          []  \n",
              "7      ['korn', 'guitarist', 'quits', 'band', 'quit']          []  \n",
              "8   ['leonardo', 'dicaprio', 'actor', 'award', 'sc...          []  \n",
              "9   ['britannia', 'windfall', 'payouts', 'members'...          []  \n",
              "10  ['edwards', 'phillips', 'idowu', 'jonathan', '...          []  \n",
              "11           ['ray', 'dvd', 'oscar', 'film', 'actor']          []  \n",
              "12  ['beattie', 'injured', 'james', 'hurt', 'assau...          []  \n",
              "13  ['nikkei', 'markets', 'optimism', 'index', 'sh...          []  \n",
              "14  ['roma', 'bolton', 'candela', 'luigi', 'defend...          []  \n",
              "15    ['manson', 'byrds', 'dies', 'terry', 'murders']          []  \n",
              "16  ['lehmann', 'kahn', 'klinsmann', 'keeper', 'ge...          []  \n",
              "17  ['musical', 'capra', 'theatre', 'spend', 'spen...          []  \n",
              "18  ['gibraltarians', 'kent', 'summit', 'british',...          []  \n",
              "19      ['viacom', 'fcc', 'paid', '5m', 'settlement']          []  \n",
              "20  ['tait', 'newcastle', 'cardiff', 'centre', 'mi...          []  \n",
              "21  ['housemates', 'contestant', 'evicted', 'mccri...          []  \n",
              "22  ['rafael', 'nadal', 'almagro', 'mariano', 'mat...          []  \n",
              "23    ['clark', 'stroke', 'tv', 'dick', 'television']          []  \n",
              "24  ['resigned', 'secretary', 'minister', 'short',...          []  \n",
              "25  ['aaliyah', 'singer', 'crashed', 'bahamas', 'p...          []  \n",
              "26  ['electrolux', 'shares', 'company', 'restructu...          []  \n",
              "27          ['gm', 'revenues', 'losses', '5m', '8bn']          []  \n",
              "28  ['imf', 'eurozone', 'economy', 'unemployment',...          []  \n",
              "29     ['inbev', 'brewer', 'brewing', 'alfa', 'beer']          []  \n",
              "30  ['kathy', 'kenenisa', 'ethiopia', 'victory', '...          []  \n",
              "31  ['revelled', 'owen', 'betis', 'victory', 'retu...          []  \n",
              "32  ['leeds', 'saracen', 'saracens', 'mcmullen', '...          []  \n",
              "33        ['wipro', 'profit', 'income', 'net', '3bn']          []  \n",
              "34  ['davies', 'wales', 'gloucester', 'mefin', 'ho...          []  \n",
              "35  ['phytopharm', 'shares', 'hoodia', 'cactus', '...          []  \n",
              "36  ['smith', 'squad', 'manchester', 'cheshire', '...          []  \n",
              "37   ['preston', 'qpr', 'keeper', 'rangers', 'rossi']          []  \n",
              "38     ['venus', 'sylvia', 'mirza', 'elia', 'farina']          []  \n",
              "39  ['butane', 'canister', 'gas', 'dinars', 'prote...          []  \n",
              "40  ['volkswagen', 'decision', 'assembly', 'german...          []  \n",
              "41  ['yelena', 'isinbayeva', 'vault', 'olympic', '...          []  \n",
              "42  ['callaghan', 'blair', 'mp', 'ministers', 'lab...          []  \n",
              "43      ['guide', 'actor', 'arthur', 'voice', 'book']          []  \n",
              "44  ['spider', 'julia', 'actress', 'roberts', 'wil...          []  \n",
              "45  ['collins', 'lewis', 'linford', 'francis', 'ma...          []  \n",
              "46    ['actress', 'imelda', 'actor', 'vera', 'payne']          []  \n",
              "47  ['santini', 'resigns', 'manager', 'tottenham',...          []  \n",
              "48  ['blair', 'reports', 'election', 'labour', 'fe...          []  \n",
              "49  ['venezuelan', 'chavez', 'venezuela', 'buenos'...          []  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-31f7d146-04cd-437e-adb9-c4ac6a357942\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>input_text</th>\n",
              "      <th>ref_summary</th>\n",
              "      <th>pred_summary</th>\n",
              "      <th>ref_interpretation</th>\n",
              "      <th>pred_interpretation</th>\n",
              "      <th>ref_topics</th>\n",
              "      <th>pred_topics</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ray dvd beats box office takings oscar-nominat...</td>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td>ray has been nominated in six oscar categories...</td>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td>ray has been nominated in six oscar categories...</td>\n",
              "      <td>['ray', 'dvd', 'oscar', 'film', 'actor']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>chinese wine tempts italy s illva italy s illv...</td>\n",
              "      <td>Italian liqueur maker illva saronno has agreed...</td>\n",
              "      <td>changyu said in a statement to the shenzhen st...</td>\n",
              "      <td>Italian liqueur maker illva saronno agreed to ...</td>\n",
              "      <td>changyu says illva will pay 481.42m yuan ($58....</td>\n",
              "      <td>['changyu', 'chinese', 'china', 'yuan', 'wine']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>mild winter drives us oil down 6% us oil price...</td>\n",
              "      <td>Light crude oil futures fell $2.86 to $41.32 a...</td>\n",
              "      <td>6% us oil prices have fallen by 6% driven down...</td>\n",
              "      <td>Light crude oil futures fell $2.86 to $41.32 a...</td>\n",
              "      <td>6% us oil prices have fallen by 6% driven down...</td>\n",
              "      <td>['futures', 'nymex', 'oil', 'crude', 'refineri...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>dutch watch van gogh s last film the last film...</td>\n",
              "      <td>Theo van gogh was shot and stabbed to death in...</td>\n",
              "      <td>members of van gogh s family and celebrities a...</td>\n",
              "      <td>Theo van gogh was shot and stabbed to death in...</td>\n",
              "      <td>van gogh s family and celebrities attended the...</td>\n",
              "      <td>['gogh', 'stabbed', 'amsterdam', 'murder', 'van']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>hewitt falls to dent in adelaide lleyton hewit...</td>\n",
              "      <td>lleyton hewitt suffered a shock defeat to tayl...</td>\n",
              "      <td>lleyton hewitt suffered a shock defeat to tayl...</td>\n",
              "      <td>hewitt suffers shock defeat to taylor dent</td>\n",
              "      <td>hewitt suffered shock defeat to taylor dent</td>\n",
              "      <td>['hewitt', 'dent', 'lleyton', 'taylor', 'finals']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>microsoft gets the blogging bug software giant...</td>\n",
              "      <td>msn spaces is free to anyone with a hotmail or...</td>\n",
              "      <td>microsoft gets the blogging bug software giant...</td>\n",
              "      <td>msn spaces is free to anyone with a hotmail or...</td>\n",
              "      <td>microsoft is launching a test service to allow...</td>\n",
              "      <td>['msn', 'hotmail', 'blogs', 'spaces', 'messeng...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>broadband steams ahead in the us more and more...</td>\n",
              "      <td>The number of people and businesses connected ...</td>\n",
              "      <td>In a report it said there were more than 32 mi...</td>\n",
              "      <td>The number of people and businesses connected ...</td>\n",
              "      <td>the us is still behind compared to other natio...</td>\n",
              "      <td>['broadband', 'telecoms', 'connections', 'numb...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>rock group korn s guitarist quits the guitaris...</td>\n",
              "      <td>rock group korn s guitarist quits the guitaris...</td>\n",
              "      <td>brian head welch told a radio station in calif...</td>\n",
              "      <td>korn s guitarist quits music business</td>\n",
              "      <td>brian head welch told radio station that his b...</td>\n",
              "      <td>['korn', 'guitarist', 'quits', 'band', 'quit']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>career honour for actor dicaprio actor leonard...</td>\n",
              "      <td>leonardo dicaprio honoured at the santa barbar...</td>\n",
              "      <td>the achievement award was created to commemora...</td>\n",
              "      <td>leonardo dicaprio was presented with the award...</td>\n",
              "      <td>leonardo dicaprio 's exceptional career has be...</td>\n",
              "      <td>['leonardo', 'dicaprio', 'actor', 'award', 'sc...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>britannia members  £42m windfall more than 800...</td>\n",
              "      <td>britannia members will share £42m windfall wit...</td>\n",
              "      <td>Mitglieder of the uk s second largest building...</td>\n",
              "      <td>britannia will share £42m windfall with 100,00...</td>\n",
              "      <td>members of the uk s second largest building so...</td>\n",
              "      <td>['britannia', 'windfall', 'payouts', 'members'...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>edwards tips idowu for euro gold world outdoor...</td>\n",
              "      <td>jonathan edwards believes phillips idowu can t...</td>\n",
              "      <td>phillips idowu landed 17.30m at the british tr...</td>\n",
              "      <td>jonathan edwards believes idowu can prove his ...</td>\n",
              "      <td>phillips idowu landed 17.30m at the british tr...</td>\n",
              "      <td>['edwards', 'phillips', 'idowu', 'jonathan', '...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>ray dvd beats box office takings oscar-nominat...</td>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td>ray has been nominated in six oscar categories...</td>\n",
              "      <td>ray dvd beats box office takings with a combin...</td>\n",
              "      <td>ray has been nominated in six oscar categories...</td>\n",
              "      <td>['ray', 'dvd', 'oscar', 'film', 'actor']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>beattie return calms attack fears everton stri...</td>\n",
              "      <td>James beattie is not believed to be as serious...</td>\n",
              "      <td>Everton striker james beattie has been declare...</td>\n",
              "      <td>James beattie is not believed to be as serious...</td>\n",
              "      <td>james beattie has been declared fit for traini...</td>\n",
              "      <td>['beattie', 'injured', 'james', 'hurt', 'assau...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>stock market eyes japan recovery japanese shar...</td>\n",
              "      <td>Nikkei index of leading shares gained 7.6% dur...</td>\n",
              "      <td>In 2005 it will rise toward 13 000 predicted m...</td>\n",
              "      <td>Nikkei index of leading shares gained 7.6% dur...</td>\n",
              "      <td>morgan stanley equity strategist naoki kamiyama</td>\n",
              "      <td>['nikkei', 'markets', 'optimism', 'index', 'sh...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>candela completes bolton switch bolton boss sa...</td>\n",
              "      <td>bolton boss sam allardyce has signed roma defe...</td>\n",
              "      <td>sam allardyce has signed roma defender vincent...</td>\n",
              "      <td>sam allardyce signs roma defender vincent cand...</td>\n",
              "      <td>sam allardyce signs roma defender vincent cand...</td>\n",
              "      <td>['roma', 'bolton', 'candela', 'luigi', 'defend...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>byrds producer melcher dies at 62 record produ...</td>\n",
              "      <td>byrds producer  terry melcher dies at 62 after...</td>\n",
              "      <td>terry melcher died on friday night at his home...</td>\n",
              "      <td>byrds producer terry melcher died at 62 after ...</td>\n",
              "      <td>terry melcher died at his home in beverly hill...</td>\n",
              "      <td>['manson', 'byrds', 'dies', 'terry', 'murders']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>klinsmann issues lehmann warning germany coach...</td>\n",
              "      <td>lehmann is understudy to oliver kahn in the ge...</td>\n",
              "      <td>Lehmann is understudy to oliver kahn in the ge...</td>\n",
              "      <td>klinsmann says it will be difficult for any of...</td>\n",
              "      <td>jurgen klinsmann has warned lehmann he may hav...</td>\n",
              "      <td>['lehmann', 'kahn', 'klinsmann', 'keeper', 'ge...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>musical treatment for capra film the classic f...</td>\n",
              "      <td>musical treatment for capra film the classic f...</td>\n",
              "      <td>frank capra s 1946 movie starring james stewar...</td>\n",
              "      <td>jon thoday is working with steve brown who wro...</td>\n",
              "      <td>frank capra s 1946 movie starring james stewar...</td>\n",
              "      <td>['musical', 'capra', 'theatre', 'spend', 'spen...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>talks held on gibraltar s future two days of t...</td>\n",
              "      <td>Two-day summit at foreign secretary s official...</td>\n",
              "      <td>In october mr straw and his spanish counterpar...</td>\n",
              "      <td>most gibraltarians say they want to remain bri...</td>\n",
              "      <td>mr straw and moratinos agreed to establish a b...</td>\n",
              "      <td>['gibraltarians', 'kent', 'summit', 'british',...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>&amp;#163;1.8m indecency fine for viacom media gia...</td>\n",
              "      <td>viacom has paid out $3.5m (£1.8m) to end inves...</td>\n",
              "      <td>fcc was looking into 50 shows including those ...</td>\n",
              "      <td>viacom has paid out $3.5m (£1.8m) to end inves...</td>\n",
              "      <td>fcc was looking into 50 shows including those ...</td>\n",
              "      <td>['viacom', 'fcc', 'paid', '5m', 'settlement']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>teenager tait picked for england newcastle s t...</td>\n",
              "      <td>teenager tait picked for england newcastle s t...</td>\n",
              "      <td>mathew tait has been named as a centre in engl...</td>\n",
              "      <td>mathew tait being named centre in england team...</td>\n",
              "      <td>mathew tait named as centre in england team to...</td>\n",
              "      <td>['tait', 'newcastle', 'cardiff', 'centre', 'mi...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>mccririck out of big brother show racing pundi...</td>\n",
              "      <td>racing pundit john mccririck has become the la...</td>\n",
              "      <td>mccririck was ordered to leave the house on mo...</td>\n",
              "      <td>mccririck and bez</td>\n",
              "      <td>jackie stallone 's mother was evicted</td>\n",
              "      <td>['housemates', 'contestant', 'evicted', 'mccri...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>almagro continues spanish surge unseeded nicol...</td>\n",
              "      <td>Unseeded nicolas almagro becomes fifth spaniar...</td>\n",
              "      <td>nicolas almagro becomes the fifth spaniard to ...</td>\n",
              "      <td>nicolas almagro beat mariano zabaleta 6-7 6-4 ...</td>\n",
              "      <td>nicolas almagro is the fifth spaniard to reach...</td>\n",
              "      <td>['rafael', 'nadal', 'almagro', 'mariano', 'mat...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>us tv host clark suffers stroke veteran us tel...</td>\n",
              "      <td>us tv host clark suffers stroke veteran us tel...</td>\n",
              "      <td>dick clark is in hospital in los angeles after...</td>\n",
              "      <td>dick clark is in hospital in Los Angeles</td>\n",
              "      <td>dick clark is in hospital in los angeles after...</td>\n",
              "      <td>['clark', 'stroke', 'tv', 'dick', 'television']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>short attacks us over tsunami aid former cabin...</td>\n",
              "      <td>Former cabinet minister clare short criticises...</td>\n",
              "      <td>ms short attacks us over tsunami aid former ca...</td>\n",
              "      <td>former cabinet minister clare short criticises...</td>\n",
              "      <td>former cabinet minister clare short criticised...</td>\n",
              "      <td>['resigned', 'secretary', 'minister', 'short',...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>aaliyah claim dismissed by court late r&amp;b star...</td>\n",
              "      <td>aaliyah had completed a music video when the p...</td>\n",
              "      <td>aaliyah s record company has failed in an atte...</td>\n",
              "      <td>aaliyah had completed a music video when the p...</td>\n",
              "      <td>aaliyah 's record company has failed to sue th...</td>\n",
              "      <td>['aaliyah', 'singer', 'crashed', 'bahamas', 'p...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>electrolux to export europe jobs electrolux sa...</td>\n",
              "      <td>electrolux saw its shares rise 14% on t Tuesda...</td>\n",
              "      <td>swedish firm the world s largest maker of home...</td>\n",
              "      <td>electrolux shares rise 14% on t Tuesday after ...</td>\n",
              "      <td>swedish firm to relocate about 10 of its 27 pl...</td>\n",
              "      <td>['electrolux', 'shares', 'company', 'restructu...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>european losses hit gm s profits general motor...</td>\n",
              "      <td>gm earned $630m (£481.5m) in the october-to-de...</td>\n",
              "      <td>gm s profits general motors (gm) saw its net p...</td>\n",
              "      <td>gm in the fourth quarter of 2003</td>\n",
              "      <td>gm s net profits fell 37% in the last quarter ...</td>\n",
              "      <td>['gm', 'revenues', 'losses', '5m', '8bn']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>imf  cuts  german growth estimate the internat...</td>\n",
              "      <td>imf will also reduce its growth estimate for t...</td>\n",
              "      <td>Imf cuts german growth estimate the internatio...</td>\n",
              "      <td>imf will also reduce its growth estimate for t...</td>\n",
              "      <td>international monetary fund to cut german grow...</td>\n",
              "      <td>['imf', 'eurozone', 'economy', 'unemployment',...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>beer giant swallows russian firm brewing giant...</td>\n",
              "      <td>inbev agrees to buy alfa-eco stake in sun inte...</td>\n",
              "      <td>russian firm brewing giant inbev has agreed to...</td>\n",
              "      <td>inbev agrees to buy alfa-eco stake in sun inte...</td>\n",
              "      <td>inbev to buy alfa-eco s stake in sun interbrew</td>\n",
              "      <td>['inbev', 'brewer', 'brewing', 'alfa', 'beer']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>butler strikes gold in spain britain s kathy b...</td>\n",
              "      <td>kathy butler continued her impressive year wit...</td>\n",
              "      <td>kathy butler continued her impressive year wit...</td>\n",
              "      <td>kenenisa bekele - the reigning world long and ...</td>\n",
              "      <td>kathy butler continues her impressive year wit...</td>\n",
              "      <td>['kathy', 'kenenisa', 'ethiopia', 'victory', '...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>owen delighted with real display michael owen ...</td>\n",
              "      <td>michael owen revelled in his return to the sta...</td>\n",
              "      <td>robert carlos made it 2-0 at the break smashin...</td>\n",
              "      <td>owen revelled in his return to the starting li...</td>\n",
              "      <td>owen is confident real can close the gap</td>\n",
              "      <td>['revelled', 'owen', 'betis', 'victory', 'retu...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>leeds v saracens (fri) headingley  friday  25 ...</td>\n",
              "      <td>leeds v saracens (fri) headingley  friday  25 ...</td>\n",
              "      <td>leeds v saracens (fri) headingley friday 25 fe...</td>\n",
              "      <td>leeds v saracens headingley</td>\n",
              "      <td>leeds v saracens -lrb- fri -rrb- -lrb- fri -rr...</td>\n",
              "      <td>['leeds', 'saracen', 'saracens', 'mcmullen', '...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>wipro beats forecasts once again wipro  india ...</td>\n",
              "      <td>wipro  india s third-biggest software firm  ha...</td>\n",
              "      <td>wipro india s third-biggest software firm has ...</td>\n",
              "      <td>wipro india s third-biggest software firm repo...</td>\n",
              "      <td>wipro india s third-biggest software firm repo...</td>\n",
              "      <td>['wipro', 'profit', 'income', 'net', '3bn']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>davies favours gloucester future wales hooker ...</td>\n",
              "      <td>future wales hooker mefin davies is likely to ...</td>\n",
              "      <td>Ifin davies is likely to stay with english sid...</td>\n",
              "      <td>gloucester are interested in mefin davies .</td>\n",
              "      <td>gloucester</td>\n",
              "      <td>['davies', 'wales', 'gloucester', 'mefin', 'ho...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>cactus diet deal for phytopharm a slimming aid...</td>\n",
              "      <td>phytopharm shares jumped 10.7% on the news wit...</td>\n",
              "      <td>a slimming aid made from a southern african ca...</td>\n",
              "      <td>phytopharm shares jumped 10.7% on news with an...</td>\n",
              "      <td>phytopharm and unilever will develop the snack...</td>\n",
              "      <td>['phytopharm', 'shares', 'hoodia', 'cactus', '...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>smith aims to bring back respect scotland mana...</td>\n",
              "      <td>walter smith has joined his first squad for a ...</td>\n",
              "      <td>walter smith wants to restore the national tea...</td>\n",
              "      <td>walter smith</td>\n",
              "      <td>walter smith wants to restore respectability i...</td>\n",
              "      <td>['smith', 'squad', 'manchester', 'cheshire', '...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>qpr keeper day heads for preston queens park r...</td>\n",
              "      <td>qpr keeper day heads for preston queens park r...</td>\n",
              "      <td>keeper day heads for preston queens park range...</td>\n",
              "      <td>qpr keeper day heads for preston queens park r...</td>\n",
              "      <td>keeper day heads for preston queens park range...</td>\n",
              "      <td>['preston', 'qpr', 'keeper', 'rangers', 'rossi']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>venus stunned by farina elia venus williams su...</td>\n",
              "      <td>sylvia farina elia beats venus williams 7-5 7-...</td>\n",
              "      <td>venus williams suffered a first-round defeat f...</td>\n",
              "      <td>sylvia farina elia beats venus williams 7-5 7-...</td>\n",
              "      <td>venus williams suffered a first-round defeat f...</td>\n",
              "      <td>['venus', 'sylvia', 'mirza', 'elia', 'farina']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>algeria hit by further gas riots algeria suffe...</td>\n",
              "      <td>Price of butane gas has risen to 200 dinars ($...</td>\n",
              "      <td>riots also flared up in the maghnia region clo...</td>\n",
              "      <td>Butane gas has risen to 200 dinars ($2.77) per...</td>\n",
              "      <td>butane gas and fuel oil are used to heat homes...</td>\n",
              "      <td>['butane', 'canister', 'gas', 'dinars', 'prote...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>vw considers opening indian plant volkswagen i...</td>\n",
              "      <td>volkswagen said it was studying the possibilit...</td>\n",
              "      <td>vw considers opening indian plant volkswagen i...</td>\n",
              "      <td>volkswagen says it is considering opening an a...</td>\n",
              "      <td>volkswagen is considering building a car facto...</td>\n",
              "      <td>['volkswagen', 'decision', 'assembly', 'german...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>isinbayeva heads for birmingham olympic pole v...</td>\n",
              "      <td>olympic pole vault champion yelena isinbayeva ...</td>\n",
              "      <td>olympic pole vault champion yelena isinbayeva ...</td>\n",
              "      <td>olympic pole vault champion yelena isinbayeva ...</td>\n",
              "      <td>olympic pole vault champion yelena isinbayeva ...</td>\n",
              "      <td>['yelena', 'isinbayeva', 'vault', 'olympic', '...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>jack cunningham to stand down veteran labour m...</td>\n",
              "      <td>veteran Labour MP will stand down at the next ...</td>\n",
              "      <td>jack cunningham is one of the few blair-era mi...</td>\n",
              "      <td>jim callaghan will stand down at the next elec...</td>\n",
              "      <td>jack cunningham is one of the few blair-era mi...</td>\n",
              "      <td>['callaghan', 'blair', 'mp', 'ministers', 'lab...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>fry set for role in hitchhiker s actor stephen...</td>\n",
              "      <td>actor stephen fry will provide the voice of th...</td>\n",
              "      <td>stephen fry is joining the cast of the forthco...</td>\n",
              "      <td>stephen fry will provide the voice of the guid...</td>\n",
              "      <td>stephen fry is joining the cast of the hitchhi...</td>\n",
              "      <td>['guide', 'actor', 'arthur', 'voice', 'book']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>actress roberts takes spider role actress juli...</td>\n",
              "      <td>Julia roberts will play a spider in a new film...</td>\n",
              "      <td>julia roberts will play the part of a spider i...</td>\n",
              "      <td>Julia roberts will play a spider in a new film...</td>\n",
              "      <td>julia roberts will play the part of a spider i...</td>\n",
              "      <td>['spider', 'julia', 'actress', 'roberts', 'wil...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>lewis-francis turns to christie mark lewis-fra...</td>\n",
              "      <td>lewis-francis has stepped up his preparations ...</td>\n",
              "      <td>british sprint icon linford christie has stepp...</td>\n",
              "      <td>lewis-francis is set to compete at birmingham ...</td>\n",
              "      <td>britain 100m final</td>\n",
              "      <td>['collins', 'lewis', 'linford', 'francis', 'ma...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>wine comedy wins critics  award quirky comedy ...</td>\n",
              "      <td>The us movie also picked up four other accolad...</td>\n",
              "      <td>Las vegas was named the best film of the year ...</td>\n",
              "      <td>imelda staunton has also been recognised for h...</td>\n",
              "      <td>liam neeson won best actor for kinsey</td>\n",
              "      <td>['actress', 'imelda', 'actor', 'vera', 'payne']</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>santini resigns as spurs manager tottenham man...</td>\n",
              "      <td>jacques santini resigns as spurs manager totte...</td>\n",
              "      <td>santini has resigned as spurs manager tottenha...</td>\n",
              "      <td>santini resigns as spurs manager</td>\n",
              "      <td>santini resigns as spurs manager</td>\n",
              "      <td>['santini', 'resigns', 'manager', 'tottenham',...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>february poll claim  speculation  reports that...</td>\n",
              "      <td>Labour spokesman said he had no idea where the...</td>\n",
              "      <td>spokesman said he had no idea where the report...</td>\n",
              "      <td>Labour spokesman said he had no idea where the...</td>\n",
              "      <td>tony blair is planning a snap general election...</td>\n",
              "      <td>['blair', 'reports', 'election', 'labour', 'fe...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>argentina  venezuela in oil deal argentina and...</td>\n",
              "      <td>Argentine president nestor kirchner and venezu...</td>\n",
              "      <td>argentine president nestor kirchner and venezu...</td>\n",
              "      <td>venezuelan presidents hugo chavez and venezuel...</td>\n",
              "      <td>argentine president kirchner venezuelan presid...</td>\n",
              "      <td>['venezuelan', 'chavez', 'venezuela', 'buenos'...</td>\n",
              "      <td>[]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-31f7d146-04cd-437e-adb9-c4ac6a357942')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-31f7d146-04cd-437e-adb9-c4ac6a357942 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-31f7d146-04cd-437e-adb9-c4ac6a357942');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d763b909-cd32-4a80-add5-e4d39c540850\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d763b909-cd32-4a80-add5-e4d39c540850')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d763b909-cd32-4a80-add5-e4d39c540850 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"print(\\\"Saved mismatches_full_for_review\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"input_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 49,\n        \"samples\": [\n          \"candela completes bolton switch bolton boss sam allardyce has signed roma defender vincent candela on a five-month deal.  the 31-year-old former france international gave his last press conference as a roma player on monday  anouncing his move to bolton.  i have signed a five-month contract with bolton   said candela  who will travel to england on tuesday.  in june i will decide whether to continue to play for bolton or retire from professional football.  allardyce hopes candela s arrival will relieve bolton s injury crisis after defender nicky hunt limped out injured during oldham s 1-0 win against oldham in the fa cup on sunday.  in light of what has happened to nicky hunt  with his injury  it might be a blessing in disguise that we can bring in a highly-experienced full-back to help with our injuries at the back   allardyce said.  he has an outstanding pedigree in the game and has won honours at the highest level including the world cup in 1998.  he has not played regular football this year but is eager to impress in the premiership.  he can play in any position at the back and despite him being predominately right-footed he has played the majority of his career at left-back.  candela  who was a member of the roma side that won the title in 2001  has made only seven league appearances this season for luigi del neri s side.\",\n          \"wine comedy wins critics  award quirky comedy sideways was named the best film of the year by the los angeles film critics association.  the us movie also picked up four other accolades including best director for alexander payne and supporting actor for thomas haden church. british actress imelda staunton has again been recognised for her role in vera drake  winning best actress  while liam neeson won best actor for kinsey. the awards will be handed out on 13 january at a ceremony in las vegas.  sideways tells the story of two men who take a road trip through california s wine regions and also stars paul giamatti. virginia madsen was also named best supporting actress for her performance in the film. house of flying daggers  directed by yimou zhang  was named best foreign language film  while the animation award went to the incredibles. unusually  the runners-up in categories were also named with clint eastwood s million dollar baby just missing out on the best film award. the best director runner-up was martin scorsese for the aviator. a career achievement award will be handed to veteran actor and comic jerry lewis at the ceremony next year.\",\n          \"february poll claim  speculation  reports that tony blair is planning a snap general election for february 2005 have been described as  idle speculation  by downing street.  a spokesman said he had  no idea  where the reports in the sunday times and sunday telegraph had come from. the papers suggest ministers believe the government could benefit from a  baghdad bounce  following successful iraq elections in january. a british general election was last held in february in 1974. in that election  edward heath lost and failed to build a coalition with the liberals. harold wilson took over and increased his majority later in the year in a second election  the latest speculation suggests the prime minister favours a february poll in order to exploit his current opinion poll lead over conservative leader michael howard. but that strategy could prompt criticism he was seeking to  cut and run  after less then four years of a parliamentary term. the papers report that alan milburn  labour s head of elections strategy  has played a key role in the plan for a february election  which would include a new year advertising blitz. new labour s campaign  both newspapers said  would be centred around the slogan  britain is working . a labour party spokesman said the election date was ultimately a matter for mr blair  but he was unaware of anything to suggest it would be in february. most commentators have been expecting an election on 5 may. the last election was in june 2001.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ref_summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 49,\n        \"samples\": [\n          \"bolton boss sam allardyce has signed roma defender vincent candela on a five-month deal . The 31-year-old former france international gave his last press conference as a roma player on monday . candela was a member of the roma side that won the title in 2001 . He has made only seven league appearances this season for luigi\",\n          \"The us movie also picked up four other accolades including best director for alexander payne and supporting actor for thomas haden church .  imelda staunton has again been recognised for her role in vera drake winning best actress .\",\n          \"Labour spokesman said he had no idea where the reports had come from . PM favours a february poll in order to exploit his current opinion poll lead over michael howard . Labour party spokesman said election date was ultimately a matter for mr blair .\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 49,\n        \"samples\": [\n          \"sam allardyce has signed roma defender vincent candela on a five-month deal . the 31-year-old former france international will travel to england on tuesday . he will decide whether to continue to play for bolton or retire from professional football .\",\n          \"Las vegas was named the best film of the year by the los angeles film critics association . british actress imelda staunton has again been recognised for her role in vera drake winning best actress while liam neeson won best actor for kinsey . sideways tells the story of two men who take a road trip through california s wine regions .\",\n          \"spokesman said he had no idea where the reports in the sunday times and sunday telegraph had come from . reports that tony blair is planning a snap general election for february 2005 have been described as idle speculation by downing street . the papers suggest ministers believe the government could benefit from a baghdad bounce following successful iraq elections in january .\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ref_interpretation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 49,\n        \"samples\": [\n          \"sam allardyce signs roma defender vincent candela on a five-month deal\",\n          \"imelda staunton has also been recognised for her role in vera drake winning best actress\",\n          \"Labour spokesman said he had no idea where the reports came from\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_interpretation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 49,\n        \"samples\": [\n          \"sam allardyce signs roma defender vincent candela on five-month deal\",\n          \"liam neeson won best actor for kinsey\",\n          \"tony blair is planning a snap general election for february 2005\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ref_topics\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 49,\n        \"samples\": [\n          \"['roma', 'bolton', 'candela', 'luigi', 'defender']\",\n          \"['actress', 'imelda', 'actor', 'vera', 'payne']\",\n          \"['blair', 'reports', 'election', 'labour', 'february']\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_topics\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"[]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved mismatches_full_for_review.csv (download from Files sidebar if needed).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell H: Save figures programmatically + save summary JSON\n",
        "import json, matplotlib.pyplot as plt\n",
        "\n",
        "out_dir = \"report_outputs\"\n",
        "os.makedirs(out_dir, exist_ok=True)\n",
        "\n",
        "# Save key metrics JSON\n",
        "report = {\n",
        "    \"rows\": n_rows,\n",
        "    \"rouge_summary_percent\": rouge_summary,\n",
        "    \"rouge_interpretation_percent\": rouge_interp,\n",
        "    \"topic_metrics\": topic_stats,\n",
        "    \"model_dir\": model_dir_found,\n",
        "    \"inference_time_s\": metrics.get(\"inference_time_s\"),\n",
        "    \"estimated_energy_Wh\": metrics.get(\"estimated_energy_Wh\")\n",
        "}\n",
        "with open(os.path.join(out_dir, \"summary_report.json\"), \"w\") as f:\n",
        "    json.dump(report, f, indent=2)\n",
        "\n",
        "# Save a sample CSV\n",
        "df.head(200).to_csv(os.path.join(out_dir, \"predictions_sample_200.csv\"), index=False)\n",
        "\n",
        "print(\"Saved summary_report.json and sample CSV to\", out_dir)\n",
        "print(\"You can download the report_outputs/ folder from the Colab Files sidebar.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zxlf7HnWNY2u",
        "outputId": "14b3e9f8-dcb6-4324-f0d1-2e1aed18776f"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved summary_report.json and sample CSV to report_outputs\n",
            "You can download the report_outputs/ folder from the Colab Files sidebar.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Save tokenizer explicitly if you used tokenizer_student\n",
        "try:\n",
        "    tokenizer_student.save_pretrained(\"./student_model_final/tokenizer\")\n",
        "    print(\"Tokenizer saved to ./student_model_final/tokenizer\")\n",
        "except Exception as e:\n",
        "    print(\"Could not save tokenizer_student:\", e)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xa_iB6cqO4XO",
        "outputId": "5aaedfe2-5d2d-4d89-9bc6-b2190d6abaaa"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tokenizer saved to ./student_model_final/tokenizer\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "cfg = {\n",
        "  \"student_model_dir\": \"./student_model_final\",\n",
        "  \"student_model_name\": globals().get(\"STUDENT_MODEL_NAME\"),\n",
        "  \"MAX_INPUT_LENGTH\": globals().get(\"MAX_INPUT_LENGTH\"),\n",
        "  \"MAX_TARGET_LENGTH\": globals().get(\"MAX_TARGET_LENGTH\"),\n",
        "  \"num_train_epochs\": globals().get(\"training_args\").num_train_epochs if \"training_args\" in globals() else None,\n",
        "  \"random_seed\": globals().get(\"RANDOM_SEED\"),\n",
        "  \"notes\": \"Includes beam-generated preds and augmented interpretation/topic fill-ins\"\n",
        "}\n",
        "with open(\"training_config.json\",\"w\") as f:\n",
        "    json.dump(cfg, f, indent=2)\n",
        "print(\"Saved training_config.json\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6oVb4mlBO-Zm",
        "outputId": "354b571f-761b-4f46-cdc4-2ef77298bd10"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved training_config.json\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.download('student_beam_metrics.json')   # change filename as needed\n",
        "# for a CSV:\n",
        "# files.download('student_predictions_beam_augmented.csv')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "HD0WvWalPDCF",
        "outputId": "418607ef-969e-4ef3-a8ab-84e68885a5ce"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_bef3db00-2147-44e6-8fe5-3c647bee1072\", \"student_beam_metrics.json\", 606)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyPGsjZSCTxeXrY5TUunaN3u",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "9f85267a28224d918669f878a9ab2311": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_a7d27b9b67304b55b36c0fccf8c42f80",
              "IPY_MODEL_4ea02f708b804fd08d276b21fa687573",
              "IPY_MODEL_33cfd1735ed1447cb9df0d8a3afc92b4"
            ],
            "layout": "IPY_MODEL_d49df7bd37be46e6a27d2f051e0bf0e3"
          }
        },
        "a7d27b9b67304b55b36c0fccf8c42f80": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f985c61fd42d4a2a9f531094a55b035b",
            "placeholder": "​",
            "style": "IPY_MODEL_09d99e64667f4e60a271188afb767879",
            "value": "config.json: "
          }
        },
        "4ea02f708b804fd08d276b21fa687573": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_005784972c3f4e1db33baf33e64edba8",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_188c5cf1e9a24fa9ad89c42570582bb2",
            "value": 1
          }
        },
        "33cfd1735ed1447cb9df0d8a3afc92b4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_443f9547c04247d5acc2c22f1d62f256",
            "placeholder": "​",
            "style": "IPY_MODEL_943929e56cf24394a9c100f794ca8c1b",
            "value": " 1.80k/? [00:00&lt;00:00, 59.0kB/s]"
          }
        },
        "d49df7bd37be46e6a27d2f051e0bf0e3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f985c61fd42d4a2a9f531094a55b035b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "09d99e64667f4e60a271188afb767879": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "005784972c3f4e1db33baf33e64edba8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "188c5cf1e9a24fa9ad89c42570582bb2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "443f9547c04247d5acc2c22f1d62f256": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "943929e56cf24394a9c100f794ca8c1b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "4775bc743b934786af2a03ff26922552": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_32598f8b1fe6456d9b734153e3be2884",
              "IPY_MODEL_e37d3a90bdcf4f09915f8151a123a378",
              "IPY_MODEL_08796db48bd54b93963d423d2fbae2d3"
            ],
            "layout": "IPY_MODEL_4b89cd92b68649d59b41262641736c9f"
          }
        },
        "32598f8b1fe6456d9b734153e3be2884": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4fdbb91967ba4da2b0ab0f5cf1e83b2e",
            "placeholder": "​",
            "style": "IPY_MODEL_4bf1a139efc44034a705842c69431fd1",
            "value": "pytorch_model.bin: 100%"
          }
        },
        "e37d3a90bdcf4f09915f8151a123a378": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8a167452c6ad4fbeb651922959bd36be",
            "max": 1222317369,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_4afa177822eb4524a3cc6129e5be6233",
            "value": 1222317369
          }
        },
        "08796db48bd54b93963d423d2fbae2d3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a40c88ff10ad4ee8b7995137d65db1a7",
            "placeholder": "​",
            "style": "IPY_MODEL_f006e3c999844f899e93012bebfee8a3",
            "value": " 1.22G/1.22G [00:05&lt;00:00, 176MB/s]"
          }
        },
        "4b89cd92b68649d59b41262641736c9f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4fdbb91967ba4da2b0ab0f5cf1e83b2e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4bf1a139efc44034a705842c69431fd1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8a167452c6ad4fbeb651922959bd36be": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4afa177822eb4524a3cc6129e5be6233": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "a40c88ff10ad4ee8b7995137d65db1a7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f006e3c999844f899e93012bebfee8a3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "4a86478bf12b42ea9b1291dee92d5e85": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_5f9c9c62969c4fd8898ef165fd8c5443",
              "IPY_MODEL_9df43f9d286e4e8781c4784a851448b3",
              "IPY_MODEL_dbf05ce977f342cbb0268243d532ec6c"
            ],
            "layout": "IPY_MODEL_074b625fb949488d81885b35a4d8ce4d"
          }
        },
        "5f9c9c62969c4fd8898ef165fd8c5443": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4c7f0ca630084ca3a4fe05d0e72458ff",
            "placeholder": "​",
            "style": "IPY_MODEL_78daf43431174cf981a5c1a1c08626fc",
            "value": "model.safetensors: 100%"
          }
        },
        "9df43f9d286e4e8781c4784a851448b3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d81493b3127742fab548df54bf871714",
            "max": 1222284424,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_7abbdbb4460c4a91853637a9f4844a8e",
            "value": 1222284424
          }
        },
        "dbf05ce977f342cbb0268243d532ec6c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7edae4eac3304765bce21fabc10a7103",
            "placeholder": "​",
            "style": "IPY_MODEL_eb7a90fa03db486aa5e29a947a80be8b",
            "value": " 1.22G/1.22G [00:13&lt;00:00, 79.4MB/s]"
          }
        },
        "074b625fb949488d81885b35a4d8ce4d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4c7f0ca630084ca3a4fe05d0e72458ff": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "78daf43431174cf981a5c1a1c08626fc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d81493b3127742fab548df54bf871714": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7abbdbb4460c4a91853637a9f4844a8e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "7edae4eac3304765bce21fabc10a7103": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "eb7a90fa03db486aa5e29a947a80be8b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "035be8823f6e488aa2e14c5fc3cb8f42": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_e8dc5242436847b0826f0e53096d6f66",
              "IPY_MODEL_ad28b751efe04061a5b7dda0aea72743",
              "IPY_MODEL_0927e4f320764e528118c9f1c98539f6"
            ],
            "layout": "IPY_MODEL_072abc2df45f42539fd1ecf7789fe0a4"
          }
        },
        "e8dc5242436847b0826f0e53096d6f66": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cbbff3b2f1c74adfbf5d5e4a3a2ef265",
            "placeholder": "​",
            "style": "IPY_MODEL_dd3ab53d197b489f92791a14ec3abe26",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "ad28b751efe04061a5b7dda0aea72743": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_160b9ee7f1054d7b8a0c0c8d6a2a2d2d",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_2b7d0669fde348f882c843e1176a78e4",
            "value": 26
          }
        },
        "0927e4f320764e528118c9f1c98539f6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_72fca9884e2d4999a0b7e3c850ab0477",
            "placeholder": "​",
            "style": "IPY_MODEL_e2264dff924a4fbb81aa12f8f3e02603",
            "value": " 26.0/26.0 [00:00&lt;00:00, 1.34kB/s]"
          }
        },
        "072abc2df45f42539fd1ecf7789fe0a4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cbbff3b2f1c74adfbf5d5e4a3a2ef265": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dd3ab53d197b489f92791a14ec3abe26": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "160b9ee7f1054d7b8a0c0c8d6a2a2d2d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2b7d0669fde348f882c843e1176a78e4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "72fca9884e2d4999a0b7e3c850ab0477": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e2264dff924a4fbb81aa12f8f3e02603": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "cf053d48d5294fa4a6f4d7071a075fc3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_cc19b28663d1465aba2b2baed32b6a66",
              "IPY_MODEL_1dc3383a421d41ecb81f83d23a174f76",
              "IPY_MODEL_ee650edc486940a9b345084f79c84510"
            ],
            "layout": "IPY_MODEL_0f7d243613a7422584147dbee682d343"
          }
        },
        "cc19b28663d1465aba2b2baed32b6a66": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fa6ffd12822b4390b23c44e12834629b",
            "placeholder": "​",
            "style": "IPY_MODEL_4020ed46964744d6bcfa74347732e634",
            "value": "vocab.json: "
          }
        },
        "1dc3383a421d41ecb81f83d23a174f76": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_14003df177c649b29e5b0a4f08a11237",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_88e745020b784919a581bb84d9ee1220",
            "value": 1
          }
        },
        "ee650edc486940a9b345084f79c84510": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b7eefff250fe4a1cab8cf5fa32eecacb",
            "placeholder": "​",
            "style": "IPY_MODEL_2bf14fe71e0c40629b0904489f716862",
            "value": " 899k/? [00:00&lt;00:00, 8.63MB/s]"
          }
        },
        "0f7d243613a7422584147dbee682d343": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fa6ffd12822b4390b23c44e12834629b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4020ed46964744d6bcfa74347732e634": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "14003df177c649b29e5b0a4f08a11237": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "88e745020b784919a581bb84d9ee1220": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "b7eefff250fe4a1cab8cf5fa32eecacb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2bf14fe71e0c40629b0904489f716862": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "092f3a2d66474f4a87261aa96df52278": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_71605930768747f9a56dfc3bebeaec5a",
              "IPY_MODEL_bb88f34ec49b4907b5a7536076a50240",
              "IPY_MODEL_a6368f9797bb4a8f82599d75b15d36c6"
            ],
            "layout": "IPY_MODEL_ff10854293b34012b5e319370ed8aba3"
          }
        },
        "71605930768747f9a56dfc3bebeaec5a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e20162492e0a4aec85b5c995d8b1ede2",
            "placeholder": "​",
            "style": "IPY_MODEL_a95d3c44777143749e4b5997d146ea80",
            "value": "merges.txt: "
          }
        },
        "bb88f34ec49b4907b5a7536076a50240": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7387ade26f7c42919a1d8ec5b98e7998",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_bd6b1632075247b58228ee9955043111",
            "value": 1
          }
        },
        "a6368f9797bb4a8f82599d75b15d36c6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_97f8c1912e1344e4bedb2e4875b23e46",
            "placeholder": "​",
            "style": "IPY_MODEL_55c2f5e844af4c80a245c503b5b4a389",
            "value": " 456k/? [00:00&lt;00:00, 6.83MB/s]"
          }
        },
        "ff10854293b34012b5e319370ed8aba3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e20162492e0a4aec85b5c995d8b1ede2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a95d3c44777143749e4b5997d146ea80": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7387ade26f7c42919a1d8ec5b98e7998": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "bd6b1632075247b58228ee9955043111": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "97f8c1912e1344e4bedb2e4875b23e46": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "55c2f5e844af4c80a245c503b5b4a389": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8805328360114c3abd5ae3e712a16bfb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_457a0fbc7075454f9731ec0ce108b4ae",
              "IPY_MODEL_d6f6852de9a2485c8c0b4e17ad72e23a",
              "IPY_MODEL_8524183a0ac74497980ce182ad44f8dd"
            ],
            "layout": "IPY_MODEL_b4db43a8e948459a8216f64609d07ceb"
          }
        },
        "457a0fbc7075454f9731ec0ce108b4ae": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ee90793cc44e4a5f932441519e22df50",
            "placeholder": "​",
            "style": "IPY_MODEL_c6c15b8a4d9845e1bc2f2d6c7238d2f5",
            "value": "config.json: "
          }
        },
        "d6f6852de9a2485c8c0b4e17ad72e23a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d139ee42ab374c30819d6053f4193eaa",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_877ee81d35784101baa2dafad684834b",
            "value": 1
          }
        },
        "8524183a0ac74497980ce182ad44f8dd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9c40d6eeaa6e4c6e8a60607ee702abe3",
            "placeholder": "​",
            "style": "IPY_MODEL_2bc0304fcf4c41c9833e06d5237813e1",
            "value": " 1.40k/? [00:00&lt;00:00, 22.4kB/s]"
          }
        },
        "b4db43a8e948459a8216f64609d07ceb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ee90793cc44e4a5f932441519e22df50": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c6c15b8a4d9845e1bc2f2d6c7238d2f5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d139ee42ab374c30819d6053f4193eaa": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "877ee81d35784101baa2dafad684834b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "9c40d6eeaa6e4c6e8a60607ee702abe3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2bc0304fcf4c41c9833e06d5237813e1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "93644ab13bf641a29b1f3ac1d1a334d2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_dc08b506c3d84772bc7f5c5dd6ebfe36",
              "IPY_MODEL_c0d8bd9a4810403e881976c413ba51a7",
              "IPY_MODEL_5418f05dd8cf4fd3ad9630ffe5b2d009"
            ],
            "layout": "IPY_MODEL_1d2218eeac534c3684d87510c2c08709"
          }
        },
        "dc08b506c3d84772bc7f5c5dd6ebfe36": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f442a63a0abe44c38d23e213d9789ec6",
            "placeholder": "​",
            "style": "IPY_MODEL_dae83f196b3a487c88e1adb16df4d3ca",
            "value": "model.safetensors: 100%"
          }
        },
        "c0d8bd9a4810403e881976c413ba51a7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_626b90a87a7d489295bc4a7151d202fe",
            "max": 307867048,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_d5ead0ce05b249ad90da95e64d4f879a",
            "value": 307867048
          }
        },
        "5418f05dd8cf4fd3ad9630ffe5b2d009": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_115dc9a31a544d20a63277d9b03f0a2d",
            "placeholder": "​",
            "style": "IPY_MODEL_4fa4b0f628ec44209735ffba5f8063e5",
            "value": " 308M/308M [00:04&lt;00:00, 90.2MB/s]"
          }
        },
        "1d2218eeac534c3684d87510c2c08709": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f442a63a0abe44c38d23e213d9789ec6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dae83f196b3a487c88e1adb16df4d3ca": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "626b90a87a7d489295bc4a7151d202fe": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d5ead0ce05b249ad90da95e64d4f879a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "115dc9a31a544d20a63277d9b03f0a2d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4fa4b0f628ec44209735ffba5f8063e5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "364fe472114d48cfa8307973560ccadc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_be135d3fcedc4d8e93090ea5153f358c",
              "IPY_MODEL_09460ebb96b34d32920ea7e0b2c91ceb",
              "IPY_MODEL_40429f92a4bd444790af6ba0598ad468"
            ],
            "layout": "IPY_MODEL_7753d75eb81f4d2ea15878ae3ee3d857"
          }
        },
        "be135d3fcedc4d8e93090ea5153f358c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b86dd8ec971d470e84415ceed4e43296",
            "placeholder": "​",
            "style": "IPY_MODEL_860e67f8e1894196aafef714644d28b4",
            "value": "generation_config.json: 100%"
          }
        },
        "09460ebb96b34d32920ea7e0b2c91ceb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_41ea30c2514547d9a250547199122269",
            "max": 147,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_0d4edf58d4ee424b8ee078035ef7b09c",
            "value": 147
          }
        },
        "40429f92a4bd444790af6ba0598ad468": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7cdd200141dc4559bc707c6fdafd092f",
            "placeholder": "​",
            "style": "IPY_MODEL_a0d1786dab3b4446bd792509321576d8",
            "value": " 147/147 [00:00&lt;00:00, 5.61kB/s]"
          }
        },
        "7753d75eb81f4d2ea15878ae3ee3d857": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b86dd8ec971d470e84415ceed4e43296": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "860e67f8e1894196aafef714644d28b4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "41ea30c2514547d9a250547199122269": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0d4edf58d4ee424b8ee078035ef7b09c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "7cdd200141dc4559bc707c6fdafd092f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a0d1786dab3b4446bd792509321576d8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "234cd9c79d8042e598134ffce0ceda4c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_00575d2c532e4597a0237b18db35a9bb",
              "IPY_MODEL_950549fb8be943f199d30294c72ff381",
              "IPY_MODEL_a25c47fb97f94633a6e3916c388639de"
            ],
            "layout": "IPY_MODEL_e75a59352f5043e1a33878334d46025d"
          }
        },
        "00575d2c532e4597a0237b18db35a9bb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_74e207f0bf4647e48811d79414bea3c6",
            "placeholder": "​",
            "style": "IPY_MODEL_3dd9c59c754e4b0a891411b6aabb5ef2",
            "value": "tokenizer_config.json: "
          }
        },
        "950549fb8be943f199d30294c72ff381": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4f3eac9fd0b8405ebb6d8829cdb838d5",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_f52336df2df74c5ea35a54e8b366ad34",
            "value": 1
          }
        },
        "a25c47fb97f94633a6e3916c388639de": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d7e9fb66ad4c4762a186db4282d222ac",
            "placeholder": "​",
            "style": "IPY_MODEL_66a40803c78040ad8d46892c1c3a81b7",
            "value": " 2.54k/? [00:00&lt;00:00, 77.5kB/s]"
          }
        },
        "e75a59352f5043e1a33878334d46025d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "74e207f0bf4647e48811d79414bea3c6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3dd9c59c754e4b0a891411b6aabb5ef2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "4f3eac9fd0b8405ebb6d8829cdb838d5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "f52336df2df74c5ea35a54e8b366ad34": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "d7e9fb66ad4c4762a186db4282d222ac": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "66a40803c78040ad8d46892c1c3a81b7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "49f17e39b65b4b58ba6202f930071795": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_bc16a2de269d4a218600839ccbeb22a0",
              "IPY_MODEL_6cf93a8ca46c4eb399db9acb5a26c5f5",
              "IPY_MODEL_dae13a045d864380a58247c7ec6fa0b7"
            ],
            "layout": "IPY_MODEL_0bc9c1cce5d44106b4826b2177dbe01b"
          }
        },
        "bc16a2de269d4a218600839ccbeb22a0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ea5e070276174134a190ef21fbcf67e4",
            "placeholder": "​",
            "style": "IPY_MODEL_bbd72f2593cc428baaf8b3e811c024e9",
            "value": "spiece.model: 100%"
          }
        },
        "6cf93a8ca46c4eb399db9acb5a26c5f5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ae85b5275b0e4d1e8f76c0b67adbbcc4",
            "max": 791656,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_0fdbc6360abb4dd3b187c6035a469059",
            "value": 791656
          }
        },
        "dae13a045d864380a58247c7ec6fa0b7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ad8f2239903f4e21b4f064e2f7876090",
            "placeholder": "​",
            "style": "IPY_MODEL_23b6337daf2f4e4db0ba4047ec85d9ef",
            "value": " 792k/792k [00:00&lt;00:00, 188kB/s]"
          }
        },
        "0bc9c1cce5d44106b4826b2177dbe01b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ea5e070276174134a190ef21fbcf67e4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bbd72f2593cc428baaf8b3e811c024e9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ae85b5275b0e4d1e8f76c0b67adbbcc4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0fdbc6360abb4dd3b187c6035a469059": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "ad8f2239903f4e21b4f064e2f7876090": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "23b6337daf2f4e4db0ba4047ec85d9ef": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "806434cb062e4efdb5f510614da8b59f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_2faf8ce20c9f46818a2264a9faeb2143",
              "IPY_MODEL_db91ca5523d54196bbfd5cc5e4d350df",
              "IPY_MODEL_7c73e69ed7654b269de1029a108929b9"
            ],
            "layout": "IPY_MODEL_954c51f33a18402a97cf9befca3c8f11"
          }
        },
        "2faf8ce20c9f46818a2264a9faeb2143": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a8f1aaaf04b74374a8ce7b8799c953aa",
            "placeholder": "​",
            "style": "IPY_MODEL_016d28ca7cb344e393e9ed7be3fd40d1",
            "value": "tokenizer.json: "
          }
        },
        "db91ca5523d54196bbfd5cc5e4d350df": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0057efb175a54fe198465c7ab37102ca",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e1966ea73fdf4de2b4e899ac3e04ea89",
            "value": 1
          }
        },
        "7c73e69ed7654b269de1029a108929b9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c4cb221ec3af407f92b2ae3e91aef950",
            "placeholder": "​",
            "style": "IPY_MODEL_de8704f9ef3147bfa69d8fa5792af21e",
            "value": " 2.42M/? [00:00&lt;00:00, 36.0MB/s]"
          }
        },
        "954c51f33a18402a97cf9befca3c8f11": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a8f1aaaf04b74374a8ce7b8799c953aa": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "016d28ca7cb344e393e9ed7be3fd40d1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0057efb175a54fe198465c7ab37102ca": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "e1966ea73fdf4de2b4e899ac3e04ea89": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "c4cb221ec3af407f92b2ae3e91aef950": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "de8704f9ef3147bfa69d8fa5792af21e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "672148b2115445fcb0e344d02e64c88a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f6767cf08fc741a1804b89eeb8b18b75",
              "IPY_MODEL_d2b549967ae84ac4a19225a9180bbe8c",
              "IPY_MODEL_a3fb1805d9d44ed6a353280fb74abff7"
            ],
            "layout": "IPY_MODEL_df57c24831ed49409fd5ea7a8d98e5d5"
          }
        },
        "f6767cf08fc741a1804b89eeb8b18b75": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_616896bbba954d85a2fc97e2b925c963",
            "placeholder": "​",
            "style": "IPY_MODEL_95a057e61c274e09a2c63e7927594d93",
            "value": "special_tokens_map.json: "
          }
        },
        "d2b549967ae84ac4a19225a9180bbe8c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_237bcdb10841468cb57de1ef71966f6f",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_ed09a7a207b64420b9b9e85a78b46a8c",
            "value": 1
          }
        },
        "a3fb1805d9d44ed6a353280fb74abff7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_529ac81c91ec4a6e89f7c9f95e712f27",
            "placeholder": "​",
            "style": "IPY_MODEL_4c1f33491147418cb85597720d1d858c",
            "value": " 2.20k/? [00:00&lt;00:00, 79.4kB/s]"
          }
        },
        "df57c24831ed49409fd5ea7a8d98e5d5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "616896bbba954d85a2fc97e2b925c963": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "95a057e61c274e09a2c63e7927594d93": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "237bcdb10841468cb57de1ef71966f6f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "ed09a7a207b64420b9b9e85a78b46a8c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "529ac81c91ec4a6e89f7c9f95e712f27": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4c1f33491147418cb85597720d1d858c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8eedfd43f8924ddcb632bb4d093a57a4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_efc5100d4ce94d458e9633c5bd98e991",
              "IPY_MODEL_52d7cad6193243a5a80a45e9ed0661ae",
              "IPY_MODEL_cab5715a7c6d409b9439a63803eb8f17"
            ],
            "layout": "IPY_MODEL_471b87730d2349f58306471d97ef1b9c"
          }
        },
        "efc5100d4ce94d458e9633c5bd98e991": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3a7fa29da02a4e2eaf1baf874a6c83c0",
            "placeholder": "​",
            "style": "IPY_MODEL_b1b915e3c41c4a61856a2d77f7cdf20f",
            "value": "modules.json: 100%"
          }
        },
        "52d7cad6193243a5a80a45e9ed0661ae": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_237ac43fe3344d928dc4c4cbaf3be9b3",
            "max": 349,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_ecedb642ebb94816bc1b5111de8b2adf",
            "value": 349
          }
        },
        "cab5715a7c6d409b9439a63803eb8f17": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d3af4dbf591c49d58bf3c236189c43fe",
            "placeholder": "​",
            "style": "IPY_MODEL_b3e50fa9301b4725a6a40a702d6fbce5",
            "value": " 349/349 [00:00&lt;00:00, 23.9kB/s]"
          }
        },
        "471b87730d2349f58306471d97ef1b9c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3a7fa29da02a4e2eaf1baf874a6c83c0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b1b915e3c41c4a61856a2d77f7cdf20f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "237ac43fe3344d928dc4c4cbaf3be9b3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ecedb642ebb94816bc1b5111de8b2adf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "d3af4dbf591c49d58bf3c236189c43fe": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b3e50fa9301b4725a6a40a702d6fbce5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "82da6e7537d24e3592248250e8938264": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_2874c68f1d0149afa6ff0d95a7b739ab",
              "IPY_MODEL_6095638058e94b15858fced9633f1684",
              "IPY_MODEL_adfbac94190f47949b5f7ce916fba876"
            ],
            "layout": "IPY_MODEL_ae888c52e10e4fb2a2dbeafca20f80c8"
          }
        },
        "2874c68f1d0149afa6ff0d95a7b739ab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_924816cae1d14138899cfc9cb5f7a0c5",
            "placeholder": "​",
            "style": "IPY_MODEL_4076a8ab153846a280d1a1f9443c73ba",
            "value": "config_sentence_transformers.json: 100%"
          }
        },
        "6095638058e94b15858fced9633f1684": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_44ceb6c836c44f0abc97b091b5373a8a",
            "max": 116,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_35b56f79301a452a8840b9a8300b4ee5",
            "value": 116
          }
        },
        "adfbac94190f47949b5f7ce916fba876": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e9dffa2f8bf043499c6b1f5911fe7ee6",
            "placeholder": "​",
            "style": "IPY_MODEL_35f7c3d474f647f5b9b84ce3abb665dd",
            "value": " 116/116 [00:00&lt;00:00, 3.58kB/s]"
          }
        },
        "ae888c52e10e4fb2a2dbeafca20f80c8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "924816cae1d14138899cfc9cb5f7a0c5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4076a8ab153846a280d1a1f9443c73ba": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "44ceb6c836c44f0abc97b091b5373a8a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "35b56f79301a452a8840b9a8300b4ee5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "e9dffa2f8bf043499c6b1f5911fe7ee6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "35f7c3d474f647f5b9b84ce3abb665dd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f613c1fe617e4f81983f8f31fd85432d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_7c57966e03d743f89aeaff11fc34e92b",
              "IPY_MODEL_0f6b521d49764d24825da81c8f62a514",
              "IPY_MODEL_e34a0aab562445c6975eb89b0297f4b1"
            ],
            "layout": "IPY_MODEL_0576ca2c436241d79ae15c6a33363f6e"
          }
        },
        "7c57966e03d743f89aeaff11fc34e92b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_20ef443d7efd4d4994c721e3526305ba",
            "placeholder": "​",
            "style": "IPY_MODEL_6bee8d21b3a94771b290210f188fbf88",
            "value": "README.md: "
          }
        },
        "0f6b521d49764d24825da81c8f62a514": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9d18eeaf98e64ec3bc7c5589ae795af0",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_99adf14fb7bb44eba284963b1cd41b1c",
            "value": 1
          }
        },
        "e34a0aab562445c6975eb89b0297f4b1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_64f097c780904a4ab93515cbc90c54ef",
            "placeholder": "​",
            "style": "IPY_MODEL_85820e07b6ea42308a452a8dbb663b3c",
            "value": " 10.5k/? [00:00&lt;00:00, 233kB/s]"
          }
        },
        "0576ca2c436241d79ae15c6a33363f6e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "20ef443d7efd4d4994c721e3526305ba": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6bee8d21b3a94771b290210f188fbf88": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9d18eeaf98e64ec3bc7c5589ae795af0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "99adf14fb7bb44eba284963b1cd41b1c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "64f097c780904a4ab93515cbc90c54ef": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "85820e07b6ea42308a452a8dbb663b3c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a60d5351d5854b75a0cfcb206a5b63bf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_4239c66034c04e76a6e492c34ac9b496",
              "IPY_MODEL_a42c255275364d0d87ed9ad1a3f90cdd",
              "IPY_MODEL_32c7ef97c05a4220acd0ab07ff21c581"
            ],
            "layout": "IPY_MODEL_dfbc5c76053f46b187d567d9f8b54890"
          }
        },
        "4239c66034c04e76a6e492c34ac9b496": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e5ec8f35b1024197b5c27ac66ba91b69",
            "placeholder": "​",
            "style": "IPY_MODEL_b969a02f885e452eb39a4f0ddae3f418",
            "value": "sentence_bert_config.json: 100%"
          }
        },
        "a42c255275364d0d87ed9ad1a3f90cdd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_52ca6661fe41422fa8f12fc990673247",
            "max": 53,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_8443174704a54ae1b0d0e31d924a41bc",
            "value": 53
          }
        },
        "32c7ef97c05a4220acd0ab07ff21c581": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_940eaff3054a461e8be84b033b9de23c",
            "placeholder": "​",
            "style": "IPY_MODEL_4ecc409558fc482c97f7ce37487bf5c3",
            "value": " 53.0/53.0 [00:00&lt;00:00, 2.51kB/s]"
          }
        },
        "dfbc5c76053f46b187d567d9f8b54890": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e5ec8f35b1024197b5c27ac66ba91b69": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b969a02f885e452eb39a4f0ddae3f418": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "52ca6661fe41422fa8f12fc990673247": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8443174704a54ae1b0d0e31d924a41bc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "940eaff3054a461e8be84b033b9de23c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4ecc409558fc482c97f7ce37487bf5c3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "cb615610930a4bec90014fd07e909a16": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_235da291efb2402fa18a17e6d036fdeb",
              "IPY_MODEL_0fde4e22eacb44bea702a362db794e6f",
              "IPY_MODEL_7bb06063390945ad99f3dfe2684dc993"
            ],
            "layout": "IPY_MODEL_fcc0588bcc8045c686fdf223b76e77c6"
          }
        },
        "235da291efb2402fa18a17e6d036fdeb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_dc0ea9f21d924354a9f14cebf13600de",
            "placeholder": "​",
            "style": "IPY_MODEL_61d930bc7ed04b289d85ba716a63e7d9",
            "value": "config.json: 100%"
          }
        },
        "0fde4e22eacb44bea702a362db794e6f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_71b5457d7b274ba6a4d8a152a1739812",
            "max": 612,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_2481e03413e242fdb79fbda09d402659",
            "value": 612
          }
        },
        "7bb06063390945ad99f3dfe2684dc993": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f2cbd344791643dbb6390aee4c8fa957",
            "placeholder": "​",
            "style": "IPY_MODEL_b55e537bb5734c7387b4c93fa83d33e3",
            "value": " 612/612 [00:00&lt;00:00, 16.2kB/s]"
          }
        },
        "fcc0588bcc8045c686fdf223b76e77c6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dc0ea9f21d924354a9f14cebf13600de": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "61d930bc7ed04b289d85ba716a63e7d9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "71b5457d7b274ba6a4d8a152a1739812": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2481e03413e242fdb79fbda09d402659": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "f2cbd344791643dbb6390aee4c8fa957": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b55e537bb5734c7387b4c93fa83d33e3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5b03485baa554a938f1754f40ac8f355": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_b76d9bc049bc41deb891c93401659351",
              "IPY_MODEL_f95cc5db997344e0965f8313d23071f1",
              "IPY_MODEL_08ad02e04c4d4e45a28c6ce7621f85dc"
            ],
            "layout": "IPY_MODEL_13dbf966501546ef8efee38b6162fc58"
          }
        },
        "b76d9bc049bc41deb891c93401659351": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_06a82ec6e5764ebdb7e041ef527dbfae",
            "placeholder": "​",
            "style": "IPY_MODEL_39866fb4e2264f3e8982fde44370e931",
            "value": "model.safetensors: 100%"
          }
        },
        "f95cc5db997344e0965f8313d23071f1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cd4de935a95f4ed28b0f24792b4b1bd3",
            "max": 90868376,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_8908aead2a1c4182967f7851efccb0ed",
            "value": 90868376
          }
        },
        "08ad02e04c4d4e45a28c6ce7621f85dc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4e03415ba8b348e4a79e3cb348f4fe91",
            "placeholder": "​",
            "style": "IPY_MODEL_7f737eb1c77d42e2a9448062cd5659b9",
            "value": " 90.9M/90.9M [00:02&lt;00:00, 41.9MB/s]"
          }
        },
        "13dbf966501546ef8efee38b6162fc58": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "06a82ec6e5764ebdb7e041ef527dbfae": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "39866fb4e2264f3e8982fde44370e931": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "cd4de935a95f4ed28b0f24792b4b1bd3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8908aead2a1c4182967f7851efccb0ed": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "4e03415ba8b348e4a79e3cb348f4fe91": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7f737eb1c77d42e2a9448062cd5659b9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8018e0425eb84b6bb929777f2d5e23b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_e1bdbc312d9747ff8dec565608e3708c",
              "IPY_MODEL_cea1c8fb39d1467dad1ae28ca1f22c6b",
              "IPY_MODEL_aa7ad971a57b4ee1916590e271d039f2"
            ],
            "layout": "IPY_MODEL_c3825865acbd4f749040d555d57426d3"
          }
        },
        "e1bdbc312d9747ff8dec565608e3708c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f08a12a971f846a49b0cc43753218ada",
            "placeholder": "​",
            "style": "IPY_MODEL_0f414292d40c49c980d3cd4fd1eed4e5",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "cea1c8fb39d1467dad1ae28ca1f22c6b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b295730e59a2444396efaad3afd93c29",
            "max": 350,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_eb695f161d0f4fce842c790633467eb4",
            "value": 350
          }
        },
        "aa7ad971a57b4ee1916590e271d039f2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1b0ba26719d141a39ef6de5b9883fca4",
            "placeholder": "​",
            "style": "IPY_MODEL_8e1d1d6db26e4e5fb8b049381d679e16",
            "value": " 350/350 [00:00&lt;00:00, 27.3kB/s]"
          }
        },
        "c3825865acbd4f749040d555d57426d3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f08a12a971f846a49b0cc43753218ada": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0f414292d40c49c980d3cd4fd1eed4e5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "b295730e59a2444396efaad3afd93c29": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "eb695f161d0f4fce842c790633467eb4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "1b0ba26719d141a39ef6de5b9883fca4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8e1d1d6db26e4e5fb8b049381d679e16": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "82ca058b1c24429b9b3607a653af2ecd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d1edac29e8e8465e80775a6e1f767323",
              "IPY_MODEL_327fc87d9ce24ca186a9f2355ab3f145",
              "IPY_MODEL_9685f166b80f43f6b7dc0d615e7a8958"
            ],
            "layout": "IPY_MODEL_39346ccdc80649a1b06eb98a206d4769"
          }
        },
        "d1edac29e8e8465e80775a6e1f767323": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9b5afb35be984d93a80886c3e9e7a664",
            "placeholder": "​",
            "style": "IPY_MODEL_e97a3de4d1064b8ebd39cf353f3b82bb",
            "value": "vocab.txt: "
          }
        },
        "327fc87d9ce24ca186a9f2355ab3f145": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b6f16e775d5d40f5851113018b23f98f",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_7517c2c1d8764328b1cfa8b198298ba9",
            "value": 1
          }
        },
        "9685f166b80f43f6b7dc0d615e7a8958": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4b8b5ec7fb274809a5ecb87499f4ef01",
            "placeholder": "​",
            "style": "IPY_MODEL_e1d021690a87468b98ee167623e96b04",
            "value": " 232k/? [00:00&lt;00:00, 4.81MB/s]"
          }
        },
        "39346ccdc80649a1b06eb98a206d4769": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9b5afb35be984d93a80886c3e9e7a664": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e97a3de4d1064b8ebd39cf353f3b82bb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "b6f16e775d5d40f5851113018b23f98f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "7517c2c1d8764328b1cfa8b198298ba9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "4b8b5ec7fb274809a5ecb87499f4ef01": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e1d021690a87468b98ee167623e96b04": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d95869f696c54999a7e7c9b47fc77b85": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_71733a88ab5e4fdfa3a95781abdf60bc",
              "IPY_MODEL_c1860703623f419192eba3514f483a33",
              "IPY_MODEL_23c9d852e378443d8770ea0e6f2fb448"
            ],
            "layout": "IPY_MODEL_0520e2fa0e354cfab6a45badd51b89d1"
          }
        },
        "71733a88ab5e4fdfa3a95781abdf60bc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c3fb6b9c95994feeb97417c643c85aae",
            "placeholder": "​",
            "style": "IPY_MODEL_9b8611da14194297808ffcc67f987167",
            "value": "tokenizer.json: "
          }
        },
        "c1860703623f419192eba3514f483a33": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3ff5fcd4a8a94c298237585716c484c0",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_5dabab42d4044011b69662c45ef98777",
            "value": 1
          }
        },
        "23c9d852e378443d8770ea0e6f2fb448": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1a212e3583b9470da22a310904b2f6a8",
            "placeholder": "​",
            "style": "IPY_MODEL_347b4e7e7d5d4fccb7d2d85c19fc948d",
            "value": " 466k/? [00:00&lt;00:00, 14.9MB/s]"
          }
        },
        "0520e2fa0e354cfab6a45badd51b89d1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c3fb6b9c95994feeb97417c643c85aae": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9b8611da14194297808ffcc67f987167": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3ff5fcd4a8a94c298237585716c484c0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "5dabab42d4044011b69662c45ef98777": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "1a212e3583b9470da22a310904b2f6a8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "347b4e7e7d5d4fccb7d2d85c19fc948d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "06a6537032fb46c8a57fac8f09e87aa5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_cb0e870a2ced4e188d0e3a885db773f9",
              "IPY_MODEL_3c12d3fb063045b7a125dbfc47be030e",
              "IPY_MODEL_d5563cabf2e44d37ac28e8303df1da64"
            ],
            "layout": "IPY_MODEL_261bd88b1df94e9098378b3d5b3f310b"
          }
        },
        "cb0e870a2ced4e188d0e3a885db773f9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_365bc6367fc0461a962a241d8f03c17e",
            "placeholder": "​",
            "style": "IPY_MODEL_de6e3fe66b304207b9d0d32e548b7184",
            "value": "special_tokens_map.json: 100%"
          }
        },
        "3c12d3fb063045b7a125dbfc47be030e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_69642a94089a42cdac5e863acc89e542",
            "max": 112,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_677b705af7084e1fa544900ed616ef11",
            "value": 112
          }
        },
        "d5563cabf2e44d37ac28e8303df1da64": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c114565b2ecf4b03bcb92ec4245ecbf0",
            "placeholder": "​",
            "style": "IPY_MODEL_f95192c16c17441fb3796c982cf820f6",
            "value": " 112/112 [00:00&lt;00:00, 3.63kB/s]"
          }
        },
        "261bd88b1df94e9098378b3d5b3f310b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "365bc6367fc0461a962a241d8f03c17e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "de6e3fe66b304207b9d0d32e548b7184": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "69642a94089a42cdac5e863acc89e542": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "677b705af7084e1fa544900ed616ef11": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "c114565b2ecf4b03bcb92ec4245ecbf0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f95192c16c17441fb3796c982cf820f6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1a5f41a63584485299e1ca1dacdb865b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d17b21acb742410bb12c7e8669d22a35",
              "IPY_MODEL_80546f9ed49f4ce689850fb8ba3603ef",
              "IPY_MODEL_a7b535b1724542b2bdbc1851f67d7d9e"
            ],
            "layout": "IPY_MODEL_d54ba6f560cf4d3b8f33f46c91ffec80"
          }
        },
        "d17b21acb742410bb12c7e8669d22a35": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3eb59753519040d49416d1c122b5708a",
            "placeholder": "​",
            "style": "IPY_MODEL_5751a72a7c8d485f8635d895a3760efd",
            "value": "config.json: 100%"
          }
        },
        "80546f9ed49f4ce689850fb8ba3603ef": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_184af3b77bad4c93a41728dfe26c6c3b",
            "max": 190,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_00d490943cb749919be32fffb2b05ca7",
            "value": 190
          }
        },
        "a7b535b1724542b2bdbc1851f67d7d9e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_90a3812f355743e5aee4b0d2d7d1b792",
            "placeholder": "​",
            "style": "IPY_MODEL_ebd4b0e1badb45718504f7c5f78467ba",
            "value": " 190/190 [00:00&lt;00:00, 8.77kB/s]"
          }
        },
        "d54ba6f560cf4d3b8f33f46c91ffec80": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3eb59753519040d49416d1c122b5708a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5751a72a7c8d485f8635d895a3760efd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "184af3b77bad4c93a41728dfe26c6c3b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "00d490943cb749919be32fffb2b05ca7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "90a3812f355743e5aee4b0d2d7d1b792": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ebd4b0e1badb45718504f7c5f78467ba": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "34836f08c5254b9f89c3bb03050cf8f4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_b03fe64613c441ee8502469c1a402838",
              "IPY_MODEL_8d05a7cac44a4b8382f2fb4ef152f86a",
              "IPY_MODEL_fe45fd8b4d334d0ebd1d1b24800ca5ef"
            ],
            "layout": "IPY_MODEL_dd1c42e6d4bb4b70a7d075b217c851af"
          }
        },
        "b03fe64613c441ee8502469c1a402838": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_01fe1b9cc1b44877bbf6a314d5059398",
            "placeholder": "​",
            "style": "IPY_MODEL_1409e467e3ac4cf49d72b9658b5445eb",
            "value": "Teacher inference (batches): 100%"
          }
        },
        "8d05a7cac44a4b8382f2fb4ef152f86a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b97f58be89834c939e0c8e5529f14583",
            "max": 70,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_99b340af0fcf4a48a1353755a6675311",
            "value": 70
          }
        },
        "fe45fd8b4d334d0ebd1d1b24800ca5ef": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8d859fcc185f431a83df3eb1879977fc",
            "placeholder": "​",
            "style": "IPY_MODEL_8318f6adab584c2799b9615948ee8409",
            "value": " 70/70 [11:10&lt;00:00,  8.60s/it]"
          }
        },
        "dd1c42e6d4bb4b70a7d075b217c851af": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "01fe1b9cc1b44877bbf6a314d5059398": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1409e467e3ac4cf49d72b9658b5445eb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "b97f58be89834c939e0c8e5529f14583": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "99b340af0fcf4a48a1353755a6675311": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "8d859fcc185f431a83df3eb1879977fc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8318f6adab584c2799b9615948ee8409": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7d62926c43fe4398abdf2c156811a81b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_5fcb10200d844faab9367507223c2ced",
              "IPY_MODEL_efae785cd1fb4f88a93523a4c4e5c18f",
              "IPY_MODEL_9b5fbebea8db4aa9be6ff4ff17cd6ea0"
            ],
            "layout": "IPY_MODEL_4985951fd2f24707890071841cee3c96"
          }
        },
        "5fcb10200d844faab9367507223c2ced": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_dbbb201b7ae542a49b8f0947809d0599",
            "placeholder": "​",
            "style": "IPY_MODEL_75b96b1d51554f56b0dbc1c64b68973e",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "efae785cd1fb4f88a93523a4c4e5c18f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_64b5c9e6eebe4343988f22161b4adbf1",
            "max": 2324,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_d36321cdb51243aaa4b7bcfe5b3c6895",
            "value": 2324
          }
        },
        "9b5fbebea8db4aa9be6ff4ff17cd6ea0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_05f4787bb6924ae994a988e78566296b",
            "placeholder": "​",
            "style": "IPY_MODEL_e31dd42dd3f645a9bb59a63c80e1f7c2",
            "value": " 2.32k/2.32k [00:00&lt;00:00, 132kB/s]"
          }
        },
        "4985951fd2f24707890071841cee3c96": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dbbb201b7ae542a49b8f0947809d0599": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "75b96b1d51554f56b0dbc1c64b68973e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "64b5c9e6eebe4343988f22161b4adbf1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d36321cdb51243aaa4b7bcfe5b3c6895": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "05f4787bb6924ae994a988e78566296b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e31dd42dd3f645a9bb59a63c80e1f7c2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "caa39d82ffed4828998f7a117bd4c228": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_bb719a67c76e42309e382d42927bcfb4",
              "IPY_MODEL_d4d5c4b35e93450eb7d3660c4f2194e0",
              "IPY_MODEL_a44f581f849642da9af09351bd3184f5"
            ],
            "layout": "IPY_MODEL_4a7f17be413442759b8c63f9ed0dc496"
          }
        },
        "bb719a67c76e42309e382d42927bcfb4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_16b640c41e38406788d71113186c124a",
            "placeholder": "​",
            "style": "IPY_MODEL_82ac1510926a4f43b31edab69bba6e89",
            "value": "spiece.model: 100%"
          }
        },
        "d4d5c4b35e93450eb7d3660c4f2194e0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c155ea5b88474073b3f01d59ee69e40e",
            "max": 791656,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_741dd41b3cf541cda6f89c0d5955d7cf",
            "value": 791656
          }
        },
        "a44f581f849642da9af09351bd3184f5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ef76434b00c04166aafdeb0a12e7c736",
            "placeholder": "​",
            "style": "IPY_MODEL_b1f473c374c44391bcf52c69306296d6",
            "value": " 792k/792k [00:00&lt;00:00, 3.63MB/s]"
          }
        },
        "4a7f17be413442759b8c63f9ed0dc496": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "16b640c41e38406788d71113186c124a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "82ac1510926a4f43b31edab69bba6e89": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c155ea5b88474073b3f01d59ee69e40e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "741dd41b3cf541cda6f89c0d5955d7cf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "ef76434b00c04166aafdeb0a12e7c736": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b1f473c374c44391bcf52c69306296d6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "863c13b957694a58ace3ca62e3251889": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_b6da8aa346034f41a0a6bef909d41c5d",
              "IPY_MODEL_5d20e4a4f7b343efbfbc66a6fd811621",
              "IPY_MODEL_57a699217da84699b74ef8c4a5e383f5"
            ],
            "layout": "IPY_MODEL_d6ba21bcc2c34deda6b19456a80ee6af"
          }
        },
        "b6da8aa346034f41a0a6bef909d41c5d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a8b264f230084cfb8db6595c4a1de30c",
            "placeholder": "​",
            "style": "IPY_MODEL_1085e0b7b16a4178ba12a35592a6a9de",
            "value": "tokenizer.json: 100%"
          }
        },
        "5d20e4a4f7b343efbfbc66a6fd811621": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c010c6aa7ee447f4926b2899d62d7678",
            "max": 1389353,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_fdcf5bdcd9264094b4596b176f3f9d0d",
            "value": 1389353
          }
        },
        "57a699217da84699b74ef8c4a5e383f5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_875117b9eeaa4223b6e68c598f723ebd",
            "placeholder": "​",
            "style": "IPY_MODEL_dc5e32a8e22645f384ce3ec74df69167",
            "value": " 1.39M/1.39M [00:00&lt;00:00, 12.7MB/s]"
          }
        },
        "d6ba21bcc2c34deda6b19456a80ee6af": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a8b264f230084cfb8db6595c4a1de30c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1085e0b7b16a4178ba12a35592a6a9de": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c010c6aa7ee447f4926b2899d62d7678": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fdcf5bdcd9264094b4596b176f3f9d0d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "875117b9eeaa4223b6e68c598f723ebd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dc5e32a8e22645f384ce3ec74df69167": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9c787b141a49432886c8ec4b72aaf042": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_c54ef67f3bba403fb43c646981318aae",
              "IPY_MODEL_c93a03a1871b4ae4bc42fe7a4a6f6fae",
              "IPY_MODEL_f3d409204b6c45078755997d3aef4d62"
            ],
            "layout": "IPY_MODEL_4ac2f6862e7041c3a1684886d1aafd0e"
          }
        },
        "c54ef67f3bba403fb43c646981318aae": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c18405fd7f914809b45dd764b2381897",
            "placeholder": "​",
            "style": "IPY_MODEL_a01d2b35d25d4179a11a7cf17dcaaed4",
            "value": "Map: 100%"
          }
        },
        "c93a03a1871b4ae4bc42fe7a4a6f6fae": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_85bdf1014f8c491e8d37e318c59e072c",
            "max": 448,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_fd9411585231459ca404580c5b97f7a7",
            "value": 448
          }
        },
        "f3d409204b6c45078755997d3aef4d62": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9d2611d9ee4a44639637de23e8303cfd",
            "placeholder": "​",
            "style": "IPY_MODEL_e1fcc23bbd8b4dd7bb41f48dae0551ba",
            "value": " 448/448 [00:01&lt;00:00, 268.00 examples/s]"
          }
        },
        "4ac2f6862e7041c3a1684886d1aafd0e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c18405fd7f914809b45dd764b2381897": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a01d2b35d25d4179a11a7cf17dcaaed4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "85bdf1014f8c491e8d37e318c59e072c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fd9411585231459ca404580c5b97f7a7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "9d2611d9ee4a44639637de23e8303cfd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e1fcc23bbd8b4dd7bb41f48dae0551ba": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2b81b83189544ba195a846f3c5c6f71e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8ab52d6cf13844319049e23f9e6c5187",
              "IPY_MODEL_ba6f39a38e1f49c3b94b2bf4762d1ec5",
              "IPY_MODEL_a9f63eacf46e4b239878b2263215bdce"
            ],
            "layout": "IPY_MODEL_78878b1574254e119e17ad7d2037f694"
          }
        },
        "8ab52d6cf13844319049e23f9e6c5187": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b5f0df1c84d44a13b585b07bba9a7761",
            "placeholder": "​",
            "style": "IPY_MODEL_c0f48e42809645c0a3a2604a1edd9018",
            "value": "Map: 100%"
          }
        },
        "ba6f39a38e1f49c3b94b2bf4762d1ec5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b313b3e337a5425cb51ca43966f9007d",
            "max": 112,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_32ea9145ca924c5f81af0068cbda9851",
            "value": 112
          }
        },
        "a9f63eacf46e4b239878b2263215bdce": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_13f81ee3096543bdaa6a458bc8166f1a",
            "placeholder": "​",
            "style": "IPY_MODEL_5c03a53d31fe49d18321bf09622bade8",
            "value": " 112/112 [00:00&lt;00:00, 178.50 examples/s]"
          }
        },
        "78878b1574254e119e17ad7d2037f694": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b5f0df1c84d44a13b585b07bba9a7761": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c0f48e42809645c0a3a2604a1edd9018": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "b313b3e337a5425cb51ca43966f9007d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "32ea9145ca924c5f81af0068cbda9851": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "13f81ee3096543bdaa6a458bc8166f1a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5c03a53d31fe49d18321bf09622bade8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "10830644776b4644881272566bf014aa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_b891d4311b334071bdae051685cd78f6",
              "IPY_MODEL_2aceb93afc4e47f6bdb5d89efa69fe32",
              "IPY_MODEL_d270da8940b74f7e85fba65184b5799a"
            ],
            "layout": "IPY_MODEL_8e252730f284452da767a22304220987"
          }
        },
        "b891d4311b334071bdae051685cd78f6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b0c3681644ad4045810a148901417143",
            "placeholder": "​",
            "style": "IPY_MODEL_52a9e573e398411e9ac77b64daa166d7",
            "value": "config.json: 100%"
          }
        },
        "2aceb93afc4e47f6bdb5d89efa69fe32": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7f6a80455b384af18ccbd472fd9468a1",
            "max": 1206,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_b3ff9c5b0cfe46b39f1f373de74a78a9",
            "value": 1206
          }
        },
        "d270da8940b74f7e85fba65184b5799a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c7ae03ad06774ccd8181e682e373bf44",
            "placeholder": "​",
            "style": "IPY_MODEL_e36cf38afa0f42dc87aa571710723cd2",
            "value": " 1.21k/1.21k [00:00&lt;00:00, 80.1kB/s]"
          }
        },
        "8e252730f284452da767a22304220987": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b0c3681644ad4045810a148901417143": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "52a9e573e398411e9ac77b64daa166d7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7f6a80455b384af18ccbd472fd9468a1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b3ff9c5b0cfe46b39f1f373de74a78a9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "c7ae03ad06774ccd8181e682e373bf44": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e36cf38afa0f42dc87aa571710723cd2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "61dcd3782b4b4fc9835ee39ecdb0bd75": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_9351573fdd334834b3b333182819429b",
              "IPY_MODEL_d37c40ea1fe8409d92db9d06b74d073b",
              "IPY_MODEL_6e80929109c243edbda3e52f96abad3c"
            ],
            "layout": "IPY_MODEL_8938b746317a4472b9d3c62c686809d2"
          }
        },
        "9351573fdd334834b3b333182819429b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0bbd32c5e163461f9af55c220ca40c64",
            "placeholder": "​",
            "style": "IPY_MODEL_d3d2c975245e4e8a8cc3f895dcf2851c",
            "value": "model.safetensors: 100%"
          }
        },
        "d37c40ea1fe8409d92db9d06b74d073b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_06c0a2b609bf4118986e9b020d44ae7f",
            "max": 242043056,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_078fa8723e5540deb5394d58beea4ea9",
            "value": 242043056
          }
        },
        "6e80929109c243edbda3e52f96abad3c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_dfa34693ca6c427c80a454d9299dc05f",
            "placeholder": "​",
            "style": "IPY_MODEL_142bca6cb8394dc08f9ad8623dd7dbaf",
            "value": " 242M/242M [00:04&lt;00:00, 71.3MB/s]"
          }
        },
        "8938b746317a4472b9d3c62c686809d2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0bbd32c5e163461f9af55c220ca40c64": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d3d2c975245e4e8a8cc3f895dcf2851c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "06c0a2b609bf4118986e9b020d44ae7f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "078fa8723e5540deb5394d58beea4ea9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "dfa34693ca6c427c80a454d9299dc05f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "142bca6cb8394dc08f9ad8623dd7dbaf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "410bd6a53f1f4d5796bb9e2ae75ba49c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_2cabb38737884358823a2948fdf4de13",
              "IPY_MODEL_51e1deee639d459ab8cd37cf438b03e9",
              "IPY_MODEL_ce36633673b048b8aa8d043b72ceab07"
            ],
            "layout": "IPY_MODEL_d6730b25c0f94033981b368795f085ef"
          }
        },
        "2cabb38737884358823a2948fdf4de13": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_193f0825b8324cbb9f11d7e3faf6a9b8",
            "placeholder": "​",
            "style": "IPY_MODEL_ca9b4a456c354cbfa704ec5a6a186427",
            "value": "generation_config.json: 100%"
          }
        },
        "51e1deee639d459ab8cd37cf438b03e9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d779ba39b086462484ef5f72e86df42e",
            "max": 147,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_bec7e5bcae7f4de99803402c74bd2e03",
            "value": 147
          }
        },
        "ce36633673b048b8aa8d043b72ceab07": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ae7d8d448db24e0ba7d0354f185cb0cb",
            "placeholder": "​",
            "style": "IPY_MODEL_ce1c001b692a4170a9a34dab50e436c8",
            "value": " 147/147 [00:00&lt;00:00, 3.05kB/s]"
          }
        },
        "d6730b25c0f94033981b368795f085ef": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "193f0825b8324cbb9f11d7e3faf6a9b8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ca9b4a456c354cbfa704ec5a6a186427": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d779ba39b086462484ef5f72e86df42e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bec7e5bcae7f4de99803402c74bd2e03": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "ae7d8d448db24e0ba7d0354f185cb0cb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ce1c001b692a4170a9a34dab50e436c8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "be0e17f8eac3438bbdb377366ee33033": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_86dbb04ee35b405083c8630f2d3e50eb",
              "IPY_MODEL_b8768ecd32794436ab67f2ce49daf9c3",
              "IPY_MODEL_1c75b9eb7ddd4cae968d0cdb68691e29"
            ],
            "layout": "IPY_MODEL_c84bd06ae4dc4559af4e621e8957bbf4"
          }
        },
        "86dbb04ee35b405083c8630f2d3e50eb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ebfbcb4ca2ed456982e16f85af34226d",
            "placeholder": "​",
            "style": "IPY_MODEL_e6b592b6e1784d3997e4ca5f13354e8f",
            "value": "Downloading builder script: "
          }
        },
        "b8768ecd32794436ab67f2ce49daf9c3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d21c40f04454474badc98c42dcc08400",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_6c12ef818a36431e8211460ae84076d7",
            "value": 1
          }
        },
        "1c75b9eb7ddd4cae968d0cdb68691e29": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9469c8099f0f4cba913b6e6ddc5d9d08",
            "placeholder": "​",
            "style": "IPY_MODEL_3575cec4dbca4466bb77a6bace2fcb09",
            "value": " 6.27k/? [00:00&lt;00:00, 159kB/s]"
          }
        },
        "c84bd06ae4dc4559af4e621e8957bbf4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ebfbcb4ca2ed456982e16f85af34226d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e6b592b6e1784d3997e4ca5f13354e8f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d21c40f04454474badc98c42dcc08400": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "6c12ef818a36431e8211460ae84076d7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "9469c8099f0f4cba913b6e6ddc5d9d08": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3575cec4dbca4466bb77a6bace2fcb09": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "60823f02d08c4553a4476f8e16c49c72": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_6efcb6a5d8cd48509f311b7598fa02b9",
              "IPY_MODEL_d9e65b3a8a0348deb6f61c5a09dcd34e",
              "IPY_MODEL_799a5b33daf04ebebe2713c6918109b1"
            ],
            "layout": "IPY_MODEL_69b069ee18ed47ec93dd4704c8087f47"
          }
        },
        "6efcb6a5d8cd48509f311b7598fa02b9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6788969d8c8a4745b30a88c54e5d4e45",
            "placeholder": "​",
            "style": "IPY_MODEL_d8ba7bbc801244a693191efafc873e84",
            "value": "Generating with student: 100%"
          }
        },
        "d9e65b3a8a0348deb6f61c5a09dcd34e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fa1e7739b09a426da95fd7b154aa05b5",
            "max": 112,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_23a192764bf249c2ab79c11a14a34878",
            "value": 112
          }
        },
        "799a5b33daf04ebebe2713c6918109b1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3e588dec0dc84047abd6bdab68408173",
            "placeholder": "​",
            "style": "IPY_MODEL_4ae72f760ecb4454b04c07377e92618f",
            "value": " 112/112 [03:46&lt;00:00,  1.50s/it]"
          }
        },
        "69b069ee18ed47ec93dd4704c8087f47": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6788969d8c8a4745b30a88c54e5d4e45": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d8ba7bbc801244a693191efafc873e84": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fa1e7739b09a426da95fd7b154aa05b5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "23a192764bf249c2ab79c11a14a34878": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "3e588dec0dc84047abd6bdab68408173": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4ae72f760ecb4454b04c07377e92618f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1b6a6bbdd6834be99caf681507d4ec73": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_5a15366a2726499988e2800a4bae8a7c",
              "IPY_MODEL_7d779323db554f7e80e365b4dd955f10",
              "IPY_MODEL_ca7c0764d81848f688caa6efb0a1d09f"
            ],
            "layout": "IPY_MODEL_e5cc0c4849c546f88642414b30eaf072"
          }
        },
        "5a15366a2726499988e2800a4bae8a7c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0a94a0ccd7474ac8a87d44d34be690d8",
            "placeholder": "​",
            "style": "IPY_MODEL_e7076aeba23344f781bc3e6a543b8f63",
            "value": "Beam generate: 100%"
          }
        },
        "7d779323db554f7e80e365b4dd955f10": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_343d6930b9ae4281b4966b0784eac8dd",
            "max": 14,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_7e5e44503fc0497da5f83431b3d72d33",
            "value": 14
          }
        },
        "ca7c0764d81848f688caa6efb0a1d09f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e1e29e30825743b48261c2f94cfa10e5",
            "placeholder": "​",
            "style": "IPY_MODEL_7cce886073c241ad88324e097842226a",
            "value": " 14/14 [02:49&lt;00:00, 10.79s/it]"
          }
        },
        "e5cc0c4849c546f88642414b30eaf072": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0a94a0ccd7474ac8a87d44d34be690d8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e7076aeba23344f781bc3e6a543b8f63": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "343d6930b9ae4281b4966b0784eac8dd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7e5e44503fc0497da5f83431b3d72d33": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "e1e29e30825743b48261c2f94cfa10e5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7cce886073c241ad88324e097842226a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}